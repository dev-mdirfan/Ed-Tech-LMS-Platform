(116) All Functional MERN Stack LMS / Learning Management system series with next 13, TypeScript | Part 2 - YouTube
https://www.youtube.com/watch?v=w1fkGHGZs1Q

Transcript:
(00:00) hello everyone how are you doing I hope you are doing good So today we're gonna start the fronting part in our LMS platform series and today we're gonna complete the full admin dashboard and the authentication system I know you are super interested to start this but before starting this I want to show you something I received a lot of comments every day even like in my last video in the last part like where's the source code still a lot of people don't know like how to get this series source
(00:31) code okay this LMS series source code so simply go to bicodemy.com website okay create your account right now everything is working very fast very perfectly uh I believe right now there's not have any problem for creating account in picodemi okay then click here or you'll find out on link in the video description box just click you will automatically redirect to here okay then create your account then for access the source code you need to give me this ten dollars you need to purchase this project so I know right
(01:02) now you have a lot of questions like why you will give money for the source code and is only for source code you need to pay this ten dollars then after uh purchasing source code what you will get from here what is the benefit okay so I am clearing this everything one by one first of all I spent almost on and half month for this full series so that's why I'm just checking this like chain dollar from you so that you like appreciate me to make more content okay 10 I believe it's not like a lot of money and I believe like almost everyone
(01:33) 99 people have like ability to give me like 10 dollars because in India also this is only 900 rupiah 1000 rupee which is like not that much for this type of a big content okay now come to point if you give me 10 if you purchase this what you will get from here so after purchase you will button you find out this button entered to course when you click here you will find that all video okay today I am recording second part but in here already have the all videos the 54 videos okay but uh like in on in multiple sections okay
(02:09) like 10 minutes video 15 Minutes video like how quotes link platform work you'll find out all videos in here you can ask me question in here okay then you can give quotes reviews and the main important thing the main amazing thing is here is you will get access in this group chat what is this group chat in here you can ask question okay and already 56 people already purchased this course which is very good number really thank you to everyone who purchased this course it's really lot to me because I didn't think like this much
(02:48) people purchase this code if the number is really very good it's really very good so if you purchase it if you then you will get this like you know this kind of group chat features okay you can create new channel like how Discord work then amazing thing is you can do audio chat okay right now like I'm clicking audio Channel this is on channel I can right now talk with you if you another person is come here then that person can also talk with me here's also have video channel okay but I am right now
(03:21) turn off in my camera okay so here if I click hello I cannot show my face today okay so I'm like coming back here again so this is audio Channel this is like announcement and this is General so you can create new channel you can talk with each other I just started this okay so that's why like not have any messages uh I updated it I mean I added these features only like 30 minutes on our egg okay this is the first message in this group and like almost everyone who purchased this course they also don't
(03:54) know about it like I implemented these group chat features so if you purchase this then you will get access is everything okay you can like personally also ask me questions I'll obviously try to reply in here and this will be like uh always everyone will be active in here okay we'll purchase course so then you can talk with each other then in here I'm I'm gonna also adding like a lot of new features okay in from here you can like sync emojis you can upload image also so okay you can ask questions
(04:23) like how this card work everything is totally similar in here also and I will also update this group chat features to like more advanced like you can reply to any message then you can react to message okay the unsigned feature everything I'll add in like two or three days so if you purchase the source code you will get this everything okay but if you don't purchase the no problem you can also follow this video then you can like you will also learn a lot of new things from this video okay so that's it
(04:51) today my voice quality is not good actually my health is not good so that's why like I have some echo in my voice so please part only for this problem so don't waste in time let's start our front end part alright guys right now we're going to start our front end part okay so first open our terminal by pressing Ctrl and back ditch then switch check where we are right now so we are right now in a root directory okay not in server folder if you are watching Like This Server okay then it will go back to our root again
(05:31) okay like this now we need to create our next step so create next app then edit latest like this okay then hit enter what's the project name this will be client okay we will create a folder name will be client typescript yes is still in yes Taylor in CSS yes yes directory no app routers yes then import Alias no and then it will start to uh it will start to install the dependencies what we need for our next Chase okay so this is our app in our client so just wait for this this will take like few minutes so I am coming back to
(06:17) my Tailwind config.ts okay because we need to update few things in here okay so notice the creation is done okay so installation is done and in here so I'm closing the terminal and in here you know tailwind.config.ts we need to update few things okay basically in this theme so I am copying it from one of my code okay just skip the video guys okay so pause the video and check it this is the font family some variables this is the background image this is a default one so don't need to worry about it because
(06:55) this is default background image then this is the screen size which is very important okay custom screen size what will write then that's it so now basically we need to buy guys install on dependency okay name is our next themes like this in PMI next themes install it it's important for implementing dark dark and light light mode now we can run our server by npm run div by doing this comment oh oops so first go to our client okay CG client now let's do one thing check our package.
(07:49) json and check the notice the interdependence is didn't install in the perfect perfect folder so you can install the dependency npm my next themes in here yep done now we can run our server by typing npm run div so it's run just click here come to Google my Google is another window so let me go to here done so this is our uh initial theme right you know next yes now close this close this one this one also click on this app come this layout.
(08:30) txt search page.txt just press Ctrl a then remove everything from our page.tsx okay then first use here use client because this is our client component that's why and then import here our react then our FC and our use state yep from our react done then we need to create an interface simple name will be props we can keep it like empty right now then we need to create our component so page FC props like this then return here P will be Capital obviously and in here we will receive our props right now initial value okay
(09:29) then in here export default page done and in this return first create on div like this then we can keep it like empty right now so just come our website and it's empty perfect now we need some help or component okay some helper components we can say this is utils this is called so create a folder name will be utils in here and in this utils we need to create our another file name will be heading Dot ESX okay in this heading we will add our all metadata okay so react and FC from react now we need our interface head
(10:26) props then title which is string then description which is string and or keywords which is string done now we can create our heading so heading then FC our hit props like this then in here return yup fully like this so title will be this title and one thing missing here that is our meta viewport oops it's not showing here okay so let's do one thing let me write it like this okay so this is viewport content with device by white okay with an initial skill one okay this is like for probably for responsive work
(11:26) okay this is important then we need to export our heading cool done yep so now guys we can come here you know page.ksx and in here from here we can call our heading component so as we need to send three parameters in here like title so this title will be basically our home title okay our this this one so we want this to our website name like e learning okay this is title description will be e-learning the platform to store for students to learn and get help from teachers okay that's it you can write anything whatever you
(12:10) want because this is your applications so you need to think about your applications and you need to write these fields okay then keywords so this is we can write programming then man then Redux then what anything okay so whatever you want like machine learning okay done so right now if you come to our website notice this is showing e-learning okay so it means we change perfectly so in every page we'll simply call this heading and hitting helper component and we'll change this data this is automatically update our
(12:50) title then descriptions then it will add keywords okay which is very important for SEO okay done then right now we need to guys also do some few things so just come back to our global.css in our global.css in this body keep it like this okay very good but background will be not this just remove the background and some things I am copying from one of my code okay this is neat for our hero animation so I will show you obviously later what is the hero animations this is the code that's on background image on animations on uh
(13:32) keyframes okay like this one so you can skip it also okay because I will also show you later like why I am using it then right now we need to do a very important things in this utils folder create another file okay name will be theme provider dot GSX what will provide our theme okay so obviously use client at the first then import everything as react from react now we need to import our theme provider as our next themes provided from our next teams like this now import our type okay which is important right now because we're using
(14:33) typescript type theme provider props okay like this now we need to export our function then our theme provider then in here pass our children and our props just spread it till drain spelling mistake children and our props as our team provider props cool and inside here simply return our next team provider then our props like this and children and next theme provider yep and now finish it cool so this is done now we can easily save it yeah now come to our here you know page.
(15:35) tsx sorry layout.tsx which is important right now in here first we need some fonts in our website okay we are using two fonts in here so first let me import it we don't take in touch because we are not using we are using Poppins and Josephine sense this font name so import it from next font and Google okay so probably it's built-in one okay yeah it's built in uh dependency so you don't need to again install it probably or if given error then we'll install it again okay so just add the font in here okay like constant Poppins thin
(16:16) Poppins tense up subsets will be lacking and this is the white and this is the variable name what we added in our types in our TS config.json sorry sorry not es config in our this Tailwind config.ts okay this where font Josephine where font Poppins font Poppins font Josephine like this so in here we don't need this class name enter.
(16:44) class name just remove it now we need to import our theme provider also it's very important so import our theme Provider from our Intel steam provider and then now in here we don't need this meta guys because we are using our own function for updating our meta right for updating for writing our title descriptions these things in here in this class name first add our pop-ins DOT variable then also our Josephine dot variable done then in here we are using directly children but no we cannot do this because we need to implement dark features in here Dark
(17:35) theme so call our theme provider and finish it like this uh sorry yup and inside here Pastor children so in this theme provider we need to do something like we need attribute which will be class okay default theme which will be system then enable system yeah these three things is important so what is this attribute class means if you go to go back to our Daily Dot config.
(18:09) ts not in here okay this is missing so we need to add it so let me I'm showing you in here guys after this content obviously add dark mode sorry dark mode this will be class okay like this but add it in a third bracket yeah so this is meanings we can write Tailwind classes for doing our dark mode features or implementing your dark mode features yep now our direct feature is done so in here in in our background we need to clean our body we need to write some color so busy white but from dark BG will be gradient to B okay so here I'm using on gradient
(18:59) color which color basically I am also using in B codium okay to Black then duration 300 okay this duration meanings uh basically a word what is this our duration okay not hover duration uh when we are clicking to like button okay like light theme to direct theme then each it will take like this transition okay this will smoothly change nothing instantly this will change the background color then also here we need dark from gray 900 like this so yep cool now we can save it so right now come to our uh this app folder and create a new folder
(19:44) name will be components okay and come this layout.txt sorry paste.txs TSX and in here create our first component name is header so copy this header come here import header from our dot dot slash sorry dot slash components slash header dot TSX created TS RAF c e assume this GSX done now come this header this is I don't like this style okay so let me import FC and in here FC and like this yeah so in here basically first what we need to do we need to design our header right so I am designing it but
(20:48) but guys in here first we need to receive some data like open which will be on Boolean sorry Boolean then our set open what is open Boolean then void okay like this they're not active I came which is on number done so come here obviously we need to send this data from our page so let's create it first our import use state then State snip it open and set open your state initial value will be false then we need our active item then set active item then State initial value will be 0 yep now saying these two
(21:42) things open and our active item so okay so this said open and you also need to send set open yeah done in our header first we need to escape in here okay like our active and our open sidebar these two state import our state this one sorry imported done and obviously use use client at the top otherwise it will doesn't work use client yeah then in here we can create a class name w ool and relative yup then in here we can create on class name yep like if active
(22:52) foreign BG opacity 50 and then dark BG radiant to be and dark from gray 900 I'm explaining it again to you first let me finish this then dark two black and fixed top zero left zero W full height 80 pixel and we need more few things like Z index will be 80. not 80 pixel only 80 then border B then for dark border color will be not black this will be kind of white colors
(24:00) yep then after it we need our shadow a shadow will be Excel one okay then please check the class value okay if you don't know this because this is very basic kailu in CSS so transition when you will hover it then you will can see the meaning of this class okay so transition and duration 500 cool and in here otherwise W full border B dark border will be kind of white then one if extra in here sorry guys we need only more uh sorry yeah then in here height will be 80 pixel and Z index will be 80.
(25:07) and dark is shadow in dark version just show Shadow yeah so what is this very large so let me just format then this will like multiple line so uh if activists when active is true active is true let me write a function in here when basically active will be true so if type of window is not undefined like this okay this is already suggesting this is a problem of copilot okay notice I really don't know what's the ending okay name of this one yeah now done now for my document so what is this so this is basically when we will
(26:03) scroll our website then this header will be sticky okay for sticky features we are simply adding exactly when the scroller is going more than 80 then active will be true okay notice how it's looking right now so guys simply come to our page.tsx okay sorry not page.k6layout DOT TSX and in here just write a new line like BG repeat busy no repeat okay this one now come notice that it's gone but the background is still white okay we will change it no problem come to our header.
(26:44) ts6 notice this is working okay good so obviously we will change it because we will Implement our light features so in this GIF right now in this div we need to create another div which will be like 95 percent okay let me create it yup so width will be 95 percent from 800 pixel this will be 92 percent then M will be Auto py will be 2 and height will be full cool then again W full height 80 pixel the problem of emit when you are writing third brackets it doesn't work so yeah then in here flicks uh sorry then items Center justify between
(27:54) P3 done now use another div now on link will be import from next link yup and in this link we need to add on href which will be empty sorry not empty which will be slash it means root and we need some class also in here like text 25 pixel font will be Poppins font weight 500 then text black and in dark mode text will be White yeah that's it then in here we can write our logo so e-learning as we don't have any logo so that's why I'm making it like this if you have logo in this inside this link
(28:58) obviously keep your logo so still it's not showing okay sorry dark spelling was wrong yeah cool then after this this div ided another giv flicks and items center now we need to create another utils component okay name will be Navi cams and in this nav items we need to send our active item which will be basically our we can receive this active item in here like active item so active item will be our active item we also need to send another new thing which will be is mobile this initial value will be false done so copy these nav items
(29:58) import nav items from award dot dot slash utils nav items dot TSX created TS RFC just remove this GSX now so yep in this nav items in this props in this props we have our active item which type is number then we have all is mobile which type will be Boolean that's it at the top guys we need an array for our navigation okay so I am just copying this array like for saving time Yep this is the array nav items data home this is then courses about policy like this then inside here in this nav items first make it on react functional okay
(31:03) so like react Dot Ipsy props and we can remove this one then yeah we can receive it directly or active item and our is mobile at first make on fragment then hidden first class will be then after 800 pixel this will be Flex then if have nav item data then navigate data dot map like this import our link from next link href will be our I dot URL then our key will be index
(32:07) passive okay like this to I okay so make it to I not item then in here in this link make our span in this span last name will be class name will be totally like this yep add one back stitch here as well yeah so active item and index is matching then this color okay for direction and this this is for light theme and this is the CSS yup and in this span we need our name I dot name okay this name means this home courses then we can finish it yep
(33:12) yep like this then in here after this DAV guys make our Mobile on also in the same time so is mobile if have then our one div like this and inside this div o full text Center py6 and on link on href which will be slash and obviously add here pass riff okay because this is positive that's why and inside this we need our span just create on span and the class name will be kind of similar okay from the top one so let me just add it in here yep
(34:18) so this is the class name if I give an index is matching and uh one thing I forgot guys just start this okay not delete just cut this link and add here Navigator and nav items data dot map I and index and paste it yep now simply save our code and after this okay everything is done guys simply format it now let me show you what we completed come here and C or navigation menu starts when we are making it a Mobile screen okay it's not showing so obviously this will show we will edit right now but our Mobile screen is also done so our Mobile screen
(35:12) navigation Windows because we are making it in the same time okay responsive and design in the same time now come back to our header after this nav items we need to make one another one which is very important that is team Switcher one component which will change our theme so import theme switcher from utils and theme switcher this is called on utils helping function so just make it like this and in our theme Switcher first use client import our use state and our use effect now import our use theme from next themes
(36:13) now we need some icons so one important dependencies we need to install right now let's open our new terminal obviously in this client directory in PMI react icons okay very important so react icons installing them now import bi Moon and b i Sun from react icons slash bi that's it now create our export constant theme Switcher don't need any parameter or anything like that okay very simple keep it then on return but at the first we need to escape use state mounted and sit mounted
(37:19) initial value will be false now we need our team and set team which will be used him yup now in this return and one thing we need to obviously use here or use effect like this and set mounted will be true if not mounted then return null cool now in here in this return create our Flex items Center just if I Center then mx4 yep now we need to write a logic in here like if theme equal to light
(38:27) then our b i call our bi Moon icon class name will be class name will be only cursor pointer filter will be black then in here size will be 25. and one click will be this and otherwise this will be bi Sun which size will be also 25 class name will be cursor pointer field not need right now because it's need light that's why and close it
(39:32) and finish it simply like this done now format it save our code come here theme Switcher okay let me check the spelling what is foreign okay sorry so we need to import it like this because it's inside of our themes which are okay X another function that's why now save come to our website yep our Dark theme light theme is working very good now come you're not paste sorry inner header.
(40:17) tsx just need few things okay few more things then this will be almost done then so after this guys in here after this theme Switcher just give a comment this is only for mobile that's why and that is on class like from 800 pixel this will be hidden it means not available for our desktop screen only available for Mobile screen so we need our own icon which name is is I outline menu alt three size will be 25 class name will be Carstar pointer for the diet theme color will be white otherwise color will
(41:22) be black Ops not finish here like this for Dark theme text white otherwise text black done now finish it and one click will be this set open sidebar to true now import it obviously at the top yeah like this now Simply Save It nothing here okay in here still something is wrong it means let me come here so this will be 800 pixel now not that's not available here but when we are going to Mobile screen yep here we go then in here we need another icon which is not for mobile only okay which is for our here also okay in our desktop screen
(42:25) also that is our h i outline user Circle yep size 25 color class name cursor pointer dark white and then black like this and one click will be not set up inside but this will be set open so receive set open here guys yup done so what is this this is our profile icon okay like this now simply just do one short thing then our header work will be done I know this is very big I you are feeling like what I am doing okay because this UI is like very a lot of things in here okay that's why this header component is big but
(43:28) don't worry and then after eat after this 95 percent versus Glacier this class after this class we need to start our mobile site not okay our mobile site is already done but we need to use it right now so mobile sidebar and in here if open sidebar is true then only run this so here also have a big class so let me keep this class to here like this please read the class and uh probably to know you know the value if you do know then just hover it you'll find out the value okay because it's really a lot of hard work I
(44:17) am doing okay and this UI is very big so it's not possible to like explain to everything and this is very basic things and the prerequisest of this course is obviously you need like basic web design knowledge so constant handle close this will do one thing first write e type is any now if our e Dot Target dot ID equal to screen then our set then set open sidebar will be false that's it now come here and give here an ID which will be screen okay what is this meaning I'm
(45:20) explaining it but first let me finish it then we need another class okay kind of similar like this this is for giving on like uh black kind of black kind of effect for our screen okay we need to call our nav items like this we need to change it and we need our icon now which is our you can copy this one also but it's just little bit styling then give a format it's safe now come so come here now hit yep then in here give two line break okay after this icon then use your paragraph which is basically our copyright text
(46:26) use on class in this P like this now the main thing is in these never games hmm if is mobile is true okay I forgot to add the I dot name in here so set now save come here again like do like this open it up but it's why it's in Center it means our class name issue so guys in here we don't need this this GIF just remove this jiv okay now save come here yep it's looking good and also one thing let's do here just add a new class in here okay in here our logo like this then yep it's looking good right now
(47:24) and guys this is not neat for our uh Mobile screen so we can remove it so just come here and check words this is this is a profile cycle icon okay so just cut this div add it in here then this will remove for Mobile screen also yeah oh okay sorry edit outside of this tiv yeah and right here hidden but from 800 pixel block done yep now it's looking perfect if we change this color to white the note this is also changing to White very good as you expect so you can also customize these guys totally as your wish okay this is right
(48:27) now on your hand like how you wanna do this yep now we need to make uh one small thing so I am just uh this is very basic UI design so I am just right now copy I will copy this hero component okay first create it um closing header this nav items then this theme switcher also after this header let's make our hero copy this hero import our hero from our dot slash components then we can say hero okay home then or sorry we can say root this is root folder component Roots then hero dot TSX like this now create it and in this hero I am just copying few
(49:25) things I'll change it also okay so then remove it this TSX first save this this one also so just come to our website and check it this is what we wanted to do okay so notice this animated background is changing okay so for making this animated background we edit this CSS okay don't worry I'll show you this hero component okay don't worry just watch this animations okay so for changing the background I added these animations like this linear gradient color and this is animations now come to our hero we need to change
(50:05) few things in here we use like IMG tag so obviously it's not good practice for next Chase change it to image so when we will use image it means we cannot use Link like this okay we need to use our local files which is good for our next check so require then let me go to this folder you will find out it in the source code okay this images LMS uh sorry not LMS here yeah LMS YouTube client public assets oops assets and let me download it just open it in a new download image come to our LMS YouTube client public assets and download it
(51:11) done so require dot dot slash dot dot slash public sh and banner image like this come here and this is our image perfect so we also need these few things also image okay not need IMG tag IMG Tech multiple time it's not good so let me just download it and type it in folder you will find out it yep guys downloading dance so image and SRC will be not like this now require and dot dot slash dot dot slash public assets client1.
(52:13) jpg so copy this change this to two change this to 3 and change this all to image tag like this now come here and check so this is our UI so just check this why I am showing it to you very simple design nothing else just note you will not find out anything okay which is not including design you can check these classes also very big classes so obviously this is like very basic things so I hope you know this basic design and just customize this design as your wish so this was the first video guys I know this video is Big so right now we are
(52:56) making front end parts so obviously this video will be bigger than the back end part because right now we need to do a lot of lot of work that's why okay so that's it guys so from the next video uh when we will click here this will open a model in in this middle then we'll Implement our login sign up features okay into that model we will install our formic app then we'll do foreign validation form validation then we'll make our login authentications features okay so see you on the next video
(53:30) all right guys right now we're going to start to make our authentication pop-up our registration login activation everything okay so let me just open the terminal in here and I am already run the package server okay so obviously run the backend server also then go to our client folder by CD client then run this npm run give okay and also run the backend server by going to the backend directory and npm run Dave now let me go to Google Chrome yep and localhost 3000 here you go it's our website now we need to install some dependencies
(54:19) which is very important right now okay so let me open the new terminal in here so now let me install it one by one so first go here and search material UI okay not icons click this kicking started and copy this command Okay this command and this is the website URL come here paste it then after it you also need to install some other dependencies like react heart toast okay then our react Redux then our at the date Redux Js slash our toolkit yup and our material you are done then react hot toast on react Red X and yeah one another very important
(55:27) thing for make and yep for doing a foreign that's it so it will obviously take some time for install all the dependencies okay so when it's installing we can close it okay or we can keep it like in Bottom now come back to our first in this space.tsx we need to add few things okay New Field stage in here like after this active item right now we need to send our root and set root which initial value will be our login okay this is important for the pop-up that's why and in here in this header also send our
(56:24) set root and our root that's it now installing dependency installing done so clear it and close the latest terminal and close it come back to our headers component and in this header component in this type props let's add these few things like our road which type is string then secondly our set root which is also like this now in here guys at the last okay and the total last like this we can close this one after here we need to write on logic like if root equal to
(57:30) sign up then one thing so root is we need to uh add it in here in our props yeah and in here then simply we can right now skip this because first we will start to make the login then we'll implement the sign up okay so we can next one we can say login okay like this or we can do one thing guys we can remove this and we can right now we can start to make the login okay because at first we need to login here and in here we need to write a logic if open is true then let's call our custom model component okay what we'll make right now
(58:30) so custom model like this so come back to stop input custom model from our go to utils and custom model dot TSX and create it by pressing left side of your mouse and command and command and website of your mouse like this remove this GSX right now open okay open is missing so add it in here like this and save this one also yeah so in this custom model basically we need to send few things in this custom model because this is kind of helper component and we will use this custom model everywhere okay so we have our opening here
(59:33) which is on Boolean we have our set open which is Boolean void like this we have our active item which type will be any we have our component which type is any we have our set root but not for all so let's just add an optional chain and root string and void like this in here imported FC from react send this props and remove these few things in here import our open our set open our set root and our component as name component like this clb capital then in here in this return just
(1:00:38) import our model from our material UI okay like this so model OKAY model is not importing let's import it manually import model from movie and material like this also import our box okay which is very important and in this model we need to send some parameters okay not parameters we need to set some value okay let's expect some value like open will be open on close will be set open false like this then we need to write one area label bye
(1:01:40) area level by like this model then model title okay then area description described by model model description like this then let's add our box inside this box let me add here our class name so class name will be like very big guys so let me just add this class name this is the class name absolute topic version left 50 percent translate um x minus 50 y minus 50 this is meaning okay weight is 450 pixel background color white for dark this is the background color border radius 8 pixel some Shadow some padding and outline
(1:02:34) none that's it and inside this box now we need to send our component and set open will be set up and set root will be this now what is this meaning come here in this custom model send few things from our header okay like first we need to send our open which will be open set open will be set open set root will be our set root then our active item will be our active item and which is the main important that is this component so we need to say which component will be this is okay so for us this is right now login component
(1:03:20) so copy this login and say to root it's not okay add here set route here and right now make our login components import login from components odd login and Dot TSX now create it gsrfce remove this GSX yep done now we can come to our login.tsx and in here in this login.tsx first import award use formic okay from our formic then import everything as [Music] yup from yep
(1:04:25) y will be obviously capital okay then import few icons like uh AI outline I okay for our password then AI outline I invisible okay then a i fill GitHub for our social authentication then from react icon slash AI That's it then import our FC Google from our react icon and FC that's it inside this types prop type props sit root type will be our root string and void like this now let's start our main thing that is create our schema okay for our
(1:05:31) object [Music] then call it like this then dot shape inside here we have on the email which will be yep dot string and email like this okay then this is required okay in value Gmail and required please enter [Music] your email okay like this then if if wrong email then invalid your mail then for the password also okay yep dot string then in here is required please enter your password and we need to add one minimum length like six yep and then in here in this login call our FC and send this props like
(1:06:36) this so import this FC from react yep and then in here inside here create a word show and set show state import user State and at the top use your use client like this now in here we need to create our file make function so for make equal to use for make and initial values will be email will be empty string password will be empty string like this validation schema will be our schema yep then on submit will be on asynchronous function
(1:07:39) which will receive email and password then run and call back like this then for now we can do simple and console log okay like email password obviously we will Implement here our this is called wait in here we will Implement our rtk query State okay we will call our Arctic equation here article query action then in here guys after eight we need to distract something from our formic okay like we need to distracts our errors touched [Music] right now formic yup in here create your class name dot blue full
(1:08:44) on H1 which have a big class so uh we can do one thing guys okay as I'm noticed like similar type of class we're adding for multiple multiple time we can create one folder by using the name Styles in this utils okay so let's create another folder not in utils this app create a folder name will be Styles inside here create on file style dot TS like this okay so then what we can do we can simply create on export constant Styles equal to like title okay then we can add some classes so let me add these classes this is like
(1:09:31) always similar for all titles so let me just add it like this text 25 picture text block dark text white and this is the font weight font Poppins text Center and pi2 now what we will do in here class name styles dot title okay we make sure that the Styles no not like this this is this will work right now in production this development mode but production mode this will doesn't work okay this will can do problems obviously don't add like this just add dot dot slash dot dot slash yep now the link is okay
(1:10:18) so save it and inside here we have our login with e-learning this is the element yep so let me show you how it looks come our website click here and boom login with eLearning so yeah then after eight we have one form while we have an actions so we don't need any actions we need to unsubmit whichever handle submit then we have on level okay which is basically our which is also similar type of class okay for all level so we can give this name to Styles Dot level okay so create it in here sorry level
(1:11:21) paste it give it a comma uncommon level so then it's also done so enter your email level will be this yep and yeah perfect then after this we have an input okay so let me copy this input this is a very long thing okay so I'm distracting it no problem so this is the input type will be email name empty values values dot email okay one change will be handle chains ID email obviously added ID email placeholder this login gmail.
(1:12:01) com this is the class name okay so lot of things here okay so like this is the extra extra things what is this if errors dot emails have then touch and transcript emails then just border rate otherwise this is the common things so we can do one thing we can cut it and we can add here tiles dot input okay similar thing so why we will add it in our code multiple multiple time this is not looking good so add it in here and save it cool now in here if you come to our website this is the login our login input and we need to add on thing in here
(1:12:48) important that is our errors let me just copy this small thing error start email and test that email then this is span and this message this value will be errors dot email so this is basically show us the message okay then after each and obviously at this class name in this message will show rate then some padding top and display block and after it we need our password input okay now guys creating another gif and in this gif class name will be our tableau full MK5 relative and MB my mb1 now on level we need we can copy our this previous level okay
(1:13:47) and element will be our Intel your password like this okay now come here yep and after this level we need to create our input which type is let me do one thing yep in here type will be if show is false then password otherwise text name will be password value will be similar value start password on chains will be our handle chains ID will be our password placeholder will be password class name will be this one yeah but obviously changes to password and here as well that's it and one important thing we need to edit right
(1:14:48) now in here that is if not show it means if show is false then we need to show an icon okay like this one otherwise another icon okay which will be AI outline I this one so absolute bottom three right to Z index one and cursor pointer and what this will do this will simply add one eye effect in here okay this is very basic like web designing things okay then after each after this here we need to write our error message our password error message like this okay similar thing now come back here after this input so after this giv
(1:15:46) this is our relative kiv here we need to create another giv en which will be for our submit button okay like this one so W4 and mt5 this is a very long class even it's always always similar so let me cut it and add it in a class name like styles dot button okay because this is pattern and sorry button and paste it so let me show it to you Flex Flex row justify Center item centers and this is padding rounded four Cuts or pointer this is background color minimum height 45 pixel and this is of some fonts Styles okay
(1:16:37) now save it and hit this format now come here this is a login yep after it after this login we need to give on line break then we have an H5 that is like join with okay and let's write this styling it's not also that much big okay so let me write it yeah like this text Center pt4 font Poppins and this is the font size text block and for the direct theme text will be white yup or join with cool then after it we need to create another div which will be our Flex item Center justify Center in My3 now we have our two icons
(1:17:30) on his GitHub another one is Google icon so like this then right now we need to add on H5 like hey do you have not have any account then set root okay so copy this set root and add it in here like this so say to it will be the sign up okay so we'll change this set route right now even in click this not have any account then sign up then yep like this and after it we can give on like prayer okay line break yeah that's it so this is our login form which is done probably the UI is looking good okay and even it's mobile responsible so you can
(1:18:27) check it's fully responsive okay great so uh basically guys this is done okay this is looking good probably I I hope it's looking good okay and right now just start to make our sign up which is very easy because we right now is totally do copy paste okay because uh already on component Dam so this is similar that's why so just copy this and you can also do copy paste don't worry I I am doing copy paste tunics you can also do this okay from the next component so just copy this one okay add it in
(1:19:02) here uh oops sorry if root equal to sign up then in here call our sign oh sorry we need to create it I forgot it sign up okay so let's create our sign up component so import sign up from components auth signup dot TSX simply create it tsrafce that's it and remove it cool so if this is sign up then this will come to the sign up screen very good so now let's do one thing let's copy our full login full control and control C okay Ctrl a and Ctrl C in the login component in this sign up
(1:20:06) again Ctrl a and Ctrl V just change this name to sign up okay otherwise everything will be similar right now yeah so this is our sign up now simply start to change slowly slowly like we have our name in our sign up component so name will be yup dot string and required and please enter your name like this cool then in here this will be sign in already have an account like this and join account would be like this similar then in here add another field name empty string and comma that's it then in here save it guys and just come
(1:21:04) here note and this is showing still login and change it right now to join to e-learning okay join to internet yep then in here okay at last this will be not login okay the input value will be not login this is sine and up like this cool and now just add on extra field which is our name field so we can do one thing we can copy our this first one okay we can come here you can create another giv then you can paste it now just check it this is our same thing okay now enter change it to enter your name type will be name not have a name type okay just text
(1:22:07) values dot name handle change ID will be name placeholder will be John Doe or whatever you want okay placeholder yours dot name touch dot name then this will come similar to here also yep very good now what is enter your name and one thing is very important that is MB 3 yup so space is also done so let me right now hit this sign up notice please enter your email please enter your password the name is not showing so let me check why why not showing name okay guys now it's showing okay notice it's showing but in here we have some
(1:23:03) problem in this uh password one okay let me check why the password one is doing problem so password one is here and this is relative okay just add this error outside of this password giv okay then note yeah perfect now give a Reload guys and again try this come to a sign up hit sign up yep perfectly working okay just give reload then it will start to work so format our code right now and our sign up design is also done in here okay now if we write now hit sign up after entering this all information this will open another screen which is very
(1:23:49) important okay that this will open our when on submit we'll call this will change our for now okay we have changed our set root to verification okay verification like this copy this now come to our headers the last time copy it again and if our root is verification then call or verification component okay like import verification from our components auth and verification dot GSX cool in here ksrfce remove this one now come here fill this informations now hit sign up now what is verification here cool now let's start to design the
(1:24:52) verifications which is easy even and hard also okay because some things like advance in here I'm showing you know don't worry so in here first we need to import our toast okay from our react.stify oh okay I forgot to not not react to specify react hot toast yep and one thing guys I forgot come to our page.
(1:25:25) tsx okay sorry in here in our layout.ts GSX and just after this children let's add our toast containers like this and toast container will be imported from our sorry sorry not toast container I am extremely sorry this is toaster from react hot toast Position will be our top Center which always looks good and we can say one thing reverse order will be false okay yeah now we can use our react hot toast cool so in here we have imported our hot toast now we need an icon okay the icon name is VC workspace trusted from our
(1:26:16) rect icons and VSC now import not in an import right now in this type props set root root which type is string and void like this now in here create on type which name will be verify number where we have 0 which is on string we have one which is string we have two and three which both which all these extreme so what is this this is nothing else this is our four digits okay what basically we will enter in the UI okay four digit of OTP codes now in here in the verification call our FC import from react and then call the props
(1:27:17) and inside here we can call our set root yep cool now in here we have our invalid error and set in valid error which is State initial value will be false okay import you state from react and constant yep done then we have our input reps okay which is also very important this is our input reps so import or use ref from react then HTML input element which initial value will be null then we need to create our verification Handler so for now this will be empty so verification hand colors which on asynchronous function
(1:28:23) and inside here we can simply right now join console log okay like anything test for now then after it right now we need to do the main important function which is our handle input change okay we have our index which type is number we have our value which type is string then inside here first set invalid error will be false then constant new verify number now spread our verify number volt one okay verify number then call our index like this and this will be value cool so verify number create a new state okay
(1:29:30) in here we can create it like this constant verify number inside verify number and this will be 0 1 2 3 all initial value will be empty string okay and call this verify number our type in this state then after here we need to call our set verify number and we need to send this new verify number okay now we need to write a logic if value is 0 mkr in empty string and our index is more less than zero then input rips and index minus 1 Dot current then Focus like this else if index is like uh not three guys this is long wrong suggestion
(1:30:32) if value dot length equal to 1 and index is like this then our input reps will be input reps will be index plus 1 current and focus like this yeah then here's done that's it so on error here okay we need to finish it yup now after it we can after this lot of time we can start our main component right now okay so first we have on H1 which is our class name will be our styles Dot title okay and in here we need to write our verify your account
(1:31:36) call click sign up and just enter some informations yep verify your account then after it just add on line break and then another class like this finish it inside this we have an icon okay which is kind of this with 80 pixel High JK pixel download full this is the background color and this is our CSS kind of yeah this is the icon after it just give two line break okay after this giv yeah sorry guys cut it and add it after this DIY okay not the previous one after outside of this Flex one okay then
(1:32:39) we need our main uh GIF right now okay this is our main given what will wrap oral content so what is this okay so for our this screen size this will do it seventy percent otherwise amount of flex item Center and justify around like this cool now let's add our main things so object objects sorry object dot keys dot our not DOT in here send or verify number right now then dot map okay very strange right then key and index then return it simply now input which type will be not type is text okay key will be our key
(1:33:41) ref will be our input refs and index cool and class name will be our this type of class name come to sign up and this class name okay first copy and edit then we have something new in here no sorry guys this is not the same class name okay let me show it to you it's not similar last name okay this is the class name 65 height 65 and background transparent border 3 pixel rounded Flex item Center text black dark mode text white justify Center text size 18 pixel font Poppins outline num and text Center then if infinite errors then one
(1:34:33) animation we need okay like shaking animations so just come to our global.css and add another animations okay small on animations which is like forever shaking effect okay if any user type wrong OTP then it will keep on like animated effect yeah this is the animations just watch it and write it yep then in here in order to be verification after this class name Place folder will be empty type is done then maximum value will be sorry Max Lane guys maximum length will be 1.
(1:35:14) then value will be our verify number then key as key of our verify number that's it now on change will be like this our handle input change same index and either Target dot value cool after this giv guys just add another two line break okay and come here first let me show it to you this is like how it looks like but no it's not looking good so let's remove these Styles okay height width 500 percent is looking good Yep this is good now after eight we need to add on button okay or verify whatever you are done
(1:36:10) after this giv after this two BR line break this is our our W4 Flex Festival Center and this is the button so we can do one thing guys don't worry this button is similar class so we can call our Styles dot button so verification handlers be edit it but we okay spelling was mistake now save it and after this button and div create another line break and give an H5 okay then copy some Styles we you can copy it from here also okay this one so let me write it yup like this then guys in here this value will be like go
(1:37:09) back to sign in and on span wire will be sign in this will be Capital cool and in here we have one class name very small class name like this and one on click like this now we form it save it come here and right now hit this verify OTP okay type something okay guys something is wrong let me let me check if invalid error is to root then only okay so in this verification Handler if you don't click okay for right now make it true now hit yup cool but obviously only number will be available here no one can enter text
(1:38:12) okay on the number now okay one small things is happening here right now let's do one thing that is come towards CSS global.css and remove this all uh Arrow okay so global.cs is here for removes or arrows we just need these two lines okay save it now come here not the arrows come cool we can even right now remove it like this we can add it and we can hit verify OTP it's showing perfectly okay then suppose come here and if we click right now sign in then this will go back to the sign in page again sign up and after entering the
(1:38:59) information it's going to the OTP verification page so our UI design is perfect and perfectly done so from the next video we'll Implement here a dynamic feature okay we'll start to make the registration feature then OTP will go toward mail and will validate with that okay so that's it guys from the next video we'll start our backend we will start our Dynamic features so see you in the next video alright guys so for implementing the dynamic features we need to right now start our Redux folder okay we need to
(1:39:30) create our Redux folder so create a Redux folder in this client folder name will be Redux in this Redux folder create another folder name all the features and in this features folder create our API slice dot TS like this okay and create another folder which will be auth okay empty and in this redacts folder create our store Dot GS5 like this okay so first in this store.
(1:40:12) ts first use our use client like this now import our configure store from our Redux JS at the date redacts JS toolkit like this now we need to import our API slides but it's not done yet so we can simply make it like this okay comment it not need now export constant store equal to configured store reducer will be empty right now Gap tools will be obviously false what is this meanings if we keep these step tools to true then people can like go to our web browser okay website and they can they can use Redux cape tools okay for like debugging it okay for No redx
(1:41:08) Escape so we are making it fall so no one can hold it to like debugging it like from by using Redux step tools then middle wire then get default middleware like this then get default metal wire this will be mg Dot concat and our we need to create our API slice so make it right now am key okay so let's do one thing in this API slice in this API slice let's do one thing I think is features folder create a folder name will be API and move this or drag this API slice in this API folder okay it's the best practice yep and in here
(1:41:53) first import our create API and fetch base query from our Redux JS toolkit slash query slash react like this now export constant API slice then create API then reducer path this will be API okay then in here we need our base query so we are using phasebase query inside here we need to add our base URL okay so for the base URL we can do one thing we can create on Dotty in the file in our client folder in our root client directory okay dot EnV like this and in this dot EnV we need to create our next public server URI okay so obviously at
(1:42:58) this next public otherwise we cannot access it like by using next public so next public then server this is our server URL okay now come here and process Dot EnV Dot next public and API URI not API URI again copilot giving wrong suggestion this will be next public server reward I okay and after it in here we can given comma we can add here our endpoints which have on parameters okay name Builder and we can finish it right now because we don't have any endpoints right now then in here we can call like this export constant empty and API
(1:43:49) slice because it's empty okay that's why now we can come to our store and uncomment it and import something from our DOT slash features API and API slice like this so in here simply right now in this reducer add our API slice then our DOT reducer path then in here this will be API slice dot reducer like this yep done so simply right now our Redux creation is done okay and in here in this concat obviously we need to add our Apes slice dot middle voice done so right now guys we need to connect this Redux with our applications okay
(1:44:50) with our front end so come back this app folder and in this layout.tsx sorry in this app folder create another file name will be provider dot TSX okay like this and in this provider first import our react and our react node from our react like this then we need to import our Provider from react redacts like this now we need to import our store from our Redux folder and store this one yep now create our interface like provider props we have on children in here we will receive which is react node yeah then we can export our function
(1:45:58) providers then children which type is this provider props okay call our provider props interface then in here return our providers and store like this and provider sorry providers store will be out store and children and provider like this and finish it cool so this is giving property children does not exist on type providers okay chill drain spelling mistake children yeah now in here also children what is this is saying react node is not assignable okay so wait okay guys something is wrong notice this file name is is stored okay the spelling
(1:46:53) is wrong so make it store okay you say Obviously big mistake store dot TS and update the Imports then in here like this and this children is giving an earning type react node is not assignable to type import like this okay so in here you can add one optional thing okay guys so I found on solution okay the error is basically a typescript is saying as react.
(1:47:20) react node is not assignable to type like this okay so we can say one thing instead of this react node edit any okay this can be any type so then this this earning will not show by typescript okay like this now we can close our providers and we can come back to our layout.tsx okay and this type is not neat so remove it and in here import our providers from our DOT slash provider yeah and right now guys in this theme provider just cut this theme provider okay cut it and add here our providers and paste it yup so our Redux adding done with our website okay
(1:48:04) without project so let's do one thing let's go to our browser and note on error cannot access dot get State on the server okay so this is very common error this error is happening because in this layout.tsx we need to add this use client okay so use client now error fix just comment note here again yeah so right now let's come to a Redux folder again and just finish our producers and actions okay so basically our article question is very fast okay we can we not we don't need to write a lot of code we can
(1:48:44) complete our uh API slides and our register in a very short time okay so I'm showing you how fast and how easy to implement Arctic a query in our project okay I've lived after watching this tutorial you will also start to laugh query okay this is very uh shortcut okay the coding is because if you think about a Redux toolkit or like Redux tanks that's like very big okay we need to write a lot of lot of extra codes we need to rewrite same type of things for multiple multiple times but rtk queries advance in here okay
(1:49:17) so in this API uh in this here in this auth folder create our auth slice okay auth slice dot GS and our auth API dot TS slice means you can think this is kind of reducer okay so in here import create slice from reductions toolkit yeah now constant initial State we need to add an initial state to initial state which will be our token will be empty string our user will be also empty string done this is our initial State now constant our auth slice create slice name will be auth and after it after name just call our initial State then our
(1:50:20) reducers yeah inside this reducers let's make our reducers so like user registrations okay one on reducer when user registration will happen we will after successfully registration register the user we will add something in a Redux store okay so this is called you can say this is global State we can access it by using the use selector okay this state so state DOT token which will be action Dot payload dot token okay then in here we can finish it and initial state okay sorry spelling was a mistake my spelling was mistake initial State this
(1:51:10) will be like this now in here we need to export our few things and auth slice dot actions like this so what we need to export we need to export our use registrations and adherent constant that's why it's not suggesting okay so this is a registration where simply uh exporting it also we need our user login State okay State and action like this and in here State DOT token will be our action dot payload dot access token okay not token this will be right now X is a double c e double s t o k e n yeah access token now state DOT user will be
(1:52:05) our action.payload dot user cool and user log out when user will log out Simply locked out then our state DOT token will be empty and state that user will be also empty like this now uh let's export this to slice also is a locked in and these are locked out yep two reducers so that's it done and right now let's come back to our auth API and we need to make our API right now so import you can you can think this is kind of actions okay I am explaining with you with the Redux toolkit style because I in my previous
(1:52:52) video I I worked with a relaxed toolkit okay so that's why a lot of my subscribers and a lot of my viewers like familiar with Redux toolkit okay so that's why I'm explaining with Redux toolkit style then you can understand it easily API slides from our API okay in here from here this is our base our route you can think from here we can add this API In Here Also okay auth API in this endpoints also but in a single file if we add multiple multiple endpoints obviously then this file will looks very big which is not obviously good practice
(1:53:27) right so in this auth API we are importing our API slice now we are also importing our user registration uh from our auth slice okay then we need to create on type okay registration response name will be this and in here we have one message which is string we have one activation token okay which will be also string like this then we have another type register sorry registration data which we can keep right now empty object okay for now now export constant auth Epi equal to apislice dot inject endpoints okay dot inject endpoints it means we are
(1:54:28) injecting endpoints into our this API slice okay in these endpoints then in here we need to add our endpoints new endpoints so similar style call our Builder like this parameter just simple and in here all end points will be here okay ends points here so first we need a resistor endpoint so register so in rtk query we have two type of request one is like fetch another is mutation fetch winnings get or query okay not pay not page guys sorry this is query okay query meanings kind of get request or face request and
(1:55:09) mutation meanings like other one like Port post then delete this type of thing okay so uh for obviously we need to do Post request for uh create user so that's why Builder dot mutation and registration response and registration data like this in here we have our query we need to send the query okay then inside here we need to we need to say the URL okay of our backend URL so backing API Ur release slash registration okay but if you think about our DOT EnV HTTP dot slash localhost 8000 slash API slash V1 slash this registration okay this is our
(1:55:54) URL then in here method will be post method body will be our data okay what we are basically receiving from this parameter then obviously credentials very important we need to includes it okay include as our constant yep then in here we need to create another okay let me explain why I am creating it in here so this is sending on request okay but after sending request when you are getting data we want to store that you know this in you know this reducer okay in this user registration in this state DOT token we wanna store our uh
(1:56:41) when I store our response token okay in this user token okay so that's why after complete the request like asynchronous multiplication asynchronous and we need to create one function like one query started okay this is not probably function this is one this is on method okay one query is started this is a method here's it yeah and in here we need to send our arguments or ARG then we need to add like two parameters like query full field we can say and our dispatch then on try catch error type what will be any
(1:57:22) and in this try first we have our result okay it means our API response so await query fulfilled this is our result now when we are getting the result we need to dispatch our user registration okay user registration so this one yep sorry guys some mistake okay in this dispatch now is a registration and like this okay then in here we need to send our token okay and oh sorry again mistake like this not this and in here we need to send our token which will be our result dot data dot activation token okay this is our
(1:58:10) response so in our API response we are getting data in activation token so that's why data dot activation token will be this token value it means we are setting this data token okay it means we can right now you if we use you selector if we add this reducer in our store we can access this estate dot token from any component right basically it extend this is Global State okay so then in here we can finish it like this and in this console log uh in this cache error okay we can do a simple console log simple console
(1:58:44) log like error yeah so save it simply and right now let me show you the power of our Arctic query so suppose export constant okay right now empty and in here our auth API call our auth API so we created here our resistor function right so right now if we write here use registration mutation use register mutation then we can easily call it we don't need to like we just need to send our data this action is ready so it's very fast and you can think it is very shortcut okay like in this few lines of code we
(1:59:29) are completing our user registrations which is like if you use Redux toolkit or Redux tanks or like other things like Redux Saga okay then lot of things you need to write right but in here when you are using article query this is very shortcut now in here we can come to our one thing guys let me finish this then this will be Obviously good after registration we also need to make our activation one okay so let me finish it right now then we can make this vote so activation which is also Builder dot mutation okay
(2:00:07) and where we need to send query okay like this previous one similar and in here we don't will receive like data like this okay because we we need to receive an object on is our activation token another one is our activation code okay so if we right now go back to our backend server controller and user controller.
(2:00:36) ts then note you know activate user we need this activation token and activation code from request.body so we are simply changing it like this from here okay first we're receiving these two two parameters we're receiving these two value okay two arguments not parameters this is the parameters name and in this parameters we're receiving argument so query and in here URL will be our activate user like this method will be our post method okay obviously every letter will be Capital post like this now in this body in this data we need to
(2:01:17) send our activation token and activation code like this now we can finish it yeah so then in here guys we can say use activation mutation okay so our two action is done so right now if we right now come back to our component our uh this header okay then let's come back to our sign up here so sign up in this sign up when we are on submitting it okay then in here we need to do few things like first we need to make on variable constant data and inside this data let's store our all data name email and password okay user input value then
(2:02:16) in here we need to First import right now hours this hook okay what we made sometimes ago this use registration you use register mutation okay this is on hook so suppose constant something from use registration mutation okay like this and this will be third bracket this is the rules and in here we need to call our resistor so why resistor because in this art API we added like this name to register that's why okay so register and in here now we have to use on second bracket and in this second bracket another magical thing of rtk query
(2:03:01) suppose we are making on request to our server right then we're receiving some response obviously so we can simply get the response from here like is error it's built-in we don't need to make it custom only okay this is totally uh automatically particularly making it for us is data then our data what we are getting response then our is error okay sorry is error is already here is Success okay like this so we can get any data from here okay there are a lot of other data also like error also have we
(2:03:38) can get your error message so each success is not need because when we have data then it means its success yeah then in here we can create on use effect use effect snippet and in here if our is Success it means our we got our data perfectly right if this is Success sorry okay so let's do one thing add here our is Success again yeah if it's success then constant message equal to our data Dot message otherwise registration successful okay like this then we need to send on post to our user okay toast dot success
(2:04:36) our this message yeah then right now if success only then set root will be our verification yep like this now if you have any error then what will happen if have any error then we need to write on logic like if data have in our error then only constant erode data which will be erode as any type okay now toast dot errors this will be our erode data Dot data dot our message like this okay and in this dependency add our is success and our
(2:05:42) error which is important yeah cool so now guys come here in this uh in this here in full in here now call await and register and send this data that's it so we are calling our register it means we are calling our actions kind of that then we're sending this is error is not me we can remove it right now okay that's not me so right now come to our website obviously we need to run our backend server again okay I stopped it mistakenly so CD dot slash then go to our server and npm run gif yep come now come to our website come
(2:06:27) here come this sign up suppose be coding me this mail and let me type on simple in password so suppose I am adding an email which is already exist this one then hit sign up so something is wrong guys let me check again he sign up okay so this is showing on course error okay good thing let me check why showing quotes error so go to our backend then app.
(2:07:01) ts so this process dot EMB dot origin guys not working why not working I don't know so let's do one thing add here an area sign and HTTP dot slash slash okay then localhost 3000 cool and here also at credentials true now save now come back to our Google Chrome again and again hit this sign up yep perfect email already exists instantly it's giving an error so suppose right now I am typing this one and hit sign up then just wait for the response yeah please check your email program gmail.com for activate your account now
(2:07:43) come to our Gmail and this is the mail okay 4269 the code so suppose just come here our sign up work is done now come back to this verification.tsx yeah and in this verifications.tsx first we need our token okay so we already stored our token in our use selector I mean on Skate index State Global state so state probably guys are forgot to add this state so state DOT auth let's do one thing I know what is right now not available probably so yeah it's giving error so come here and add here auth and auth slice okay where
(2:08:29) this is our store.ts okay then auth slice so import our auth slice okay probably I forgot to export it also so odd slice okay guys I forgot so export our default hot slice dot reducer cool now come here and Export our odd slice now you will find out the options here cool done so now token is in here code and in here now we need our Activation so let's call our Arctic query functions okay you can say so activation and our is success and errors okay so call our use activation mutation
(2:09:36) yep done and now in years add one use effect what you always do and in this use effect add here if we have is success capital this will go to the login screen and it will show account activated successfully if have a road again if the OTP is wrong then if data in error then constant error data error as any then toast dot error our error data dot data Dot message cool otherwise
(2:10:42) in here let's do a console log and error occurred then in here let's add our error okay yep that's it and in this dependencies obviously add a word each success and error cool done now simply in this verification Handler we cannot head right now this constant our verification number which will be your object dot values and verify number dot join like this okay then this will add a single string then if our verification number length is 4 okay not four then set invalid error will be true okay and return
(2:11:42) then if everything is okay if it's if it's four digit okay then call our average activation and send our data right now okay so data will be activation token which is our token and our activation code which is our verification number like this now simply do one format and save it and yeah now everything is okay we can paste it so come here we need to again send on mail okay because it's expired previous one so click here sign up B codeme this is the user email on password now hit sign up now it will take like little bit time
(2:12:38) yeah please take your email so our email is here so new mail 7252 okay so let's add some wrong code first five like this invalid activation code okay and this can this need to show on another warning okay if I have any errors in here then our set in valid error will be true like this now again yup now suppose enter the correct code seven two five two seven two five two now hit verify TP please enter your name something is wrong obviously something is wrong so check this here register signup.tsx this is the name oh sorry
(2:13:40) I forgot to receive the name yeah now it will works now uh come back here again because we need to again send one email otherwise it doesn't work sign up again mail and password now hit sign up so check your email so run and yep invalid in activation code then correct one is five two one six so let me add five to one six and Ready Steady go account active widget successfully so it means our account created time so let's open our database and check it so connect our database here it is and our users here and that's it here you go
(2:14:35) this is our new user which is perfectly created so it means our sign up and our verifications our OTP verifications everything is perfectly working as we expect okay yep and the sign is not notice if this sign is is like not changing when I'm clicking the sign in it's not backing it means it's not going back it means something URL mistake here this is sign up no this will be login okay in our sign up for TSX line number 146.
(2:15:11) now click yeah perfect cool so our uh user registration with manually done so right now we need to implement our authentication with Google Okay Google and GitHub so we will implement it we'll use here next auth so don't waste time let's start it but not in this video I'll start it in the next video because this video is very big already okay so see you in the next video thank you all right guys so for implementing our social media authentications first we need to implement our login features in our website okay so right now we will
(2:15:47) start to implement login features so go to our Redux folder features and our auth and our auth API okay here after this activation let's make another one for login so login and Builder dot mutation like this in years we have our vid where we will receive our email and password yeah like this and inside here URL will be login yeah then method will be post and body will be our email and password okay saying this two thing and also one very important thing and that is our credential includes okay as constant like this
(2:16:52) then after each when we are successfully getting the data then we need to do the same things okay what we did for this registration this one so just started from here okay after this query yeah so asynchronous one query started then query fill can dispatch so result is this one and now we don't need to send only token we need to set our user also so result.data.
(2:17:29) user okay like this and this will be not user registration this will be our user login okay logged in import it from our auth slice and check one thing in here something is wrong guys user registration has any type because it's not have any okay guys so for fixing this problem we need to update our code little bit okay so in here in this action basically we need to Define and type like our payload actions okay then in here we can say any okay like this and for best practice of typescript obviously this is not any type so we can do one
(2:18:11) thing we can add here like this and we can say we have only token which type is string okay in our registration yeah then in log in same thing we need to do call our payload action and add here our token which is string and our user which is which is not screening but you know why it's showing string okay so this is property access token does not exist on token string okay okay sorry guys this need to be not token this need to be access token yeah then something is wrong okay obviously wrong no problem I will check it
(2:19:00) so now come here in our here the error is in here okay change it to access token go change it to access token like this so our login API is done and our login state is previously done okay in the Redux our reducer so now we can start it we can start to implement it so let's come back to our login component okay so login component here six and from here when we are on submitting yep cool now simply at the first constant and in this auth API we must need to call our use minimum export our use login mutation yeah now constant
(2:19:56) something from our use login mutation yeah and in here we need to say login then our and we can say guys is loading also okay yeah one important thing I am right now watching it okay no problem we'll add it later so is success then our is error then our data okay these three things is important okay so on submit just call the login oh sorry login and send these things and obviously add a weight before this like this yep and in here after this use formic call on use effect snip it then remove this remove this third also
(2:20:59) and in here if our is success then our set root will be empty totally okay not set root will be empty just do one thing if if success is true then we need to close or pop up okay so we need to close our pop-up meanings yeah this set open so if is Success true then set open will be false set open we will receive it from here sorry yeah and in here set open does not exist props so here set open which is also our open Boolean and void like this so in here if success to rule then toast dot success
(2:22:08) login successfully and if have any error it means is error then toast dot error our we need our error data okay so error dot data Dot message okay error dot response okay let's do one thing in here we can we can copy these lines okay come to a sign up dot TSX and this line now paste it if data having this errors yeah what is this irresponsibly undefined okay
(2:23:12) sorry if have error not need is easy right now if have error then if data in error then constant zero data like this then close dot error yep now is success and our error it's done it's enough right now now we can test our login features so suppose I am right now login to my this account let me try this inspect and check this network hit login okay something is wrong happening so from here I'm typing my account email and password okay after I give a Reload okay just give a Reload if not work then hit login notice login successful
(2:24:05) because my password was correct so suppose right now I'm giving a wrong password like this one in the email or password okay so perfectly our login feature is working so after uh perfectly done the login features we need to implement a very important feature right now which is you can see the main important things in this authentication that is our load user and our refresh token okay come this uh auth API okay not not auth API come this API slice because we need to run it every time okay when we will give on
(2:24:43) reload to our website then we need to run it so uh just come this auth sorry API slice.ts and in here first make our refresh token like this so Builder and right now we need to send query uh gate request so that's a builder dot query in here we need to send our data and in here URL will be get sorry first refresh our token just refresh like this then in here method will be get then we don't need to send any headers okay but uh credentials will be include
(2:25:46) okay as constant done okay so refresh token work is done so now simply uh use here use refresh token query like this save it now come to our store dot yes this is very important in our store.ts when when our application will give any reload or any refresh then call our refresh token function on every page load okay like this so constant initia lies app equal to on asynchronous function then in here await Awards code then dot dispatch then our API slice dot endpoints dot refresh token then dot initiate it like this
(2:26:50) what this will do this will initialize our app okay so this is giving on earning so expected two argument what got zero okay so for fixing this just add on very small thing in here okay in here just add another second bracket like this and in here we can say our Force free fetch which will be true done now what will happen when our app we will give on reload in our app automatically this will call our refresh token notice this is our refresh token it's X it's giving refresh to our token perfect okay well so our refresh
(2:27:39) token is working so right now guys we need to implement our load user features okay which is also very easy so we can also edit in our this API slice also okay because similar kind of things so that's why yep so after this guys in here uh in this end points after this refresh token where this is finishing here's it we can make our load user so Builder dot query like this in here we have similar similar type of things so query data and this URL will be me on the method get credentials include as constant like this then after each we
(2:28:23) can come back to our uh auth API okay not auth slice and we can copy this this line okay our async started because similar so then in here you can paste it so uh dispatch user logged in imported obviously from our auth slice then this is the access token and user cool save it and in here use load user query cool and we can also uh always call this load user query okay every time in our store.
(2:29:02) ts after calling this refresh token guys we can call our load user okay obviously after our refresh token we need to call our load user otherwise load user will do problem so here avoids.dispatch API slice endpoints load user dot initiate it then initiate it then Force refresh true like this okay after this now heat form it come back to our website give a Reload check on network tab and note refresh token working even it's giving out data also our logged in user data how cool right it's perfectly working so right
(2:29:43) now we need to show our user profile picture in here okay if not have any profile picture then show one blank profile picture Okay so let's implement it right now so come this space.tsx okay in this header component in here the top constant our user which will be come from you selector State any and state DOT auth like this okay so input or use selected yeah imported and done so now save it and if you write not one console logise we will get our auth data okay console logout users and check our console this is our data
(2:30:44) yeah perfect so uh we're getting our data very good okay so now uh we are getting our data perfect so it means we can simply come here in this this cycle icon okay so just right here on logic like if hap user then one thing otherwise this uh this one okay so in here if you have ifzer and then for right now empty fragment okay but in here we will add our image okay profile picture so in this Source or SRC not source image SRC images okay image here okay import our image from next image okay so let's import it
(2:31:44) yep now SRC and we have on alter yeah and in this SRC guys we need to write our image okay so like if have our user Dot Avatar then user Dot adverters otherwise this will be our we can say Avatar simple so Avatar will be on image Okay so import Avatar from go to our Publix folder and assets and Avatar dot PNG like this now save it and come to our website and give a Reload notice it's looking very big okay so
(2:32:54) let's do one thing just uh update this image size so class name will be our Tableau 30 pixel height 30 pixel round it full yep cool done and in here this will be on cursor pointer or let's do one thing add here on link okay because this is this will be obviously on link so link and finish link here link H ref will be our slash profile cool now this is one link yup so right now guys we need to also make we need to make our log out features also okay which will make no problem but uh this is our login feature is working right
(2:33:48) now it's working perfectly and three errors okay hydration fee because initial UI does not match okay okay no problem it's a very simple like warning okay it's not any error it's not any problem in the production also don't worry for this yep so our these login features is done load users is done so right now we can easily start to make our Google authentications Okay Google and GitHub authentications so for making Google and GitHub authentications in this client folder in our client folder we need to
(2:34:22) create another folder name will be page okay and in this page sorry not page this will be pages and in this Pages guys we need to create another folder name will be API and in this Pages folder create another file name will be our underscore app dot ksx like this and just add these single lines just these three lines okay input type from App props next app and this is our my app like this okay the main work in this app API folder in this API folder create another folder name will be auth in this auth folder create our triple dot okay
(2:35:05) then next auth or then dot TS like this and inside here we need to import right now our next auth from our next auth or so we need to install this dependencies guys so let's uh split over this front-end client terminal okay we make sure that you are in this client directory and now in PMI our next what okay oops sorry split mistake next yeah then after eight we need to import our Google provider from our next provider and slash Google like this we also need to import our GitHub Provider from our GitHub like this now
(2:36:09) export constant auth options and in here providers create on empty array like this then Google provider where we need to send our client ID so for right now we are adding like process dot Google I you need to add it okay Google client ID not Google ID then we need to send our client secret okay like this type string okay yeah otherwise empty string yep same for here also otherwise empty string then in here we need to send our GitHub provider and GitHub provider is also like similar we need our client ID so GitHub client
(2:37:15) ID secondly we need our client secret GitHub client secret cool then at last we need to create on password okay which is for our next author so Secret process dot Envy dot secret like this now we need to export our default next auth and auth options cool so close this terminal and right now go to our DOT envy and add this all fields Google client ID Google client Secret then our GitHub client ID and our GitHub client Secret and at last our secret so this secret will be guys on password what you wanna write you can
(2:38:14) add your personal password also so here I'm just writing like any single things B code Emmy okay like this okay I also don't know okay but uh we can write because because then I can remember it okay it's important so uh because I'm writing here and you can write your own passwords bin let's go to our Google Chrome and open our Google cloud okay search Google Cloud console Google Cloud console now just click Google Cloud plot from sorry guys not Google Cloud console we need to search Google developer console okay
(2:38:59) like this now uh in here our console.developers DOT Google this one just go here so here I am choosing I'm going to one of my another account okay from where basically when I create it so yep so create on Project so my project name suppose here I am giving the project name to like uh e-learning yep then create it so e-learning it's creating the projects obviously it will take time yep now select our project and from here just click this API and services and enable API and services then click these credentials
(2:39:56) and in here first click this create credentials and our oauth client ID like this okay then in here we need to configure our cons into screen okay so click this create app name will be our e-learning this one app domain in email address will be our from which account we are creating here I am adding my email address okay which one American locked in now 7 continue and I'm not adding any app domain okay for now now him simply say save and continue so back to dashboard and just come credentials now create credentials or
(2:40:45) client ID application type will be web application JavaScript origin here at http dot slash slash localhost three thousand then redirect urls.net now click create we can change this name also but we already created it okay no problem so just copy this client ID okay copy this client ID come to our vs code in the store tnv this is our Google client ID okay now our client secret obviously don't use my client engine Mike line secret guys because I will delete it after recording this video this is a client Secret
(2:41:35) now click ok and one thing I'm feeling like we can change this name okay not web client one change it to like e lining yep so we can save it so our Google client ID and secret client secret is done now we need to create our GitHub client and GitHub client secret so how let me show you go to github.com go to our settings from here totally come this developer settings click this oauth apps I have already on WhatsApp so I'm clicking this new oauth apps application name suppose e learning home page URL is suppose
(2:42:27) this one okay or wait we can edit here HTTP localhost 3000 not need any description URL and obviously callback URL will be this API slash what slash callback slash GitHub obviously okay then register application now copy this client ID come to over here GitHub client ID paste it now GitHub client Secret now click here generate a new client Secret so we need to enter our GitHub password so I'm entering my password okay then this is our secret code okay after entering the password so simply add it in here like this
(2:43:15) so our GitHub client ID GitHub client secret Google client ready Google client secret adding done so right now we can easily uh Implement our authentications features okay so come back to this login come back to this header then this login and when we are clicking this Google icon on click then in here sign in then simply call this Google oops sorry then call our Google yeah so sign in import or sign in so come back is top import sign in
(2:44:24) from our next auth then slash react like this yup then in here simply sign in Google okay and in here in this GitHub one sign in hours oh sorry on click then our sign in then GitHub cool now come back to our website give on reload I don't know I edit uh okay let me check few things so one thing guys probably we need to wrap our website reap we need to wrap our this layout okay okay so in layout basically right now we need to add our
(2:45:29) session provider okay decision provider meanings this will come from our next auth so import our session Provider from next auth slash react copy this session provider before this providers okay sorry before not before after this providers add session provider like this and cut the session provider and add it after this theme provided yup save it form it save yeah now it should work so come here first we need to log out so Network we need to log out first okay guys so let me check few things application then our cookies
(2:46:29) and here's our user and token so delete it then we will be automatically logged out from our account right very easily now click this Google and four zero four okay so for fixing this bug we just need to update two things first come these are Google Cloud okay this credentials now click this pencil icon edit oauth ID click this add URI and obviously add this localhost 3000 slash API auth slash callback slash Google then click save okay that's it now come to our Visual Studio code and obviously we make sure that you are
(2:47:16) restarting our front-end server this is the only way what can fix this here okay so restart our front-end server given reload right now and obviously also check must add these like the redirect URL okay then this will like take some time yep now click this here now click Google and boom it's coming perfectly so right now suppose I'm clicking this sponsorship.
(2:47:49) com oops it's asking me for my password okay wait so suppose this support one or this one I'm creating account with so let me see oh okay so we need to implement right now social authentication I forgot it so I I forgot to implement the social authentication so right now our uh we are getting our data we have data in our sessions so how can how we can get data right now I'm showing you so suppose let's come back to our header okay in here let's write this constant and our data and our use session okay then if you write your console log our
(2:48:35) data you will get our information in here okay the login user information okay notice this is our data this will expire after a certain time and this is the information this is the profile pictures user and this is the name okay so right now we need to create our social out features so come back to our Redux folder our features auth then auth api.
(2:49:06) ts so we can do one thing we can copy our login okay then we can paste it in here like this now change this login to social auth like this okay then URL will be what was the URL I forgot it so roots then user root yeah social what is social lot okay so edit social auth method it post then we need to send our email name and Avatar great so email name and adverters email name and Avatar and credential included like this and after getting response access token and user cool done so ah come to our header right now and first export it from here
(2:50:13) use social out mutation yep and now from here constant something from our sorry use social mediation like this and in here social auth and our like success is success then error okay yeah so in here call our use effect and in here if our wizard is not available okay if the user is not have and if our data have then right now
(2:51:16) we cannot use here average so call our social auth and send our email which is our data dot user dot email then our name which is data Dot user dot name our image not image this will be our Avatar which is our data user and avatars like this yep and in here add our data okay and our user dependencies cool so this is also still giving an error so let me fix it Avatar does not
(2:52:21) exist on name String okay this will be not Avatar this will be image yeah save it right now so social auth and if is Success then toast dot success login successful like this now come here and notice automatically it's showing our login successful okay because the login is successful that's why now let's log out again from here remove our refresh token access token then our yep now simply given reload and login successful it's showing because we had this session that's why okay so we can right now delete this
(2:53:22) session then then everything will again logged out perfectly okay so right now obviously when you are giving reload notice it's not sending any request okay so refresh me this is not any working okay now uh let's click this GitHub and authorize this user now it's redirecting here and cool login successful there you go so it's perfect and perfectly working even it's not creating any new user okay if the user is exist this is just not it doesn't exist so that's why it's created a new one okay
(2:54:08) so perfectly our social authentication is perfectly working as we expect yep done so right now guys we can close our all files okay yep so right now guys our authentication is done so right now we will simply jump to our profile page okay we'll we'll make our profile page from the next video then we'll start our admin dashboard because admin dashboard is the main important thing right now we will make our course create features then this type of all features then we will come to our uh this this home pages
(2:54:40) again okay then we'll implement the course create page okay sorry course view page then course player everything okay so that's it see you in the next video all right guys so right now just come our website and I'm showing you one thing okay when I'm giving on reload note this is not coming the instantly the profile picture its meanings when you are giving reload it's loading okay so that time our component is like showing data so that's why when you are giving like this reload it's showing the
(2:55:13) icon then it's giving us data so for fix this guys we need to Simply come to our vs code right now and in this layout.ksx we need to modify something okay like this children so just cut these children okay cut it and in here add our another file okay another function not file like custom and in this custom send these children now create our custom so constant costume this is on react dot if C then our here we will receive our children which type is react dot react node okay like this then equal to in here we will receive our children
(2:56:23) and like this now we need to return here cool so in here simply write on logic okay so first guys in here import our ease loading okay is loading from where from our use load user query Okay the reason for this load user okay when you are giving on reload our user is loading so that's why it's not showing the profile picture so you can instantly because it's loading escape and when it's perfectly loading then it's showing like this so when you create a loader when it's loading then so if is loading
(2:57:08) to row then we can add here our own component name will be loader otherwise children but add it in a second bracket and add it in a fragment yep so right now let's create our children so import sorry not children loader import loader from our dot dot slash then we can go to our just dot slash guys 22 component then in here we can give this name to loaders okay then loader Dot keysx cool create it TS r a c yup now remove this GSX
(2:58:14) done so here it's giving only on error custom children what if this is saying chill dark is missing white Shield or Worse children okay so here is the spelling mistake children now in here children okay react node is missing the property react yeah the problem is I just had two second brackets two curly brackets that's why now notice no error so save it right now right now if you come to our website give a Reload loader loader then it's coming okay it's not uh showing notice when I'm giving
(2:58:55) reload after coming this data this is giving response okay so it's not showing the uh like the our icon okay where you can click and open our login login pop-up okay guys so right now let's make our loader component okay so in this loader component basically I am creating a very simple styling like this and we need to create a loaders.
(2:59:19) css okay because we will do it Custom Custom CSS we'll make here so yep and in here just like simple this and in this CSS we have just two things on animations so basically I am right now giving you the B code me loader okay how I am making the bigger image loader this is a very simple loader okay not in a lot of files or not anything like that so save it and come to our website now give a Reload yep loading loading and done so for Pixel solid this color you can change this color to your brand color okay like any other color if you want
(2:59:57) this color also yeah save then give reload yes cool so then this is border top and Border radius with height animation this is and that's it so our loader is done so let's come to our main thing right now let's start our uh profile component so prefer profile component let's create another folder in this app folder name will be profile in this profile create our page dot ksx now t s r a c e yeah and in here our FC then props import this FC from react done so in here guys first come here now clicked here
(3:00:52) when you are clicking here this is redirecting to a profile page perfect but we need to make few hooks right now okay why I'm saying hooks because we need to check like the user just logged in or not okay so suppose these are just not logged in and user is typing slash profile okay in the URL then obviously user will again redirect to the home page because either it's not locked in so what we need to do for these we need to create a folder name will be hooks okay custom hooks we can say and in this hooks
(3:01:29) we need to make our use protect it dot TSX yeah now import our redirect here from our next navigation yep now export default function we can say Protect it okay we can say this name then children and now in here guys we need to check few things so like first we need to create here another file okay which name will be user auth dot TSX okay first make this one here first import our use selector from reactory text now export default function our user
(3:02:39) auth and in here we have our user in our use selector then state DOT user yup so if we have users then return true it means you just logged in okay otherwise return false like this so save it right now now come to our user protected Dot ksx again okay this one now in here we need to make on variable like each authenticated and import our user out here yep and call it obviously then return if is authenticated then children otherwise redirect like this so as well using typescript so you cannot write
(3:03:43) like this so we need to Simply create an interface we can say our protected props where children which will be react dot react node okay react DOT hours react node OK this one and in here children this call our protected props done save it right now so simply come to our profile right now and in here import our protect it okay so then it will automatically work now suppose here uh I am just come to avoid this page.
(3:04:38) tsx okay and copy these two things this hedging and this hedging and headers so import heading import our headers and these two states three state not to a state add it here like this import use state and save it right now given format so use okay in this profile component obviously add our use client yep now we can come here so this is giving an error okay so state DOT user no so this is wrong guys we have our state DOT auth right so come back this user auth State DOT auth yep now it should work yeah it's working so suppose right now let me log out okay
(3:05:40) how logout just click this application delete our refresh token access token then our this one this one and this one also now given reload and check yep it's automatically redirecting to our home page type slash profile and enters but it's coming to our home page okay perfectly working so obviously no one can right now uh X go to our profile page without logging okay by typing also they will cannot go because we added this protected yeah so right now let's login because you need to make our profile
(3:06:26) page so I'm logging in with Google so this one yep then login successfully so yeah here's it now in here after this header make our profile component copy this import our profile from dot dot slash components profile slash profile dot TSX and create it like this yup now in here we can copy this line come here add it here import FC yup and then yeah this is okay so suppose in
(3:07:32) here right now this is showing here now guys one important thing that is in this phases okay in this page.tsx in here this is title is e-learning but obviously we don't need e-learning what we need we need that username which is login okay like if if I am login then this will show you profile if you log in then this will show your named and profile okay like how professional website works so simply get our user from our use selector then our state DOT auth and in here this will be user dot name and then profile now check
(3:08:30) this is because Jimmy profile okay because the name was B codemy the login username was okay so this will show the name which usually is basically logged in that name perfect so in this profile.tsx right now we need to design our website okay in the designer profile page so we'll not Implement like very Advanced profile design okay because profile is like it's very simple thing for our LMS platforms okay so just remove this profile and in here first create our first class like this wheat will be 85 percent
(3:09:10) Flakes and MX Auto okay like this then in here we need our another class like this and inside this class we have our class name so let me show it to you 60 pixel from 800 pixel this will be the size height is this this is the background color position sticky and just scroll then top and this okay so scroll is meanings so this scroll is basically on Skate so import or you state obviously add here use client at the top then in here just write on same logic what we write it in our header okay if type of window is not
(3:10:07) undefined then we need Advent listener scroll then like this set scroll through false okay now inside this div inside this div we need our another component which will be our side part okay sidebar profile we can see so we can make it guys we can uh edit import sidebar profile dot slash site by profile like this okay and At Last At dot TSX then create it then in here come back to our sidebar and in this sidebar we need to send few things okay okay like our users which will be our users so we can send our user guys from here
(3:11:08) send our users and then come here in this interface in this props user which type will be any and in here we can receive our users done save this one and from here we also need to receive user which type is any then here will be also user and here if C then our props that's it so Sideburn not only need our user we need our active bin our Avatar we can say hi Avatar because in here we will we will update our Avatar okay so let's say whenever we'll update it then this Avatar state will also update so that's
(3:12:10) why when a battery will upload will up will update it from our sidebarrows okay instantly that's why we need to send this Avatar then set active which is also set active at last our log out Handler so this few things we need to send oh sorry not log log out yeah now come back this top and make one slow one by one okay so in here after this scroll we have our Avatar and sit ever which initial value will be user dot Avatar or we can do one thing we can make it null okay because sometimes these are not have Avatar
(3:13:13) then we can make one for our active and such activities initial value will be false sorry one not false then our bin guys this is done for now so then last function or log out Handler okay which is we can right now keep empty so this will be on async yeah and for now empty so come to our sidebar profile and receive this all data okay editing our props so active which is on what is this is value active is one number so number and then our Avatar which will be on string then oh sorry right now it's null string
(3:14:19) or null then our set active which will be active sorry active then if we type is number and then like void like this okay and at last we have a log out Handler which will be also like this on callback functioning so that's why I like this oh sorry sorry guys no which type will be any yeah then log out handlers just enter console log like this okay so this is also giving error logout and then that does not exist on this prop so you mean logout Handler okay so spilling was wrong guys this will be our logout Handler okay
(3:15:25) here also done then log out Handler so we make sure that you're writing the correct spelling otherwise it will do problem and now receive the all things like active Avatar set active and or logout Handler cool now in this sidebar first create our class on which Tableau full then in here we need to create or another class like this so if our active equal to 1 then show like this and in here we need to add here our image tag from our next 13.
(3:16:17) like this then SRC where will be if our user then dot Avatar have or or Avatar have then user Dot Avatar or our Avatar otherwise we need to use here our we can say default okay we can give this name so image and here add an alter yeah so come back this top import our Avatar default from our public again go back yeah then public folder assets and avatar.
(3:17:22) png that's it and in here we need to add some class name class name will be like this okay wait 20 pixel High 20 pixel and from 800 pixel height will be within the like this now format it now come to our website this is how it's looking yep then after eight after eight we need to add on H5 which element will be my account okay and where we have on class like this so internal server verify let me check so my next is a server stopped okay sometime it can happen so restart our next server again now give reload it will take like some time so yeah my
(3:18:27) account here cool but obviously in here add some logic like font first font will be our Poppins yeah and our text color first in here this will be height okay but for wait in here for our Dark theme text White but for light theme text black okay in light theme we need to change the background color also here so this is for card team and for light theme BG will be height and text black oh sorry not need to
(3:19:37) write this light yep and also will be guys uh here in a profile okay this is busy slate add it only for dark otherwise BG will be white oops sorry from here BC will be White yeah and Border color will be this is for dark otherwise border color will be for now we can keep it 5 then let me update it now check no it's not looking that much code I really don't have that much design knowledge okay guys so still it's not looking that much good okay so we can do one thing we can change this color to
(3:20:42) little bit more down yeah it's looking better but we can change our shadow okay so Shadow SM this is for only dark but otherwise Shadow will be XL yeah but no it's not looking that much good is M let me check yep guys it's Everest probably or you can update hit okay as you would wish I really don't have that much like code design knowledge okay or you can change this border color to Black right probably this will be looks good what do you think let's try okay more down
(3:21:51) hmm little bit code not bad yup it's good looking okay so we can start the next one okay because it's taking a lot of time so yeah now come here in the sidebar profile and after this after this tip we can create our next div which is very easy okay after this DAV this is our next one if our active equal to 2 then color will be this okay and uh let's do one thing at this logic okay color will be like this for our BG direct this is the background and for white like this here
(3:22:53) and import this icon from our next sorry from a react icon so import yeah then save it for the paragraph okay sorry for the H5 copy this class previous one then upgraded yep it's changing perfectly so now let's copy this again add it for next time okay so the third one is basically our all enrolled courses enrolled courses
(3:23:56) yup and icon will be not similar icon will be our courses icon like this one so import this icon yeah now come here yep then after it guys we have our code certification okay in Big Audio website basically I'm watching because this is your iPad that's why but uh in our this project so we don't have like any course certificate okay even because also not available right now course certificate okay when I will upload like courses advance advance like six months or three months courses then I will give course
(3:24:41) certificate so probably this is not mandatory right now so we can skip these features okay you can skip this fields so right now let's make our next one okay which is the last one an important one that is our log out so if active is four then log out like this and icon will be also not similar icon will be this icon yeah so import automatically done so here you go so when someone will click this log out we need to make our log out we need to call our logout Handler okay and guys in logout we don't need this set active to 4 okay because
(3:25:29) obviously we don't need to add this line okay so just call this logout handle it's enough in logout so when someone will click log out it will instead got a value of object type okay so on click yep in here add on first bracket and like this now save yep so simply logout Handler is calling the log out Handler if right now go back to here if you're right now console log check out console log logout Handler is calling that's why so our sidebar is done now we need to make our log out feature so this is very
(3:26:17) important and very easy so in here we can come back to our features API API slice okay not API slice sorry auth API and after this social auth we can make our log out one okay like this make it log out Builder Dot query okay like this then in here Builder dot query and query will be not need to receive anything URL will be log out simple method will be get body don't need body and credential include yep then when user logged in so access token this will be empty user this will be also empty
(3:27:22) and don't need this result yep so that's it and one thing guys one thing we already made one state for our result logged out so we don't need to like dispel this login so dispatch our log out and we don't need to send anything also then yeah it's enough oops sorry yep now come back to our profile okay and in here in this log out Handler when you're clicking log out first in here we need to import right now our log out okay so how import something from use log out what is logout mutation I forgot to
(3:28:17) export it so from here export our use log out query now in here log out query okay let's import it manually I don't know why it's not suggesting me so let's come here import our use logout query from Mod graphql this is our query so dot dot slash dot dot slash then our again dot dot slash Redux features auth or API this is our use logout
(3:29:23) query okay I forgot to export the correct one okay this was a wrong one so use logout query like this yep now guys we can easily import it and we can change it yeah and in our use logout query we need to say a few things like undefined first then in here skip okay so obviously always when we're when we will come toward this page obviously logout will not automatically call when logout will call when will add when will click then this will call okay so false what is this meaning so this meaning is guys in here we will create an estate
(3:30:14) okay name will be our log out and our set logout which initial value will be false and when we will click if logout is false then true otherwise false like this yeah so then when we will click this logout Handler we will change this log out set logout value then this article will call this logout Handover okay this is our logic right now so simply we need to call our sign out first from our next auth okay we need to remove it our we need to remove our session obviously then set log out what we need to do to true then we need to also
(3:31:02) redirect import redirect from next navigation then slash like this now come to our website hit log out automatically it's logging out its logout oh okay so it's logout not working let me check something is obviously wrong Momo it's locked out perfectly okay so first time it was like wrong okay I did some mistake that's why probably so now again click Google authentication hit this account now login so login successfully come here and from here hit login logout yep log out successfully no guys logout is not working notice
(3:32:03) so station is not removing it meanings sign out all right guys so I find out the issue why this is not working this is a very good lesson for you right now you'll understand how to basically debugging on problem okay because this is a very critical error seriously this is very critical bug but how I am finding out it like why this is happening okay so let me show you why this is happening so let's come our browser right now in here when I'm clicking log out it's not logging out the first time it's
(3:32:42) logging out a second time when I'm clicking log out it's going to our home page then again we need to click this logout then it's removing why why it's taking two times the reason is in here in this function when we are calling this set logout true what is this set logout true meanings when you are calling this set logout to True our user logout query is automatically calling okay it means our logout API is calling when we are making this set log out to True okay then we are also calling this one it means this
(3:33:17) is removing our session okay for our next auth we implemented social authentication so this uh we have on sessions in our cookies for our social media Authentication so we are removing that also otherwise it will again login that is why so basically when in here so guys and Eric in here okay so when we are calling this sign out this is automatically kicking on reload okay when we are clicking the sign now this automatically giving user this is very uh common thing because we are using a next auth a next auth word like this
(3:33:55) okay when you will Implement social social authentication will click login then Google icon then when you would like uh authenticate with Google this will automatically take on the reload same for logout also so basically when we are clicking our log out this is calling first this sign out okay try to understand it first this is calling out sign out so when sign out is calling it's automatically giving on reload so when giving reload this set logout is not calling before the set log out our sign out is giving on reload our sign out is giving
(3:34:36) on reload so for that's why it's automatically coming to our home page okay it meanings we are successfully removing our sessions from our cookies okay very good but the set logouties or this logout query is not calling so that's why we need to again come to our profile where again come back to our profile and we need to again click here for remove that token also so this is the problem okay for this problem we need to come in we need to clicking this log out for two times okay but when we are when we are logging with our without
(3:35:12) Google authentication without GitHub we are logging manually then this will when you will click log out instantly this will log out this will don't do any problem but right now doing problem Beacon because uh next auth we are adding session in in our cookies so that's why this is giving problem so how to fix this for fix this we can write a very interesting logic okay and redirect is not need why not need because when logging out will be done obviously it will automatically redirect to our home page okay because we already
(3:35:46) added it you know protected so protected meanings protect it means this one okay so is its meanings when it's user not login then this will automatically login redirect to our home page okay so right now come to our headers our headers and in here and in this header guys in this use effect we need to write on logic the logic will be if our data is null when we are clicking log out our us session is removing our our session is removing the data so obviously this data will be null this data meanings our session data okay this
(3:36:33) is null so if use if data is null then what we need to do we need to call this log out Handler again copy this line copy this two line okay come here and import this log log out query and in here if data is null then call our set logout to true what is this will do so it means when will click logout then this will come to our home page and if data is none obviously then that time data is null so then this will again call the logout query so it means it will automatically log out so right now we have a small problem again that is this is Success
(3:37:19) okay his success is what is this is Success we are taking this is Success from our social out mutation okay so if is Success this is initially we have is Success so that's why this will call so we need to write an also another R in here okay if is Success not is successfully fast then if data is not null and our is success sorry guys this will be if data is null okay my mistake if data is null and if success then run this okay so right now come here and hit log out then note it's not showing any message and it's really
(3:38:01) logging out in a single time notice let's try it GitHub Authentication then login done log out not no message also showing now manually login okay so this is here manually login login successful and from here when we are logging out obviously it should work because it's manual so that's why obviously it will perfectly work yep that's it done so our logout feature is perfectly working right now okay so our sidebar features is done here we can complete we can close this side by profile because this is done
(3:38:44) now after here we need to right now start to make our another feature so first right now login obviously so log in with our account come here click this okay we are in the correct way correct one so my account in here we need to make our account base URI okay I mean UI so in here we need to write on logic like if our uh active equal to 1 then on the run this this will be our profile profile uh we can say we cannot use profile so profile info okay we can write this profile info copy this we can make it here okay or we can do one thing guys we can make
(3:39:44) a component for this okay so import profile info from dot slash profile info Dot ESX now create file tsrafce like this now remove this TSX done come here then yeah this is in profile info obviously wrong because we need to add it outside of this div okay this kiv yep now perfect here's it so now let's make this component okay so uh I am guys first I am totally copying the UI part okay because this video is already very big so I cannot exchange it to more big and I hope you know basic web design okay I'll just add here basic like web design
(3:40:41) then I will Implement functionalities in front of you don't worry all right guys so UI design done let me show you it's a very basic UI design okay because I don't want to focus like in this user account okay I mean in this user profile because it's a very simple thing and it's not that much like very important in our LMS platform okay in here we have our full name our email address obviously user cannot avoid to change email address why user cannot able to change email address let me explain
(3:41:10) so uh suppose you are purchasing on course from our platform okay then you want that you will give this course to your friend okay so what you are doing you are coming here you are changing your email you're changing the email address to your friend email address so then your friend can log into this account and your friend can access the course right very easy but no we really don't do this for on user obviously email address must need to be this is fixed user cannot update email address okay user can update the name
(3:41:47) user can update the profile picture but user cannot able to update this email address okay this is fixed for user so if you wanna uh make it like if you're not update it then you can also edit but as per myself okay uh we cannot like make it like because I cannot change it okay this is like not that much secret word okay so that's why I am making it like you cannot edit this email address okay this is fixed and but you can edit the name and you can edit the profile pictures okay so come here right now let me show you
(3:42:19) the code right now what I added this is a very simple basic design okay first let me come this profile.tsx in here guys I added this class okay double full height full this is background color transparent and empty uh margin top 80 pixel then this is our component here I am sending two things Avatar and user ok here I am receiving it Avatar and user and this is one state just on set and name and set name okay and our Avatar sorry and you might thinking then why this Avatar sketch right so this Avatar is basically by changing it from here so
(3:42:59) okay from out yes so then what will happen when we will update our Avatar it will automatically change from here also okay obviously we will give on reload okay reload meanings we will refetch our data because after updating data with inclusive fetch it so then everything will automatically updated okay it's like when we will click here this open for uploading image okay and when we will upload image this will automatically take a refetch and it will show show us the updated data here profile picture here and here okay
(3:43:35) so basically guys in here let me show you the code again okay so this is the image tag okay whereas I I imported it from next image and in here on class name this is an input type file name is this igfitter class name hidden I am hiding it because we don't want this file input here instead of that I added here on icon okay this camera icon this is the icon this is the level for this hidden input then line two line break and then we started our form in here we have our full name an email address where we have
(3:44:16) read only okay it means no one can able to update it then this is our submit button that's it very simple UI nothing else and in this all Handler it's empty also like on just console log right now let's make it Dynamic okay like when we will upload our picture from here suppose I'm uploading this one then this will change the profile picture Okay so let's come to our Redux folder then from this Redux folder in this features create a new folder okay name will be user in this user create our user
(3:44:59) API Dot Keys like this then in here we need to import first our API slice then what we always do similar thing export constant user API then API slice dot inject in points we are injecting endpoints to our main API then in here end points will be at this Builder parameter and then let's create our action okay so I am giving this name to Avatar then build a DOT mutation and in here we need to add the query we have our Avatar okay in here we will receive our Avatar
(3:46:05) then URL will be guys simple update user Avatar like this okay method will be put method and body will be this averter okay and at last this is very important credentials include and as constant yep done now export our uh wait from our user API then you will we will get right now suggestion okay like use then update Avatar mutation like this now simply come to profile info and in here in this image Handler first we need to Target here our file so
(3:47:09) constant file equal to e Dot Target dot files and like this now constant our file reader equal to new file created now file reader Dot on load then like this and in here if our file return dot ready State okay registered equal to 2 then we need to we need to do what we need to Simply call our update Avatar okay so here first import it
(3:48:12) import something then use app update Avatar mutation like this in here update Avatar then is Success yeah and errors done so in here call our update Avatar and Avatar will be this file reader dot result okay like this then after it guys we don't enter guys then this file okay sorry we don't need that file then yep and in here after eight we can do one format then our code will like looks good yeah now use our use effect hook if we have our is Success then we need to do one thing an important thing and that is constant
(3:49:16) something from our use load user query okay first add undefined secondly add keep so first add here true okay then in here guys just add on Logic on stage like constant load user set load users now use state initial value is false so if our load user is true then false otherwise make it true like this yeah so set load user will be true when if our success is then our this set load user will be true now in this dependency add our is
(3:50:19) success and also console log our error but not all time if we have error then console log it okay for debugging it right now because obviously I will not have any error yeah now save end to a format basic format yeah and guys one thing also add here at last okay otherwise it can do problem file editor.
(3:50:48) create as data URL either targeted files and like this okay now again now try to upload the image profile picture and see what's happening it's not updating okay it means it's not calling okay update Avatar here's it we not need to send any object like this then how can we send it simply in here make on variable result equal to our file reader Dot result and in here averter value will be our result then we can do one thing you can change this name to Avatar okay and change it yup cool now let's try to reload and I believe not right now it
(3:51:47) should work so simply click here and essays this is the image now let me see Okay so it's worked guys our image perfectly updated but right now in our profile page this is showing an error image with SRC this is missing required with property okay so in our next JS we cannot use any outside domain in our project okay if you if you want to use it then we need to do something okay so first let me fix this simple issue in here they are saying add width okay so we can add with no problem like sorry not here not here sorry in here
(3:52:30) width will be our 120 height is same 120 now we need to create on file I'm showing you what we need to do right now we need to create on file okay and this is here just read this host name race.cloudinary.com is not configured under images in your next config.js so copy this come to our next config.js this is here in this next config add Justice okay images and domain will be this one now come here and note give a Reload it should work yep notice it's working perfectly so our profile picture perfectly updated why it's not showing
(3:53:17) sidebar and top let me see okay obviously like same issue so come to our sidebar here's it this is the image okay so here we need to add dot URL okay and Taylor in CSS class well it doesn't work okay so add width to any height 20 like this now check yep cool and top header is also similar thing okay so go to our header again simply click this headers this is here and images where's the images yeah here seek just add here our width 30.
(3:54:14) and height 30 like this and this will be dot URL yeah so we can close our header also and here we go our images here so one thing guys right now I have noticed and that is when we will come to our profile page this will be show like this on Border okay not in home when you can give to our image so how can you make it so guys first come this profile okay paste.
(3:54:40) tsx profile and this active item this will be changed to right now let me count it one two three four five and six so this is six so this will be not six five because we count from 0 that's why so in here we need to write on logic at the last that is if our you can add a style if our active I came equal to six then add two pixel solid this yeah like this otherwise sorry five this will be not six now come and boom there you go unexpected non-white space character after Json and position 102 let me give a Reload kind of okay just a second guys so in
(3:55:42) here this border value will be none and this color will be first save it and check now come here yep no errors cool give a Reload and check come here yeah no errors so we can update this color right now so the color will be which color we can check our profile info and the last one this yeah cool so this will be our color border hmm done same error again we can even reload I really don't know what's going on okay guys for fixing this bug just give one restart or software okay and then this will fix just keep a Reload right now
(3:56:36) Hank There You Go it's fixed come here and note no error okay so sometimes it happens like with Nick Chase okay yeah perfect so uh our update Avatar is done so full name email address okay so we need to right now we need to make this one okay update our user informations so we will do it from the next video okay guys because this video is very big I know and I'm not making it more big because if I make it like more big more big then it will be hard for you to follow like with video step by step so that's why I'm not
(3:57:09) making this video to more big uh in the next video we will complete this update user information and change password and we'll also Implement in here another features another options like admin dashboard but only for admin that option will come okay so we need to make another protected route so I will show you this everything in the next video so see you in the next video over it guys so right now we're going to start our this edit profile features okay so user can update the username okay so let's make this
(3:57:42) so uh in here come to profile info you can come here again our profile info company from here this is the email address and this is the name value and set name yeah perfect and when someone is clicking this input then we are submitting this form it means handle submit okay great here's it so now come back to Redux folder again then this user API and make our edit name okay from here so copy this first then paste it in here okay our previous one the update afforded then edit profile in here we will receive two data name
(3:58:27) and email as we are receiving name email from our backend okay that's why so name email and here will be name and email so put request update user Avatar no let's check the root I forgot the root name this is update user info this one okay check it we need our name and email okay which will receive from our front end yeah so this is our URL update user info now come here and change it to update user info and send this name email cool now we can call this edit it will be guys not capital okay edit profile
(3:59:22) use edit profile mutation yep copy this come here after this constant something then our use edit profile mutation yep in here we have our update sorry edit profile and we have our age success and errors so in here we can change this name to success okay you can set a new name for the error we can say update error okay what I do know what is we can give name right now okay because we already have an error and success here that's why so copy this edit profile come here edit profile and let's do one thing
(4:00:27) first in here she obviously dot prevent default then we need to check one thing if our name and email if it's not empty something is wrong email cannot find email not need guys email okay because we are already adding email yeah then if name is not empty then they call this edit profile in here we need to send email which will be either dot email name which is our name yeah we can keep this email to after this name yeah perfect now for make it and we can add here on average yeah done now come here if our success true or relates to one
(4:01:27) thing not need just in here if a success or success true then this if error or our object error then do this dependency at success then our update error now change this B code image to suppose my name okay now hit update and let me check so it's giving on errors let's see Json web token is expired oh sorry give a Reload I started video recording after a long time okay that's why so now change it now hit update email already exists oh sorry uh something is wrong happening okay so
(4:02:32) guys let's do one thing come back to our back end user controller.ts in here update user info this function okay so we are getting name email perfect email and user not need this line okay because we don't need to change email that's why so then we not have to receive the email also we can simply receive the name right now then from here we don't need to send the email also then okay don't need and come to our this edit profile sorry edit profile mutation this one and from here not send email here as well
(4:03:21) now it should work come here update it now hit update okay give a Reload because it's rtk query so obviously you need to give another reload for like yeah no not it's updated okay let me try it again like no update and yep updated done come here notice it's updating but it's not showing any message which is bad so we need to show on message okay like if hours uh his success is true then we need to shown toast profile updated successfully okay like this now come here then in here I'm adding again my full
(4:04:17) name like this hit update hmm something is wrong each success sorry sorry sorry sorry wrong logic this will be success not a success now come and again hit notice now it's showing profile updated successfully hit submit profile updated successfully cool so then we need to right now make our change password okay update password and so our profile updating is working so let me write the correct one like this one yeah guys now it's updating perfectly okay so right now when you start out change password features which
(4:05:04) is also very easy so we can copy we can close our right now this profile info because it's done finish so in profile dot ksx copy or this active equal to 1 then effective equal to 2 we need to make another component which name will be change password okay like this now make it import change password from dot slash change password and Dot TSX that's it then t s r a f c e cool remove this TSX and here you go this is a change password so I'm again doing the same things okay I'm copying the UI part very simple thing just some
(4:05:59) little bit like input box okay in change password one so let me show you the UI okay guys done this is the UI okay very simple UI let me explain this is one Gip rapid giv this is on H1 and in here I forgot to add something okay so let me add it like dark will be this color and otherwise black colors yup so same things let me add it for everywhere like here this level okay then here then our new password one here also here just add this like where we have text okay this line otherwise start theme this will sorry light theme this wheel can do problem
(4:06:57) and in here like this and otherwise text block done so let me just come back here and this is our UI okay so let me change to Dark theme yup still it's looking good cool so and this color is not the exact color let me see the previous one color okay like a profile info one so this was the color code yeah copy this okay same color sorry okay great so uh our UI part is done in here okay let me check the responsive it is fully responsive this is also for the mobile responsive yeah so you might thinking right now
(4:07:56) suppose each other is doing authentication with social media then user don't have any password then how can you just change password right good question right if user authentication if user creating account with Google or GitHub they don't giving any passwords so how can they enter this old password they don't have any old password right so what we can do for them for this problem guys we have two solutions first solution is suppose you are doing Google authentication or GitHub authentication okay probably don't need to like set any
(4:08:36) password because you are totally depend for with your Google or GitHub so if you're on the change password and you can change your Google or GitHub password this is so Solution One solution 2 is we can generate an automatic password when you're creating account with social media like Google or GitHub we can generate a password okay and we can mail that to the user like hey this is your new generated password you can use it for to update your password okay this is one way so right now this is as this is like not our main
(4:09:11) focus this part is very easy it's like it's very normal code request okay you can easily change it so that's for right now I am making it like if you have password and then you can update it if you don't have password then you cannot update it right now okay and if you wanna tell me like uh upload update this the social authentication like IGI password and obviously I do that but it will ask you okay I'll try to reset the last one okay right now I'll uh finish this and I'll go to the admin dashboard okay because
(4:09:42) admin dashboard is very big and we will Implement lot of like Advanced items features in our admin dashboard okay so that's why like this change password then it email or full name okay this is like very like basic things what you always do in our all projects so I hope you already know about this okay because this is similar without all projects okay so that's why I am not implementing it in here I mean I right now implementing the chains password features okay but when user is creating social authentication okay Boolean user
(4:10:13) is doing social authentication then we are not creating any automatic password we will do later okay we'll try to do it later at the last so now let's make our this change password feature so simply come to our same our Redux folder then features our auth sorry user and user API now after edit profile copy and paste it this will be update password then we need our URL I forgot it let me check the root here we go this is update user password cool and we need full password new password yup so old sorry change it and in here old password
(4:11:20) and new password cool in here we need to send our old password and our new password okay so now come here and obviously sorry from the user replay first our export this one update use update password mutation okay now come to a change password and edit first import it constant something from this yeah then we can say our update password bin this will be guys start bracket okay not second bracket and in here each success and errors okay so in here we can make these two asynchronous
(4:12:26) function if we have our old password then wait let me make one thing here if all password is empty or new password or anything is empty then we need to send on toast dot error like Place fill the all fields okay obviously we are already doing it like this is a required so uh probably we not need to do this okay because already it's here okay like required to do so obviously if you are not hinted the password then they will cannot come here okay we need to do one thing that is our new password and confirm password if it's matching
(4:13:16) not matching then toast. error password do not match okay not need to return anything no problem then if matching okay otherwise else we can write now edit our update password and you can send this old password next new password okay and in here finish it the bad thing of copilot they always do like syntax mistake okay yeah now done and in here call our easy fix and in this use effect snippet first remove this yep I know this third if our is Success then on toast dot success thank you password changed successfully
(4:14:14) okay and for the error we need to write this logic if error then if data in error then error data then to start error error data Dot message what we always do okay in here now simply add our each success and our error like this cool now format it and one thing important thing in here we must need to run this e dot prevent default okay in our password change handlers because it's a form that's why now change password again try Now update password changed successfully so let me right now given wrong password
(4:15:05) okay now hit invisible password correct it's perfectly working now in here our enrolled courses which is including with our course card so what is right now not possible we will do it when we'll make our course cartoon okay we'll just Implement here our course card then we will add the correct data that's it which is very easy thing so right now guys our update password or our profile work is everything is done okay so you can finish this too files now one thing we need to make and that is in here
(4:15:45) come back to our hooks okay hooks folder and in here we can make another one okay admin protected.tsx like this so we can copy our use protected then paste it in here this will be admin protected okay similar thing that's why protected yeah and user was not made in here right now we will Implement another features like fast in here and here our user okay then use select or sorry selector then state which type is any and state DOT auth done now we need to write the main logic this one okay constant is
(4:16:48) admin easy dot role if equal to admin then it's admin right so if is admin then children otherwise redirect to here cool so our admin protected is also done now let's do one thing come to our profile page okay and in this profile I am thinking one thing calm this sidebar okay and one thing I want to clear with you right now guys if you want to implement admin dashboard with another website okay another website meanings you can create another projects also let me share with you on Secrets okay becauseme I am not
(4:17:35) implementing like because imagine admin dashboard in same website okay because everybody because of another URL okay from which website I'm maintaining speakers okay so if you wanna do the same things then you can also do this then you need to implement another admin dashboard login page okay so you can do this but right now is this sketch okay this project I'm thinking like it's not that much important okay so that's why if your admin if the role is admin then you will see another option in here okay
(4:18:08) after this enrolled code special that will be admin dashboard and if you click then this will be redirected to our admin dashboard okay so here's it just write on logic here okay where after this enrolled course we can copy this and class name will be this will be like how seven or six okay anything because we don't need to like adjective in here also instantly this will go to our admin dashboard so add Main dashboard spelling mistake yeah so obviously icon will be not this let me choose an icon from react icons I you
(4:19:02) know admin so yeah we can we can choose this one so let's import it react icons slash MD yup come here then yep we can close the react icons now yeah it's looking good so admin dashboard and obviously this is not available for everyone now write the logic if user dot roll equal to admin then only show this so right now this user is not admin okay which is logged in who logged in right now
(4:20:07) first check me with admin right now okay so logged in user is this one program gmail.com come to our database admin is who is admin sponsorship Reddit recording.com is admin okay so let me right now log out and let me log in with the mail okay which I basically admin now click here click Google sponsorship this one yep and this was our previous like the first uploaded image okay so right now let me change it to becauseme logo this one we can choose yep done in this carrying case are breaking okay now in Adventures what notice it's
(4:21:07) showing Advent options so obviously if you click or admin dashboard right now this is not in a Gip this should be on link from our next link and there will be also link not need any on click okay this will be on href where we will go to our admin okay slash admin it means our admin dashboard homepage so obviously you don't have right now admin we'll make it right now from the next video so yeah then finally click then this will go to admin dashboard and our admin protected route is also done so you can start it but one thing guys I
(4:21:51) want to show you right now note the icon is not showing in the light mode okay so the problem is uh we need to add color in here look at this field okay the problem is this field so just search this all field and just remove these fields okay add here class name one like if dark then text white otherwise text black okay so copy this class name add it in all icons like this one admin dashboard icon then our enrolled code says here then change password Here and that's it now check yep it's looking it's looking good okay you can update
(4:22:48) the icon also by going to the website so right now if I click here this is coming admin dashboard but it's not exist so that's a 404 this space could not be found okay so that's it guys this was the video and one thing I'm thinking this is showing profile we can update this title little bit like after this come to our main page okay not here page meanings are in this app and profile and page.
(4:23:23) tsx sorry not component app yeah here's it and this is profile but show here e-learning like this name is looking good it's taking on reload yep now come yep looking good right profile e-learning yeah so that's it our profile work is done authentication and profile is done so from the next video we will start to make our admin dashboard which is very interesting features so that's it guys see you on the next video all right so first come here in our app folder and inside this app folder let's create a new folder name will be admin
(4:24:15) in this admin create our paste dot TSX where we need to create our default typescript now come to our website here we go so just click profile and click admin dashboard now if you click admin dashboard this is coming out page because right now we created our admin folder and this is space.tsx in this app folder that's why so now in this admin folder sorry in this space.
(4:24:48) tsx we need few things first at top add here use client secondly in here sorry then secondly in here we need to add here our heading then we need to say our title description keywords like what you always add yeah then right now we need to create a class name will be flicks and this class right now for right now we will give this the value High to 200 VH okay obviously we will remove this but for now just keep it high 200 VH for watching it then in here we need to write on logic like from Big monitor screen width will be 16 percent
(4:25:52) otherwise width will be 1 divided by 5 it means how much 20 percent now we need to create our admin sidebar component and after it let's create another class 85 percent yup and this is our wrapper class and this is our two inside class okay we're making it Flex so this is taking 16 percent and this is taking 85 percent okay so yeah that's it in here we need another component but right now I'm not creating I'm creating right now admin sidebar so import admin sidebar from dot dot slash components create a new folder name will be admin
(4:26:52) then in this new folder create another folder name will be side purse and inside this sideboard folder we can create our admin sidebar dot TSX and we can keep this s to like not Capital yeah yep perfect so admin then sidebar and admin sidebar.k6 create it so yep like this and remove this cool save it come here and this is our admin site per year now guys one thing I want to show you uh I added one thing in offline and that is if you right now check it notice our website uh this scroll bar is not looking like uh
(4:27:44) default one it's not default one okay I edit two lines of CSS I'm showing you right now in this global.css here's it this is the track okay from here probably yep from here so this is with 8 pixel this is the track background color is this you can customize the color totally as your wish this is the thumb color and this is the hover color okay like when I'm scrolling the note the scroll bar is looking very good yeah now in here obviously we need to wrap this everything guys in our admin protected because this is only for admin
(4:28:26) now it's safe cool now wait okay something is happening wrong okay let me see what's going on click admin dashboard yeah perfect here's it so now in here in this admin sidebar first we need to install independency guys okay here I am using on dependency for [Music] our sidebar okay and obviously I will totally copy the sidebar code okay why I will copy that sidebar code because it's fully static not have any Dynamic thing so that's why like for saving time I will just copy this because here I have a lot of icons we need to
(4:29:08) import it okay but it's very straightforward design I'm showing you first install this dependency it's very important react Pro sidebar but one more thing is very important and that is I'm not using right now the current version of react Pro sidebar I am using another version I am showing you which version so obviously install this version otherwise like because I also copied this code from somewhere okay so that's why the new version is not similar okay a lot of things they updated in this dependency
(4:29:38) so that's why I use the old version okay because I copied this code I don't have really not I don't have that much time right for design the only way okay so the version is first give your edit it and like this and here 0.7.1 so npm I react Pro side part then add it added it then this sign 0.7.
(4:30:02) 1 yep now clear it cool now in this admin sidebar let me just copy some design so this is here what I am using this is 324 lines so probably are getting it right now like how much big this is and here we need to create another file name will be icon dot TSX okay just create it and in this icon.tsx guys I added this all icon so otherwise like this will looks not good because uh this will take a lot of space okay let me show you like how much space suppose this this is the icon dot TSX code okay the all icons this is material UI icons
(4:30:45) not uh react react icons okay because I copied it so that's why and they used like material UI so that's why I just also this is like material UI okay but I removed this imported everythings from here and added it in this file so then we can import this everything from this icon.
(4:31:08) tsx so for this now save it obviously and in here save it now let me show you what is this so it's taking time so guys something is wrong happening and that is our admin protected is doing some problems so let me check one thing when it's giving a Reload then okay so if each other role is not admin just write on logic if not user then return wait wait sorry just cut it and write this logic if have user didn't do this also this one inside okay otherwise like uh when user not have then it's loading so that's why this is doing problem yep now come to
(4:32:07) our admin dashboard and I believe now it should work click admin dashboard yeah so this is our sidebar okay if we click here then this will like height and this is our informations let me show you right now so this is here we have title two icon selected set selected okay in here I am creating another component okay you can say another function not component this is called item what is receiving this data because in here I am calling this icam okay from here and sending this title to icons it selected set selected so like when I
(4:32:49) will hover it then this will select that's why okay so my suggestion is you can totally copy this code also from my code okay because it's not that much Dynamic okay Dynamic thing is just this first line here we are using here our user State okay state DOT auth and in here this is the either dot Avatar and user.
(4:33:17) verter Dot URL otherwise Avatar default okay it means you're adding our user Avatar then after it is a name and is a rule that's it and in here one class like capitalize so that's why this is showing a to Capital yeah that's it so now guys our sidebar is done so here we have like two icons so we need to create uh one thing small so come here and right now this is called our dashboard hero okay so dashboard Hero Let's create this component so dashboard hero from our components admin and dashboard 0.
(4:34:08) tsx yeah now create it and remove this TSX now inside here guys right now we don't Implement any charts or anything in here in our admin dashboard okay right now because we don't have any data when will first will after this in here we will just make right now the header okay the notification and that light theme dark theme after it will make our create codes then Live code says then we will make this one many streams then users invoices after completing this everything will come to this cacheboard because we will use same component in
(4:34:52) here like this course analytics charts will be also in here analytic charts will be here these invoices will be here this here will be like some data like how much users create an account from the last 28 days if it's increasing or decreasing like offered with some of our business so obviously it's not possible right now we'll do it at last that's why so now come here and here we need to create a simple component name will be dashboard spelling mistake dashboard header here now import dashboard header from test dot
(4:35:39) slash dashboard header dot slash dashboard header dot TSX create it gsrfce yup now in this dashboard header we need few things okay and this is also kind of guys very similar UI design so that's why like I'm copying it and it's fully static it's not Dynamic don't think that I'm copying Dynamic codes no it's static UI design so that's why I'm copying it okay because like if I make this in front of you it will take a lot of time this is very very similar code like this and not not nothing dynamic in
(4:36:34) here okay so now save and this is yes okay and this is our notification uh pop-up so let me show you how I made it how did I make it okay so here's it on State open setup initial value is false when this is one wrapper class okay for Icon sorry not icon for all this notification yeah for a notification icon for this three like the notification badge so if you don't click here it will uh through the set it will grow this open so if then in here if open is true then show this notifications and I just added these
(4:37:17) same things okay same things for three times okay because right now is static that's why so obviously we'll implement it dynamically when we'll complete our uh this all works okay because notification is will make it at last yeah that's it very simple basic UI design now let's create our main work and that is this create course which is the most hard things okay in these full projects which is the main uh you can say critical thing okay but don't worry I am trying to my best for explain everything
(4:37:48) okay I'll totally try to my best for explain everything so don't worry now let's start our uh create course okay create course features so in this admin folder in this app and admin folder create another folder name will be create course and in this create course folder create wordpress.tsx now ts are a c e yeah here's it come here our create course [Music] yep it's showing empty now in our create course first add here use client obviously because client side component then we need to import our sidebars so
(4:38:44) admin site bar from our dot dot slash dot dot slash components admin and sidebar and admin sidebar that's it now in here we need to import our heading then and I don't know why this is showing this add the data I noticed in my last project in production mode this is doing problem okay when we are testing our code this is doing problem okay then import one new component name will be create course from our DOT slash components admin course and create course dot TSX
(4:39:49) now create it TS rafce remove this GSX yep then after it we have our dashboard header also yep now in here use header okay sorry sorry sorry it's not heater guys this is heading and in here in heading just send our same thing okay because in admin dashboard we don't need good SEO so we don't need SEO and obviously in Adventures but because it's only protected for us yeah then create a class name will be Flex then this is our similar type of class okay what we created some time ago with 16 percent and not for
(4:40:45) all type of device this is this will start from this is for only big screen yeah and after it otherwise one by five yeah then our admin side part then in here 85 percent and inside here call our dashboard header and our create course component call so now save and come here and yeah there you go now let's come to our this create course component and inside this create codes first use here our use client
(4:41:54) then in here come here totally and at first we need some State okay guys like we need our active and set active state so initial value will be zero then we need our on big object State okay which including or everything about our codes like name description price estimated price tax level demo URL thumbnail okay everything here then we need our benefit and prerequisites state which is also similar like this okay but it's an array okay then our last state which is our course content data State okay and also we need our another state
(4:42:52) which is for showing our data okay which is our codes data okay like this now in here we need to create on class like minimum height will be screening finish minimum height 100 VH so yep create course and in here first with 80 percent then right now into like on logic if active equal to zero and then called our course information component so course information from our
(4:43:59) dot slash course information dot ESX so ts are a c e we can keep it like very basic for now then in here after this giv after this 80 percent we need to create our another div which will be like this with 20 empty 100 pixel height screen fixed positioned in changing is -1 top 18 and right zero okay and when you create this component course options import course options from dot slash course option Dot ksx create it and remove this GSX now come here and in our course options first import react and our
(4:45:02) FC from react now we need an icon name is our IO MD check mark okay this one now our type props inside here we need our num active which is a number we have our we need our set active which is active number and white like this here now we need to create our component like this so then return and this P will be guys capital and inside this return before this return create an array very simple array our options okay codes information codes options course content and course
(4:46:05) preview yeah now create on div inside is div we need to map this options.map and options make this one then in here create our first class like this jiv key index then class name is W4 and flex and pegging top button 20 pixel 20 pixel then we need to write on interesting div okay this giv is classed them with 35 pixel High 35 pixel okay this is very basic class name but if active plus one so active means initially value 0 active plus one meanings one if one is more than index obviously right now it's more than index because index is right
(4:46:53) now zero so then do this BG blue and when we will click our uh or when we'll go to like next options course options then this active will be go to two then this will like show Blue okay and then in here we need to call our icon okay this is the icon and inside this icon we also need to write a similar type of logic this is UI logic you can see not in a dynamic thing so yep and after it we have an H5 and in here the value will be your option okay and this H5 class will be also similar some logical class like this
(4:47:45) okay then after it we can finish our given like this now we can finish our array yup cool that's it now export our default course options save it and save it from here now check what is this this is our course information scores options course content and course preview okay but why this is the last one is also coming let me check something is obviously wrong so guys we need to write another logic in here okay in this class name because obviously the last one will be not show this okay so we can do one thing
(4:48:32) we can say after date we can write -1 then this will not show our last one a perfect so this is a very shortcut code but uh not shortcut code but we completed it in the shortcut way because we mapped it okay we add an array and then we can perfectly completed it so yeah this is our sidebar and this is totally fixed this will not move okay done so then we can close this component now and after it uh we need to make our codes informations our main component okay so in our course information we need to send few things
(4:49:13) like we need to send our course info which value will be course info then our set course info oops yeah then set course info yeah like this and our active which is our active and at last we need to send our sit active yeah it's enough now come back here first save it and come back here in this props receive our course info type is any set course info our course info any and void then our active which type is number and then our set active which type is like this yep now
(4:50:21) add here our FC input from react call our props yeah now we can get our course info set course info active and set active like this and we can remove these props also because you already said here like FC props yeah now in this course informations at first we need to create an estate name is dragging and set drag and which initial value will be false yeah then we have we need some function okay like on handle submit function very simple function either prevent default and set active will be this then uh now let's
(4:51:18) start our UI design okay then we'll do the other functions later so this is our first class with 80 percent margin Auto and Mt 24. now we need to create on form wait this is this will be the form submit on submit and we'll submit then we need our level and this class name will be our Styles dot label yup then in here this will be our course name come here and check yeah looking good after it we have our input what we always do similar type of input like name then name required True Value will be cast course
(4:52:22) info dot name okay value will be course info dot name and one change this this one ID name placeholder just you can put any placeholder and this is the class name Styles input yep you can also add here Yelp and uh sorry for me cab verification okay but I'm not doing it because it's not that much important it's admin dashboard that's why and we already added as required so that's why then after it we can do one thing we can cut this okay I'm not deleting them again I'm just cutting and adding ndiv and yep and now
(4:52:58) outside of this tip you can put on line break you can give online break then on new div and class name like mb5 then uh same thing okay what we again always doing like level status dot level and course description and this description will be on text area right oops internal server here what happened oops my network issue so let's connect let's restart our next J server yeah so in here course description level done and on text area where placeholder what is this calls oh okay so this will be obviously number
(4:53:59) like 30. initial value we can keep it right now you can change it as your wish no problem placeholder will be our like write something amazing okay yep then for the class name guys just add this Styles dot input yup now come here I know it's looking very small so we need to do one thing you need to say height will be minimum content yup now not perfect this is looking big and some padging we need py more we can add two and important yeah cool and then we can change this rows to like little bit down eight rows
(4:54:54) yep perfect so this is our course description done now next one let's start one by one and oh yeah obviously we need to write the value which will be course in for the description and one change yep done on chains save it and after this text area then after this giv let's give our another line break create another div and right now this jiv will be some class double full and flex justify between okay because we will add two thing in here okay this is the first one course price this is the price you can do one thing guys you can copy the
(4:55:41) previous one also okay because this is similar similar things okay so that's why I'm like copying this input one okay just wait 45 percent and course price then yeah save it so come here and check this is the course price and let's add another one also be up done now save it and cool that's it okay done so next one is course tax so after this DIY okay this wrapper div give one line break and now create our similar type of div okay but it's not like multiple I mean we're not going to divide two parts so
(4:56:24) yeah div and finish it so the code stacks and this is the value and this is the on chains always similar similar thing now come here after it we have our course level similar again but this is guys not similar with this one okay this one meaning it's not similar like this one just copy these two Styles one okay like this one you can copy this one then just change the value yeah like this this is our course level okay and with 45 percent I totally copied it from the top one then Jesus changed it value of course level
(4:57:11) then this is like placeholders and demo URL this is the value course info tomorrow demo we make sure that you are writing the same value and uh one change is perfect okay especially this one okay this level suppose you're copying it but you forgot to change it okay then obviously it will do problem we make sure that you are writing the correct in here okay and one thing you can also check it from here type in the wall field okay if you notice if you're typing code's name but that's coming in
(4:57:43) code Stacks also then you understand yeah something is eight minutes something is wrong in value and on chains okay so right I am I'm typing no issue happening it means everything is okay perfect in minutes and one thing I forgot and that is in here we need to give another line break yep now looking perfect so after this course level so just collapse this right now and given line break then in here give another class like this now give an input type file accept image only IG file class name hidden okay because we will
(4:58:36) add another drop features then on changes this handle change file change so just create this function now so e which type is we can say any no problem then constant file equal to e Dot Target dot files and our first object yeah and in here in this files we can add like this cool if have file then constant reader equal to new file result and not reader.
(4:59:28) reads a data URL now reader Dot on load e type is any now if our reader Dot ready state equal to 2 then our set course info will be this okay but not image this will be set to our thumbnail because we don't have image we have thumbnail sorry spelling mistake thumbnail okay this is spelling be make sure that you are writing same spelling here this thumbnail okay B make sure that you're writing the same spelling so thumbnail yup and after it [Music] just reader Dot read as data URL
(5:00:33) and call our file like this that's it this is our handle submit function now let's make our main crazy features okay very interesting features that is our handle drag offer function we will add here drag features okay you can drag and drop images or any files so drag handle drag over e dot preventive fault and set dragging true and this is another function handle drag leaf and E which type will be any then e dot prevent default and set dragging will be false that's it now our last function for our drag
(5:01:30) features that is our handle crop where we need also e like any and in here e dot prevent default then set dragging this will be false and constant file e dot data transfer dot files okay like this and first our first wait in here guys this will be like this files then our first object if have file then our file reader again we need and our reader Dot onload simply our set course info and send this thumbnail yup and at last reader dot read as data URL
(5:02:34) and call our file done so now come back to this bottom guys totally last and let's add our dragging features okay so after this input add on level html4 is file okay for our file and in this level basically we have on class name okay which is logical class name like this is minimum height for dark powder white for the light border this then some padding and The Logical is like if dragging true then background will be changed okay otherwise back into the transparent now we need to add this on drag over on drug offer okay so handle drag offer
(5:03:36) in here call our dysfunction on drag leave handle drag leaf and one drop will be handled drop okay now obviously uh if we have our thumbnail then we need to show that right so if have our course info dot thumbnail then on image IMG tag okay because I want some Styles what is not possible with and next is IMG okay so that's why here I am using pure IMG tag okay not next image and SRC will be course info Dot thumbnail then class name like maximum height will be full W will be full and object fit will be covered
(5:04:33) otherwise in here this will show on span like drag and drop your thumbnail here or click to browse like this now Simply Save it and come here and check here's it so right now suppose I'm opening my finder then downloads and suppose I am just dragging this image and adding it in here okay just second suppose this one just add it and note here's it it is the full image okay given reload click here notice it's again opening here like this cool now at last we have just two buttons okay then our this component
(5:05:23) work will be done so after this div just keep on line break then add this class okay double full Flex item Center justify end and this input okay this will this is for our next button then add two line break for some space now yep here you go next button so if you click next button then obviously you need to import enter the all value otherwise you cannot go to next like this this this thing now hit next yep notice its coming course options cool so yeah let's come here our course information is done right now
(5:06:09) now we can start our next one so in here if our active equal to 1 then call our course options sorry not codes options this is our course data course data component name yeah course data you are thinking this is course data this is code strata yeah but this is capital c okay this is components that's why now import codes data from our DOT slash codes data dot TSX so t s r a c e remove this GSX yup done and in here in our codes data we need few data we need to receive few things like first we need to receive our
(5:07:12) benefits array where we have title which is string but this is on array okay then our set benefits which will be our benefits and like this okay then after it we need our prerequisites so prerequisites like this and in this prerequisites after it set prerequisites like this done also active and our set active cool and not need these descriptions at description okay and in here import our FC from react call our props
(5:08:18) inside here call our benefits set benefits then our prerequisites set prerequisites our active and our set active that's it now come here and send the correct data so first send our benefits or benefits State then our set benefits state then our prerequisites and last hour set prerequisites and also our active and our set active yeah done now given format yep looking good cool so come here in this course data
(5:09:22) we need to do some critical thing okay let me explain it not that much but a little bit critical you can say Yeah in here first we need on simple giv okay first add on div not need any styles anything yeah it's kind of wrapper now we need an label okay our simple level what you always are doing just format it and import styles styles.
(5:09:54) 11 and this is the CSS yeah after it one line break and now we need to do benefits dot map as benefits is an area so we can map it so benefits single benefit right then index which type is number then in here create our input which type is text and after it we have our key which is index we have our name which is benefits then on placeholder so we can given like default placeholder okay like like you will need to be able to full stack elements platform like this okay this is our benefits okay course benefits then required and class name and one change will be this
(5:10:55) so we need to create it handle benefit chains constant handle benefit chains in here we are receiving an index which type is number and we are receiving on value which type will be any and now we need to create on updated benefits variable okay where we will spread out these benefits it is benefits meanings this one which is coming from our which is like empty right now obviously at first then we need to call this update benefits then index this is the main thing okay so we are calling this index because this is array okay this is the like
(5:11:54) challenging task in here this is here benefits is an array so when we will add something in we need to we need to add this into that array right you need to add this data into that array obviously at last after this we need to right now send it to our site benefits again okay this updated benefits okay yeah then uh yeah so basically this is an area so when you are adding something obviously we need to create an object into that array and obviously we cannot remove the previous one so suppose in our benefits we have on benefits we want
(5:12:34) to create another one so obviously cannot move the first one we need to keep the first one and we need to in we need to also keep the second one also so that's why we are first adding the everything's okay the previous one like update benefits this is the previous data then in the perfect index we are adding the value okay then we are setting it set benefits and this updated benefits okay yeah that's it probably you got it it's very easy then in here I don't know which cannot uh vs code issue given
(5:13:11) reload I don't know okay so notice what they are saying cannot find name input this is HTML man why I cannot find input okay after each add our Circle icon okay Circle icon from our material yeah I can move okay so you can also use here react icon okay if you know if you have no problem you can find out react icon and you can use it and this is our add Circle icon and in here we need to add some style okay like this and then you need to find someone will
(5:14:14) click here this will add our handle benefits not handle at prerequisite sorry handle add benefits so let's make this function here will be set benefits and our previous benefits and add new title okay that's it this is meanings this add benefit meanings let me show you right now because it's done so if I write now click here that this will create a new one new new object okay in our array but the value will be empty so that we can enter value in here then this will set a new value that's it so after it right now our benefits is
(5:14:57) done so we can write now easily make our prerequisites so after this GIF guys we can do one thing we can copy this GIF full now we can paste it yep like this and this will be what are the prerequisites okay not benefits instead of benefits at prerequisites instead of benefit add prerequisite prerequisites yeah then in here prerequisites dot title this name we can keep it prequisites and like placeholder obviously will be not similar right now so add one placeholder as your choice like I'm adding this then we need to change this function to our
(5:15:50) handle prerequisites change okay we need to make it and last this will be handle at prerequisite so just make this two function then our this work will be also done so you can copy our first two things okay because it's similar that's why so handle pretty quizzes change and updated prerequisites this will be our prerequisites and yep and here see it also done and the last one function name will be handle at prerequisites okay this function and set prerequisites prerequisites previously add a new title that's it now come here
(5:16:43) and add something like anything then yep okay so one chains have something wrong let me check on change this is handle prerequisites index okay so problem in this function hmm oh sorry not said benefits obviously this will be also set prerequisites yeah now type something given reload guys and first fill something in here anything whatever you want choose on file done and now like this and this now note if I type something here like this like this notice perfectly working cool so simply add one button okay at the bottom
(5:17:48) then our this uh component work will be also done and similar button okay what we're always adding but some style change because right now we need previous button also in here at the last here's it here so previous button and handle options so let me make these two functions also oops one thing let me show you the UI again this is the UI okay very simple and in this previous options just set active will be minus active minus 1.
(5:18:30) because you need to go to the previous one and our handle options which is very important one so this will be if our benefits and our benefits length is minus one okay it meanings if there's not many benefits or if they're not have any prerequisites or something like title is empty then please fill the all fields okay if not sorry yeah if have like this not have like this then set active active plus one okay it meanings right now suppose I am creating a new one I'm clicking this next I cannot go to next
(5:19:10) because we need to enter this otherwise it will do problem in our back end okay it will don't do any problem but it will do problem in our website like when we'll face data from our from our in our course details then it will do problem so that's why if not enter value then you cannot click next if you click next this will show please fill in the fields to go to next now I am filling it and now next yep cool so this component is also done guys and this is the video okay because it's already very long and
(5:19:43) from the next video we'll start our main main task okay and that is our this course content which is very big okay which is not a shortcut like these two components okay because that's the main hard things we need to do a lot of things we need to create multiple sections then a lot of things then after that simple course preview component and we'll create course okay so we'll do this in the next video so see you on the next video alright guys so I am in this file create codes.
(5:20:18) tsx okay in our course folder right now and from here right now we need to Simply copy this first one okay this one second one then we need to paste it like this again and in here if active equal to 2 then we need to create another component name will be our course content okay like this and just create it so import course content from dot slashcourse content dot TSX now create it yep and in here obviously we need to send uh not this status okay but Active search active is obviously neat so we can keep it to First
(5:21:11) then after it we need some other data like course content data okay and our set codes contented or this two State what we created here okay this edit then after it we need to send our handle submit function okay what we'll create right now sorry for my phone notification let me mute this yeah done so handles submit constant handle submit and keep it empty parameter not need any parameter and obviously this will be an asynchronous function okay guys yep then in here we have our handle submit okay so that list come back to this uh
(5:22:10) course content okay and in this props you just type and just type first add our active which is numbered not Boolean and sit active which is also like active number and void like this then our course content data which type is any and our set course content data like this and our handle submit function which type will be any done and in here import our fcr this is called functional component then our props and oops extra second bracket yeah
(5:23:15) now first our course content data our set course content data our active our set active and our last one handle submit what we can change the name to handle course submit here okay you can change this name now we need a state okay this state is looking weird but I'll explain it one for you so collapse is collapsed and you state array so this is an array then codes content data dot length Okay then dot field will be false so I'll explain it later because right now you will not understand it then constant
(5:24:02) active section set active section where initial value will be one and this will be comma not DOT yep now create our handle submit either prevent default for now this is enough yep now uh let's make our another function okay our handle call UPS toggle or one thing guys I'm not making it I will make it like after the UI then you will understand it better okay so first start our UI part right now so at first this will be the class with 80 margin Auto margin top this and packing three okay
(5:25:07) and we need our form right now like this then on sub introop with this handle submit yep now these are already our course content data is an array right so we can simply Loop it our course content data is already on array right here is it so we can Loop it so obviously guys save our create course component first okay and yep then in here paste it I mean sorry this is the code okay in here so course content data.
(5:25:47) map okay this is an area so dot map and item and index and in here we need one thing okay or wait wait first let me return this and inside this return first returns fragment and inside this fragment we need on logical class okay like this if show section input then empty chain otherwise mp0 okay so Source action input will be on a logic what this will do this is here show section input index if index equal to 0 or item dot video section if not matching with course content data index minus one dot video section then do this otherwise this this is
(5:26:41) meaning guys when we will click add new playlist okay sorry not playlist add new section then this will give automatically one empty can okay it means it will divide our sections wise okay if you're already watching the UI then you already know this right like how our UI is looking so right now let me save it it's it's right now looking very simple so for for now guys let's do one thing come back is create codes okay and change this state value to 3 then we don't need to like fill multiple time not three make it two
(5:27:18) yeah here you go so this is our course content it's right now empty now on another class like this then in here we need to write on logic this is fully of logical this component is okay full of logic you can think so index if it's collapsed and index so we are sending the index and then in here you can create an fragment and where will be our icam DOT title okay if have then on paragraph otherwise otherwise like this empty okay so in here in this paragraph This is one this is the class okay font popping start text writing text in black and in
(5:28:18) here value will be index plus 1 and item dot title I'll again try to my best for explain it okay because it's right now very hard to explain obviously I need to finish it first so then this is still giving error because we need to finish it like this yeah now form it it will don't give any errors now after this in here just follow the UI part okay guys what I am doing just do the same thing then I will explain it to you so arrow button for collapsed video content and flicks and items Center okay and we
(5:29:11) need an icon we need our delete icon like this import it and class name is also logical I already said this component is fully logical okay probably the 80 plus code is logical in here so like if index is more than zero then cuts a point others got some no drop okay and they'll have a meaning of this I will explain later then after it we need another icon okay which is for collapse basically so this icon mg outline key down okay and this function right now we need to create our handle call UPS toggle so come here top
(5:29:59) and in here we're receiving index which type is a number and now constant updated collapsed equal to spreader call is collapsed yup now update it collapsed say in the index and then if not matching with updated data call UPS and index then searches collapsed like this yeah so I know kind of critical logic but don't worry okay just watch it what I am doing okay just watch it for the next like 10 minutes just do copy paste I mean just post the video and watch what I'm writing so then after this uh handle call of
(5:30:51) struggle after this div okay this div yeah sorry this giv this is a rapid giv problem yep in here we need to write another logic like if not is collapsed index then do one fragment first class will be our my three like this then we need on label okay what we are always writing our video title okay so import these styles from our app Style Style yep save it come back here and this is the video title okay and here guys what I did some time ago this is the delete icon and this is the call option okay notice how it's looking
(5:31:53) yeah obviously this is coming this side because in here we'll add some other things also that's why okay so one thing guys before this is collab index okay here we need to write on logic like if show section input if so section input then only write on input which type will be text and class name will be like this and on change if you like this let me format it then this will like come on same line yeah so class name is this text 20 pixel and if item right videos video section is matching then this um sorry matching this then we will be
(5:32:47) these otherwise it will be maximum or we can do it minimum not maximum then font pop-ins cursor pointer dark this color then this is like CSS and this one chains have something like uh unique thing okay first in this on chains okay this is our input on chains we are getting our all course content data because we need to add the new content data in here also that's why then updated data dot index and inside that video section we are adding this e dot Target dot value and we are calling our set course Contender
(5:33:20) and we are sending this updated data okay so we are not creating any function instead of creating any function we are doing this in this on change okay that's it otherwise everything is same and after it guys we need an icon here or BS pencil icon it means edit icon then import it obviously then let's create a class before this input okay and finish it here and in here give on line break now save and come here this is how it's looking but what's the Iconia hears it so if you right now click this pencil icon I can
(5:34:03) edit it okay like hi hello how are you okay very big section title you can write yes yeah okay all right then uh after here just scroll it guys and then come here bottom after a video title we need our video title input right which is kind of similar thing okay like this input or previous one input so paste it type text placeholder project plan okay this is our project uh title so this is the first first one name okay yep perfect looking perfect then after it URL so right now guys we can copy our div okay because similar thing what we
(5:34:58) are doing for the inputs so just copy this and change it like this okay MP3 Styles level and then video URL type is text placeholder like whatever you want then this is value will be obviously video URL and in here video URL then that's it save it right now and yeah cool perfect so after this now we need our video description so list one thing copy this and instead of input change it to text area and right here rows like we can say eight and calls will be 30.
(5:35:47) that's it type not need placeholder is like this and value and yeah then everything is okay save it right now and this is not video URL this is our video description and here we need to add a new CSS what we are writing on this height minimum screen yep looking cool and some padging so P we can say p p y two cool so this is a video section a description but notice it's not working it means on just have some wrong yeah not video URL this will be our description obviously G will be not capital we make sure that you are writing like G
(5:36:36) like this description yeah now something is wrong guys let me check oh sorry hear it also description that's it now we can write here cool after a video description we have our multiple line breaks like one two three okay then after this div we have our I came and inside our this array we have another array so we need to Loop that right now links array so icam links dot map single link which type is any then our link index which type is number yep and in here MB we will be minus MB will be 3 and
(5:37:42) display will be block and inside here W full then Flex icam Center justify Center then our label okay one level whatever is writing like this it's a link injects this one and plus one yeah after level we need our delete icon which is very important so let me add it and obviously we need to make this function handle remove link let me go to Top Again then constant handle remove link we're receiving here index which is on number and our link index which is also one
(5:38:48) number and inside here create or update it data variable where we can like add our course content data now okay similar already here okay uh copilot suggesting is so updated data index and in this links splice this okay splice meanings this will remove it okay splice this will you can think like this will remove the which index we're sending from here that Index this will remove so guys after this div Ally add our U input okay like source code and Link title yeah after this we need to create another input which will be forward
(5:39:49) source code URL yeah like this now come and this is obviously not working perfectly let me check what's wrong here this is justify between guys not Center perfect yeah so obviously we cannot remove the first link okay so suppose I'm clicking I'm creating a new link okay I'm showing you how we have to do this and one thing guys in here not need three beers we need one beer only okay yeah I think something like mistake then after this the main important things okay after this giv and that is our add link button okay
(5:40:42) like this so on UI a simple class inline Block in before another paragraph where we have this icon geg icon okay BS link icon then we need to create this function handle add link what will add new Link in our course content so handle add link where we are receiving our index as number type and now in here like first what we are always doing then updated data dot index.
(5:41:24) link dot push title will be empty and URL will be empty yep then at last we can call our set course content data and we can set this updated data yeah now let me show you so we have in here uh one link right so if I right now click add link this will add a new one okay and right now I can delete this also easily okay so this is the for this that's why we added this delete one and right now obviously I cannot delete the first one okay because obviously one link is must that's why this is required true okay after eight guys after this add link
(5:42:12) after here we can give online break and now we can add our new one which is for ADD new content okay like this so if index is matching with course content data dot length minus one then this giv and one click will be new content Handler and let's import this icon from react icons then new content Handler which is the main hard things also because this is the main things what will add a new content in our here so first in here guys write on logic like if I came dot title and item will be here which type is any
(5:42:59) if I came dot title empty or description or video URL is empty then please fill all the fields and also you can add one thing item Dot uh links so it's an array so first object dot title or URL okay yep if this is like not have then place on error please feed all the fields otherwise our backend will do problem that's why then let new video section which initial value empty string now if we have our course content data dot length like this then we need to automatically set our codes sorry last video section
(5:44:00) which will be our course content data course content data dot length minus 1 and video section yep now I'm adding on comment for helping you like understand sorry use the last video section if available else use user input it means if you are not typing the section name then it will automatically check the last one okay then if you have last video section then our new video section and our last video section yeah we will save this new video section to our last video section and at the last our new content right now we need to
(5:44:50) create our new content object what is basically our value like video video model will be empty string title will be empty string description like this video section like this and links like this cool then at last set course content data what will be our this new data all yep cool so that's it now hit save come this button after here right now if you click add new content this will add a new content obviously we need to finish we need to add this first value okay now we can add new content notice it's it's already automatically added a new
(5:45:34) fields in here and right now you can delete this content also and one powerful things if a retina collapse this notice this is showing how like this one also suppose we are creating 40 videos then obviously we cannot like open the all videos then like this will take lot of space so that's why I did this collapse features if you click here then this will only show the title of the video okay for like uh then we can understand yeah this is the number one video and if you need anything to change you can click here
(5:46:05) and you can update that okay as like udemy how working then if needing a new section then what will happen okay we will implement it now so after here we need to give a line break then on given like this and this is our add new section function so let's go to top and create our add new function where we need to write some logic like if our course content data it means a last one okay length minus 1 dot title if it's empty or obviously you cannot create new section if either not entered the if admin not enter the value then okay then
(5:47:10) yep like this good suggestion by Copa a lot so this is if um not if the title is length is this empty string description is empty string visual release this then this will show an error so right now if I come this button okay in here in this GIF obviously add something others you cannot click it so in here simply add on icon like this okay add new section and on text now if I right now click here note please feel all the fields obviously we cannot create new one okay if we not enter the value now I am entering it
(5:47:52) I am trying to create now it should work okay so obviously you need to enter value and one important thing and obviously that you need to change this name like jmo okay and you can also change this name also like Gamo what is now it's in fast section okay because the two section name is similar okay so our code is like very uh everything is working very dynamically if you change something suppose uh after uploading 30 videos okay you're thinking okay so I mistaked something in the first section okay so let's add
(5:48:32) something on the first section no problem you will create a video it'll just change that section name to the first section it will automatically come to the first section okay this is like dynamically working everything here then after it Win It On single few things it's we are almost end in this component okay I know this is very big component and then after it I'll explain it so let me just finish it so we have just one thing which is our button what we're always adding like previous button and
(5:49:04) handle option I mean next uh next button so previous button you can copy it from the next other components also okay because it's similar this this field line so previous button on the handle option so let's make it so constant previous button which is like always same set active active minus one yep but for our handle option we need to validate few things obviously user admin cannot go to next event don't don't add any value in the course content obviously Mass need to be content in our need to be upload content for create a
(5:49:55) course okay so then like this if codes data length okay we can do one thing you can copy these lines okay it's more good safety yep then section cannot be empty okay you cannot go to next if you don't add the value then Now set active active plus one and our handle code submit okay our funds on what we created yep that's it now simply given format cool now come here and here you go suppose right now I'm creating a new section and here first let me delete this here so add new section something is obviously wrong guys let me
(5:50:52) check something logical issue let me check this code again okay guys so I forgot this add new sections logic else I forgot the else logic else we need to add our set active section active section Plus one like this then our we need to create our an object okay our new content what we can like copy this one okay this object like this sorry yeah but video section will be not this video section will be untied tilt section and our active section okay index one then right now we need to add this in our set course content data
(5:51:54) cool now save it come here and obviously first delete this okay this is not need so delete it now click add new section notice it's adding a new section so suppose here I am giving the section name to like uh intro for example okay here I'm adding on video like these okay anything then I'm clicking this or I'm like collapsing it and right now I'm creating a new section the notice new section here so we can easily create sections we can easily add multiple video in a section like add new content notice it's not
(5:52:32) creating any new section it's adding here and we can collapse this everything then like this is first video second video even it's showing the number also like third video for this is fifth video okay even right now you can delete our videos also so this is probably the best uh like way okay yep so right now this is this component is done but after prevent next we need some like line break so let me check in here at the last just give two line break or three line break yep now looking perfect so yeah our this work is done so right
(5:53:21) now guys let's start let me start to explain this full code okay I know this is a very big lines of code almost this is a 354 lines of code very long quotes and even the 94 Cent code is dynamic it's not an aesthetic component it's fully of dynamic okay almost everywhere Dynamic even in class list Dynamic then everywhere okay so now let me come here first on uh with 80 percent so I hope uh on with 80 percent margin Auto margin top like this and padding this on Farm where uh handle submit is this course content data is an
(5:54:04) eraser mapping and we are getting this item and index so item is meaning single quotes content data and so show section input what is this meaning when we are clicking is this add new section basically guys let me explain with you okay break this code actually how our code is working so if we keep same section name okay if or because this everything is in same array this first section this second section third section everything is in same array then how I am then making it like decision section this one section it's
(5:54:42) it's really not kind of possible Right but I am doing it by writing this logic this show section input so in here basically the logic is if our video section and the last video section title is same okay last video section title meaning suppose in here this is on video title so this video title this this video section is this Untitled section two okay this video section is automatically this I am not adding it because when I'm clicking this addium content we are automatically taking that section in our this content we are not
(5:55:16) like giving options for changing that section name so it means we are automatically taking a new section we have section value but when we are clicking this add new section we are not adding the same last one like this section one we are adding a new value like if I click right now add new section then this will become Untitled Section 3 which is not similar so with this logic like I am filtering out those items like if it's a new section or not if new section then just add some merging Top This is just merging top but otherwise everything is
(5:55:51) in the same row for margin top where where it's feeling like this is not in same robot obviously this everything is in a same inside in the same class okay this is happening for merging top this this is margin Top This is margin top then in here probably you understand it right now guys okay and if you don't understand then please check the code and try to understand I believe you'll understand then show section if have then okay if show section is like have obviously then we need this icon otherwise like for this video
(5:56:27) obviously we don't need options for edit section in here right in here so not need so this is the logic meaning here if our source section input it means if the this which video we are working right now that video is uh section is not similar with the last one then this will show like uh for change the section title that's it then in here this is the collapsed feature collapsed meaning suppose we are collapsing it's obviously we need to show the user store admin like this is the video name otherwise admin is
(5:57:04) confused like which video this is because this is collabs totally like when you're clicking this is not showing the data so that's why we need to at least we need to show this data admin here this is the third number video this is the video in which is the video title then admin will understand yeah this is the video okay then this will be easy for admin to like maintain everything in here suppose you have 50 videos so you need to create everything from here so this then this will really uh if we don't at this collapse feature then this
(5:57:38) will looks very big kind of impossible to like absorb content right then in here this arrow button okay what is for collapse video content okay similar thing then in here uh if the index is matching okay this is meanings guys when you are clicking we are sending the index okay if the index is matching then uh then only show this that's when you're clicking here it's showing our data okay then in here this is similar things I will explain it then yeah everything is similar here this was like our previous component
(5:58:23) here and add link yep and add new content that's it guys I hope you almost understand everything and this is like some validation and when someone is clicking one thing and again explaining with you when someone is clicking add new sections we're adding a new object in our array okay with empty empty value when you are clicking add new content you are adding an another object with an empty value then we can user can like admin can update the value okay this is how working so I hope guys you understand it this this was like the
(5:59:03) most you can say this was the most critical component in this full project okay it was really hard leaving when I made this like it's I spent almost five or six words for only for this single component because this is very logical component every wire is like logical logical thing okay so that's why and if you don't understand anything in this code then don't worry it's very normal you can't be because you are a beginner okay so obviously this will take time to understand okay this are
(5:59:35) you you need more time to understand it like more perfectly but don't worry just try to understand and practice it multiple times I believe you will also understand it seriously because I write this everything with my brain no one said me hey you need to write this logic I added this all Logics with my brain that's why it's took six hours six hours so that's it guys and now we need to make this course preview component which is very easy because uh we don't need like any Dynamic things right now when
(6:00:07) we'll click this next delete this one then this will come here course preview and in our this create course sorry here we already have data so when someone is clicking this handle submit we will call this set codes data and we will send out all information okay all right guys so right now we have our everything data right when you are entering the value in our inputs we have our benefits that we have our previous records content data these are codes info but we don't need this data why not need we need a full object and right now
(6:00:45) we need to make an object and we need to add this everything into that object okay because in our backend we will send an object you will not sync like course content at a single array this everything we need to join it in a single object so let's make this first we need to format our benefits array okay we need to right now make it correct data structure okay so constant formatted benefits like this benefit start map single benefit and benefit dot title okay but this will be obviously title value will be benefit.title
(6:01:28) and in here add on second bracket yep like this and finish it like this cool so this is our formatted benefits now we need our formatted prerequisites okay which is also similar thing like this prick widgets and one thing let me finish it yeah so prick widgets dot map and single prerequisite and title will be this okay then now we need to create our we need to format our course content array okay so constant our formatted course content data yeah then codes content data.
(6:02:25) map in here we have our video URL which will be like this course content okay the parameter title will be our course content dot title description will be like this in video section will be like this now we have all links which is also an another array so right now we need to Simply we need to Simply again break this we need to again format it so course content dot link dot map and single link now title will be link dot title and URL will be link.
(6:02:59) url now finish it yeah then after it we have our suggestion which is course content dot suggestion yeah now finish our this array done and in here simply yep so our format course content array is also done so right now we need to prepare our get object right now we need to prepare our data object so constant data equal to our name course info dot name description will be like course info description then price course info dot price okay because this is an object so that's how you can easily call our object like this
(6:03:54) estimate price will be this then thumbnail will be thumbnail yeah text is also need but also need thumbnail thumbnail yeah course info dot thumbnail this is the thumbnail yup then after thumbnail we have a level which is called simple.level we have demo URL course info.mo URL we have total videos which is basically course content data dot length we have our benefits which is our formatted benefits what we formatted sometimes ago this one this object then in here we need our prerequisites prerequisites formatted prerequisites
(6:04:50) and our codes data which is a formatted course content data yeah now let's call our set course data and send this data yup so right now guys if you format each and just console log our codes data okay yep now guys come to this top and change this 2 to 0 okay this actually because right now we'll check our everything is working or not okay so come here and give on reload then yep here's it so right now suppose create on codes by just typing anything okay like nine ninety nine dollars estimated price like 999 code stack Something
(6:05:45) level Something demo your results also for now like add something and on image let me upload an image here suppose this one now hit next now in here add something here will be also like similar then next and in here change this title to like demo and anything now click next now guys check our console log note in this object we have our benefits array our codes content array or demo URL description estimate price this is level name prerequisites everything is here already notice so if anything is not coming okay if
(6:06:40) anything is not coming obviously then you need to understand something is obviously wrong okay like in here everything is coming it means you are perfect your code is perfect you're good to go so right now guys as our all data is coming so right now right now we will simply start this course preview part okay so let's uh come here at the last after if active equal to 3 then this will shown course preview we can say course preview so create this component import course preview from our dot slash course preview dot TSX like this now
(6:07:31) simply create file ksrfce cool remove this GSX and in here in this course preview we need our active which is number and our set active which is like this and we need our course data which is the main important thing in here which type will be any and our handle course create okay on function so that's it we need this three thing now in here you see with these three things course data then our this handle codes create then our set active and our active cool
(6:08:35) FC props I'm done and now we need to send few things yeah sorry not not few things right now we need to create on function okay so remove the console login or create course component and we need to create our this handle course create function so constant handle course create where you can give an e parameter now in here our content course create for now we can keep like this okay empty just constant data equal to our codes data okay yep now obviously send our codes data in here codes data cool and avoid this handle course create
(6:09:32) function done now do and format come here in this course preview first add this class with 90 from 800 okay with 90 margin Auto POI like this and MB like 5. then now we need another class which is our blue full and relative inside this we need on another class which is like this W4 and empty again now we need to create a component name will be course players this is a very important component and in here we need to send our video URL what will be our course data Dot demo URL data first then we need our
(6:10:37) title which will be closer title need description so it's not new description and not need any other thing guys just this two thing is enough so let's create this code supplier right now so import s player from dot dot slash dot dot slash dot dot slash go to our utils because this is a new deals this uh this called course player dot TSX now create file and tsrfc e in here just add our video player sorry in video URL which type is string and our title which type is string yeah that's it it's enough right now
(6:11:34) then in here we can add IPC from react and on props like this inside here we can add our video URL this is enough now guys let me show you how can you implement and one thing why this is giving error so video URL yup course player video URL oh sorry spelling was mistake video URL yeah done now let's go to right now our here and search our videos Cipher okay which platform we're using right now okay so this is our website video Cipher so what is this website is doing this website is providing DRM encryption okay
(6:12:30) grm encryption means digital right management system probably if I'm not wrong so digital right management system will add on order Mark for our course content then they will give very highly extra security for our video content like no on can download or video content no on can record it screen record it or no one can even screenshot it also if anyone screenshot this then that will be so blank okay empty or like black so this is a very highly Seeker platform what we will use for our LMS platform because in our LMS platform we need to
(6:13:07) protect our videos our course from an unethical users like we need to protect it right obviously fully hundred percent protecting is like not possible but we can increase our security which will helps us for grow our business so go to this website video ciphers in here and I have already an account so that's why I'm just log into my account if you don't have any account please create an account and this is not free guys obviously they will provide you like lot of things cloud storage so obviously you will go and get it free
(6:13:40) but don't worry for the first 30 days this is totally free okay for the first 30 days totally free you don't need to any internet any credit card or anything like that this is totally free okay so click the dashboard then this is like coming into register place I don't know why it's taking time so guys this is the login page so I have already an account so that's why I'm signing and obviously you don't have any accounts so just click this sign up and create an account okay they will ask you like some basic
(6:14:08) information just enter the information in tribute account it's very easy after creating obviously verify your Gmail okay for activate your account that's it so I'm logging into my video Cipher account okay guys the login done so after login or after creating your account you will be redirect to like this okay but in this video I uploaded it so that's why it's showing here but there have only on default video will be here okay like this this is the sample video so right now let me give you an overview
(6:14:37) of this video Cipher okay and again this is not any sponsorship video okay video server is not sponsoring me I am personally using the services and it's really very awesome okay so that's why I'm also suggesting you for use this and in here so this is here you can upload video by clicking here you can right now ask me why I am not uploading video from our website yeah we can upload from our website also by using video Cipher but like they'll have some long process okay like we need to use our AWS S3 then that will become to
(6:15:11) video Cipher okay that there have like some long processing but if we right now come to video Cipher and if we upload our uh video in here then we will get an ID or video ID okay then we can fetch it in our website which is very easy and as this is not in the multi vendor LMS platform so that's why we will simply come to this video Cipher admin video Cipher dashboard and you will upload our all course content video then we will copy the ID and I'll show you how to do this okay but first calm this video
(6:15:44) Cipher account upload on video okay which video actually you want as your course then in here the left side security and config in here you need to come here and you need to click this API Keys okay you need to create an API key like as API key so I have already an API key so this is notice this is giving me another API key but I don't need actually any API key so I'm just deleting the last one okay because I already have an API key so for you you need to create an API key first okay it's very important
(6:16:21) now this is users this is books not make anything right now okay and one important thing guys that is just click this custom player you can totally customize your player your video player as your wish so just click this pencil icon obviously at first this will be empty you just need to click uh create or sorry you just need to click this add custom player okay then you need to give a name for a player like this and this is the features okay what I added here like I can change this color okay this color then in here this
(6:16:59) will show our caption then this is playback speed this is skip button k n okay I mean if anyone click uh [Music] from our keyboard then this will take like 10 seconds like how YouTube work then lot of things lot of settings have here you can like check one by one and you can customize your video player as your wish okay so I'm not doing that much like advance in here because it's your task then after creating video player you will got this player ID you will get this player ID which is important so then in here obviously
(6:17:34) click this set default okay now now guys at first from here after creating API Keys we make sure that you copied your API key okay first you need to copy your API key now come back to our website come back to our backend our server and in this draw chain we I already added the API secret this is the video Cipher API secret okay in our backend.
(6:18:02) unp this is the secret key so we make sure that you're adding this okay otherwise video Server doesn't work totally so add it in your backend.ng now in our back end right now I created another function which is very important but a very small function I'm showing you I did it in offline that is just come this course controller.
(6:18:27) ts okay controller and course controller.ts at last this is the function we need to generate our video URL okay every time when we will give reload or video URL will update okay with the OTP and within another video ID yeah so we are receiving our video ID from our request.body then we are making this response uh yeah then yeah very important thing guys in our backend we need to install this egg GEOS dependency okay npm ixgos in backend in front end everywhere like come here open a new tab and npmi exeos okay this is not server
(6:19:12) we also need to do the same things in this next.js app also okay because xjs is neat right now so we make sure that you installed it perfectly then after it just write this logic obviously we make sure that you are adding the same URL okay I'm zooming it this is the URL videos cipher.
(6:19:33) com video and video it is coming from our front end and this is the OTP and TTL meanings like expertity and this is the headers and in here in this header so we make sure that you are perfectly writing these same things this authorization okay API secret and we need to give our video Cipher API secret okay then response.
(6:19:53) json and response dot data now come to our Roots folder codes root dot TS and at last sorry before this delete one here's it course router dot post this will be obviously post request and this is our root URL and each authenticated obviously need to be authenticated and generate video URL and one thing guys we don't need to authenticate it okay because for demo purpose we will show video also where user is not authenticated okay so don't take is authenticated just add like this and generate video URL just call our function yep now we need to
(6:20:35) now we need to come to our front end and we need to send this so come to our code supplier right now and from here in our course player give on create on state like video data and set video data which will be used state and where initial value OTP will be empty string playback info will be empty string okay then in here finish it and now create an use effect and inside this use effect just call xgos we make sure that again you install textures perfectly so import GEOS from egos like this then eggios Dot
(6:21:48) post now we need to add here our backend URL okay right here process dot EnV dot our next auth sorry next public API URL then Awards get video Cipher OTP okay so get video saver OTP we make sure that the root is correct yeah perfect then after it we need to send our video ID which is the main important thing so add your video URL [Music] now add here on then then we will receive on response right so then response
(6:22:57) will be our set video data and race dot data cool and every time when video URL will come here refresh this okay so this is our logic right now and from here we need to add some style okay like this is the first style and inside here right now we need to create our iframe so just add this iframe video data.
(6:23:35) otp and video editor playback info if not empty okay then this iframe SRC will be video videociper.com video then question mark OTP you can find out the same thing guys in here also I'm showing you one thing we make sure that you are writing the same thing so just click this embed okay after coming this video then click this quick embed okay then click generate embed code then click make player response now notice this is the data this is the iframe source so we can copy this and this OTP is basically our Dynamic OTP and display Back info is also Dynamic
(6:24:15) and At Last I added a new thing which is player and at the end player and this is the player ID so please don't use my player ID when you are creating on player ID you haven't played already like this is so copy this player ID and add it in here okay then style will be like this and yellow full screen row and hello encrypted media okay that's it now we can format our code so now guys one important thing click this videos copy this copy click this copy ID B make sure that you are copying your video ID otherwise this will doesn't
(6:24:56) work so let me just keep on reload and let me start it again okay to test our everything is working or not see yeah so this is our course name where we can give anything description is also right now anything price anything this is anything you can access anything level is intermediate and demo URL must be the video ID this URL need to be masked our video ID okay this ID then we can get this video from our front end from our application now upload an image like anything we can upload for now so now click next then like this and now next
(6:25:44) give this time to test and video URL will be again the ID okay video ID now next something is showing wrong guys request failed let me see why request failed okay something is wrong in here okay guys I don't know why the processing is not working okay process.nd so I just change it to like like fully static value HTTP localhost 8000 slash API slash V1 then slash get video Cipher OTP and you are sending our video ID then our this is generating on iframe inner front-end if you just come right now come to a front engine note
(6:26:31) this is the video we can play this like this okay we can play our video so notice this is not showing anything do you know why it's showing black do you know because I'm recording this video right now that's why it meanings no on can record it but when you are watching it in your device if you not open your skin record features then this will show you the video okay this is just giving me the audio but not giving me the video because it's secure that's why so now bro they are getting how much
(6:27:07) secure this application is okay how much secure their API or their video player yep so our video player is adding done so right now just simply we will finish out this player work sorry we'll finish our this uh details work just need some little bit UI like this after this give yeah codes data and Dot price and we need a discount percentage what is basically what will be like this what is this discount percentage discount percentage code stated or estimated price minus course credit price then divide it with our estimate price in 200
(6:27:55) okay for make out the first sentence then two fix zero it means this will show on the two later okay if you have any like integer value then yeah two thousand dollar two thousand dollar zero percent off then after each we have our we have our buy now button okay like this and obviously import Styles style start button okay obviously this will Design product this is just for like giving offer with like how this will look okay yeah how this will look in our application okay after creating the codes this is just on overview and then
(6:28:39) in here we need another UI okay this everything is static guys but just either like constant.price then like this yep which is not looking good just a second okay now looking good so it's taking time for updating the styling okay no problem no worries and one thing it's not looking good so let me change it to like 50 percent from big screen this will be go to 50 percent from medium screen this will go to 60 percent yeah done then after eight now we need our fourth paragraph like this okay yep now after it after this giv now created another dip
(6:29:39) like this okay full UI design yep and now guys we need to create another component okay on small component name will be ratings or uh I already created this okay yeah I'm showing you which component this is then so this is on component name is ratings I am coming back here this is in utils folder okay ratings so we will send a rating number this is uh you can oh yeah one thing I copied it from our previous projects our e-commerce one okay because similar thing in here also so this is you can also copy it with our previous project
(6:30:20) okay because same thing same thing for the copy you can see so this is the start logic okay our ratings like the icon will show like this then in here after read after this this class jio students we have on line break and H1 yep now finished his div now in here we have our course data dot map and in here give another div and first import this I check mark down icon okay from here and change it same here yep
(6:31:26) then at last here again give to line break I know guys this video is very big but please pardon me for this okay because this part is Big so we have not I have nothing to do in here and on styling yep quotes data dot description and then to line break and two Gip now let's create our last giv okay but before it check our UI good so just come here and after this div one thing guys words are pretty quick
(6:32:29) it's oops I forgot the prerequisites okay given format after this two line break we can add your prerequisites here's it okay like this now save and this is our prerequisites this is our codes details and at last we just need our on class done so in here we have only two things create codes and create buttons what we always do okay and I don't know why I can't of this paragraph tag okay I mean comment it obviously uncomment it then previous button and create course yeah come here constant brief button
(6:33:37) now handle course create and call it sorry sorry not prep button one this is this is set active active minus one and for our create course just call our handle create course done now given format and save our code and come to our website and check how looking so this is how it specifically this will look the preview page okay so I hope everything is looking good okay guys it's clicking and reload because I changed something yeah so that's it guys so uh I'm not extending this video to more big okay from the next video I will create quotes
(6:34:36) Okay uh just one thing we need to create an actions then we will create course then after that we need to like get our all courses data in our admin dashboard if right now come here then here okay live courses then that will be like on uh data grid okay material UI data great and after that we will complete this invoices this users this manage team okay everything because that will be also similar so in a single video we can like easily Implement that okay so in the next video we will do that so uh that's it guys see
(6:35:14) you on the next video foreign guys so right now we just need to start to make our create codes mutation okay so simply come back to our Redux folder then these features and inside this features folder create a new folder name will be courses like this okay and in this courses we need to create our courses API so courses oops sorry yeah courses API dot TS I don't need any slides right now okay sorry uh any yeah we don't need any slides or reducer right now because we'll just create codes in here yeah now import our API
(6:36:02) slice now export constant course API apslice dot inject in points then endpoints Builder like this and now we need to create our mutation right so create course I'm giving this name and Builder dot mutation yeah and in here in this query we need to receive our data okay which is an object now URL will be create course simply then method will be post and body will be data like this but obviously add here object
(6:37:07) okay like this then credentials which will be include obviously as constant cool done now simply come back this last and Export constant something from our courses API and inside here use create codes mutation that's it so right now we can come to our create codes component and in here this is our data so right now at the top we can import it so constant something on array then from our this use create codes mutation so import it like this yep done
(6:38:11) so in here uh this will be our create course at first create course then is loading and our like each success and errors yeah we need these three things now in here when someone will click our handle course create then we will call our create course and we will send this data that's it now let's create our use effect so we can do it here on use effect inside here if we have if or is Success true then toast dot success course created successfully okay like
(6:39:19) this and obviously we need to redirect and redirect will be imported from next navigation redirect to our all courses okay admin all courses after create course this will redirect if you have any errors then what will happen we need to find out the error okay so we need to show that it will reach error basically showing so if error then constant erode message equal to our error dot data Dot message so data is like doing this earning okay so let's do one thing if error in here if data in errors then error message will be this error
(6:40:25) only okay now guys toast Dot errors which will be irritated error message dot data Dot message just write here as any then this error will come okay erode data data Dot message yep and why this is giving error here is possibly undefined how possible okay in here first we need to add this if have error then only do this okay then this will not show any RNA also yep then if error having a data have been error then yeah cool and in here it is loading and is success and our errors okay Y is loading here guys in here basically
(6:41:31) if not is loading then only create course okay otherwise obviously uh sorry if is loading sorry sorry sorry sorry sorry if is logging is false then on the create codes otherwise suppose you are creating codes and admin are clicking multiple time then what will happen this will send multiple requests so obviously this is a bad thing we need to for for only for that problem we are using this okay if is loading is true when is loading through when we are sending request in a single time when you are sending request
(6:42:06) to our server then is loading a status to row so if is loading status true then don't send again create rules okay don't send this records request if False only then send this okay just logic now guys if we try to create course right now obviously it should work but let me check few things this is the create course and here you go data now come to our website and let's try to create a course so open our database first this is our database and this is the courses we have two courses okay we have two courses now create one like
(6:42:51) months stack element series with typescript and on descriptions suppose we can copy on lorem some lorem text like this the in these like yeah so then course price is suppose uh 9.99 okay and expected price is eighty dollar code Stacks is suppose this is fat X course level intermediate demo URL this one okay or video ID which we copied from our uh this video Cipher okay now we need to upload on thumbnail so suppose I am choosing this thumbnail like this okay now next in here we can write this and we can add the same thing for like three times for
(6:43:49) testing as you are testing right now and we can add the same things in predict widgets also yep then next in here in this name suppose we're writing here demo and intro or section name video name is Project overview video URL will be uh okay so let me do one thing guys first click this previous one click this Brave and copy our demo URL okay now we can click next click next now we can edit our video URL yeah and for video descriptions we can use this lore M text so load m and like this and this cool here will be
(6:44:40) link suppose source code and in here suppose I am writing my github.com okay then we can right now click this next and this is video okay which is showing here if I click right now you can see my video is playing but you cannot see what is actually showing in here okay because I'm right now on recording mode that's why then this is our UI perfect now hit this create okay if everything is okay in here this is the prerequisites this is what you will learn and this is the price like Pi with 99 why it's showing usable because admin
(6:45:24) cannot purchase course that's so 88 percent off now simply click this create so Json web token is expired okay because I understand right now why this is happening so let me explain this first come to our store Redux store okay in here when we are calling a refresh token this when you're clicking create guys then this is telling us Json web token is expired okay so Json map token is expired meanings or refresh token is expired okay so we need to we need to call our this refresh token which will generate a new access token so when you
(6:46:07) are calling this when we are giving on reload then we are calling this part suppose you are creating course so obviously you need like at least 10 or 20 minutes for Creative full codes because like you have 40 or 50 videos so this is taking a lot of time like 10 20 minutes or you are watching videos for the like last one year one hour and you are not giving any reload okay then what will happen obviously refresh token will expire right then what we can do obviously this error will it's it's a normal error because without
(6:46:38) giving reload our refresh token is not updating our access token so we can do one thing for fix this let's not have any fix in our front end because our front end we're not giving reload so it we cannot do anything from our function right now come to our server come to our roots and our codes root.
(6:46:59) ts in here guys when we are creating codes we are adding this is authenticated right for this is authenticated our error is coming like uh you need to refresh token is expired okay like that so we can do one thing before this is authenticated we can right now add our we can add our refresh token or what was the function name I really forget it okay so let me let me check it okay update access token this function name so before this ER authenticated again before is authenticated after not after then import this update access token now
(6:47:37) save it and magically right now this will don't give any error still guys I am didn't give any reload okay so now I am clicking create not course created successfully and this is coming our all courses which is not exist okay good but right now if you come to a database then note notice guys data is not coming in our database its meanings our course creation is not working why not working let me explain it right now okay so in this update access token we are singing a response okay so in here this object access token already
(6:48:14) sending a response so then this is authenticated authorized role upload course nothing will call because already we have on the response in this update access token so this is the issue why our course is not creating so what we need to do as our update access token like don't need as an API because this will simply update our cookies let's not have any other importance of this of this function right this is just need for update our cookies so in here guys at last we will not send any response we will call next okay then
(6:48:48) what will happen then what will happen this will come this is authenticated in this is authenticated at last we also have next so easier thing to get it we'll send this to authorized roles authorized roles will change it to our upload course now if we try to create codes it should work but something is still have wrong what's that just come to our this use create course mutation in here don't add any second bracket okay I removed it don't add any second bracket In Here Also in here and in here okay
(6:49:23) not need to change any object in here also why not need because in our server if you notice in our server in our upload codes in our upload codes we are not receiving any object we are receiving like simple data so that's why we don't need to send any object so right now if you try to create course it should work okay I'm showing you suppose create course now type something okay I'm just simply typing something okay for showing you like it's working then beginner uh sorry anything we can write for testing
(6:50:02) then let me upload an image yup done next then next now hit next now if we write now click this create then Json web token is expired so guys this problem is happening because create course here come back to our roots and in this here course root everywhere okay when we're accessing our user okay this one like gate user this one okay slash me before this is authenticated be make sure that you added this one okay very important that is our update access token okay everywhere where is is authenticated at this update
(6:51:07) access token okay if either authenticated before is authenticated add update access token then we don't need to send any request from Front End okay it will automatically work here also then this error will fix okay so be up like this so these are root done order wrote before here edit questions and obviously import it yeah then notification is also need this here also yep then at last our layout import it yep done then course here edit course edit then get course not authenticated it's authenticated so
(6:52:12) before checking update or access token yup now guys if you come here if you write now you don't need to do anything okay notice this is automatically here okay so now hit create and let me check it's painting painting it done okay so course creation done so if you right now come back to a database then note this is the last one the third one so data is also coming in winnings are everything is right now working so B make sure that you added this update access token before this all is authenticated then uh we don't need to
(6:53:09) worry about a refresh token from right now okay because every time that if the token is expired then this will automatically refresh our token okay right now I know you're thinking then if user not login for a long time then what will happen obviously when user is not using our website for a long time they're not giving any request to our server right so that's why like after 15 days if they are not logged into our website after 15 days automatically they will log out so after 15 days if they come then they need to again login okay
(6:53:39) we will show another error like please login for access this resource okay it means automatically the refresh token will expire okay access token is like expiring if the three or five minutes but refresh token will expire after a long time okay it's the logic so now our course creation features is working so from the next video we will start to implement this all courses okay we will start to implement our material UI data great so that's it guys see you on the next video and before finishing let me close this all files yep
(6:54:17) alright guys so right now we need to start our gate all course component so just come take this app and admin folder okay and in here create a new folder name will be uh all courses right or sorry not all courses this will be simply courses if you notice over this link this is slash courses okay so that's why in admin folder create a folder name will be courses inside here create a file paste.
(6:54:54) tsx then TS rfce yeah obviously add top use client yup now uh let's come back this space Dot ksx and copy dcy okay just this design then paste it import admin protect it import heading then sidebar you know why not giving cessation okay so admin Side by not giving suggestion let's install manually I mean import manually so in admin sidebar from components admin and inside for like this now save and if you right now come here if you right now click this live courses this is taking a little bit time because this is in development mode yeah that's
(6:55:58) why notice admin courses it's showing this is it's empty so right now we need to start our component so after this dashboard Hero guys simply make a new component which name will be all courses and we need to make it like we can use this component everywhere okay in our admin dashboard home pages also so that's something to make it simple component okay so all courses and one thing guys in here notice High 200 VH which is wrong this will be height screen okay and create our all courses so import all courses from dot dot slash
(6:56:42) go to all courses folder sorry go to components add Main then all courses.tsx like this now create it so ts are a c e remove this GSX from here done and save it now come this all courses so in this all courses guys first we need few things let me import it so we need these few things data Grade box button a outline icon delete out line icon and use theme so one thing guys I already installed on dependency
(6:57:44) so you need to install the new dependency okay which name will be sorry just uh split this our front-end terminal okay client and inside here install this dependency in PMI and this movie X data grid okay just this so install it I already installed it so okay I'm again doing it no problem so then after complete installation now start for work so uh basically I am right now either right now copy paste the UI design okay because obviously it's not possible to always do the UI design it will it's just wasting time
(6:58:24) okay because the prerequisitions you must need some basic UI design knowledge some basic web design knowledge so that's why uh here right now I am adding some UI first we need on Skate okay which we are upgrade uh importing from our use theme okay theme and system search theme and now we need our columns which is important so in here we will use our data grid okay which we are importing from this and in here we will add the ID title then quotes ratings codes how many purchased then course when created at then on delete button for delete course
(6:59:08) okay now save it then we also need our rows so for right now for testing okay for testing it at the first time we'll add like this then we'll change it to Dynamics okay then after it in this here right now we need to start our design so at first add here margin top 120 pixel then right now we have our box okay this is material UI box okay coming from Material mui and material okay then in here we need to right now add another box which is very big let me just add the styles so this is the Styles and let me finish
(7:00:03) this yeah so yeah here's it box Mrs margin then hijkvas this is like some Styles some classes I added some Styles in here then inside here right now we need to call our data grid so data grid and we will add this check selection box rows will be our Rose columns will be columns like this now given format then this will come multiple line and it will looks good yeah now save code and come here and note this is still still click live courses yeah here you go so how this is looking okay this is our UI design I hope it's
(7:00:50) good and we can check the light theme also it's really good probably and you can do everything from here like you can sort it you can hide any column then you can check anything from here okay and uh one thing right now we need to do and that is guys I am notice in here we need another icon which will be for editor codes okay so let's add it I forgot it so right now let's add it so yeah just copy this and before delete edit header name will be edit icon will be no delete icon right now this is your pencil icon so let me check
(7:01:41) reacting website what is the icon name yeah this one or yeah I outline that is that I have anything anything here okay we can choose this one also or this one whatever you want okay you can choose that so this is the icon notice it's not suggesting us okay let's import manually import something from our react icons and if I like this save it come here and this is still showing delete now I don't know wait let me check one thing delete not delete this is edit okay give on format oh yeah because the
(7:02:47) field name is same so change this field name in here we have one space okay in here you need to give two a space okay now check edit at last but why is it last 0.2.2 um let me keep on the result guys yeah that's it guys now probably it's looking good what do you say as per me this is not bad this is looking good okay so yeah you can select row we can do everything whatever we want yeah that's it done so you can customize the UI guys also as your wish okay whatever you want so right now let's add here Dynamic data
(7:03:31) so just go back to our Redux folder and this courses API after this create course now we need our git all courses now Builder dot query this is obviously then query will be this then in here URL will be get all courses if I'm not wrong then our method will be gate and obviously close the first one then uh don't need anybody just need credentials yep that's it now use get all course query save it and before checking let's check our again
(7:04:37) Our Roots okay if it's wrong then it will doesn't work so words that get all courses first admin gate course content this is sketch courses notice not get all courses this is gate courses yep so change it guys to get courses save it now copy this use get all courses query come here and at first just constant something from Awards use get all courses query like this and add on second bracket like this and in here we are getting some value like is loading data Eros yup
(7:05:40) so we can say one thing we can in here we can say if data have then data Dot for each element will be like anything we can say I came and inside this cut our rows add the rows at top and make it empty array right now and if this will be rows Dot push and item type which will be any and rows.
(7:06:42) push now inside here we need to add our ID then title then ratings and our purchased is item dot probably sold out I'm not sure let me check the database this is purchased okay cool so purchased and rating or ratings this is ratings good then ID title ratings early title rating purchase created it created item.created it cool in here guys just add on logic okay if is loading then show our loader
(7:07:51) otherwise show this component notice now know here okay skill later Mr Joe is doing problem but our code will work if I'm not wrong let's check one thing different reload so what if this is saying data for each no problem but let me check data is coming or not so get courses yeah okay so the problem is in here that is we need to click this courses okay I mean we need to go to this courses so if data have then data Dot courses.
(7:08:38) forage error will be gone if we give a Reload okay so something is giving error okay so this is undescribed you guys sorry now check yep now it's coming but the title is not showing so let me check why title is not showing here so title is not have it's have name so that's why so I came dot name and ratings is perfect purchased is okay also perfect created that is also not showing why not showing why not showing guys very strange this is also sending on courses from our backend okay it means something obviously wrong in our back
(7:09:24) end so let me check what's what's wrong here so uh we will fix it later no problem this earning okay like this is not showing okay no problem but check our back end what's wrong here codes controller so this is our get all courses so guys we did something wrong in our backend notice this get all courses is finding data from our okay fine course model dot find and select this hmm if cash exists okay so when you're creating courses we're not adding that in our cache this is the issue probably hmm so this is the issue
(7:10:27) that's the issue so for fix this guys let me explain one thing with you right now again okay in here we added courses in our cache okay but uh we cannot add everything in this cache okay so as of right now our application size is not that much big so that's so you can like not at this in Cache okay you can remove it from Cache no problem so then this will give response without cash okay this will go to a database and our data from our database this will give response code now if we give on reload again then
(7:11:04) notice everything will come here perfectly notice everything is coming so the mistake was in our back end okay and created at this not coming still so obviously something is wrong this is the created at spelling so created that created adhere sheet okay spelling was mistake that's why now check so this last two is coming but first one is not coming because first one don't have any created at that point but we cannot show like this right this is like when we really cannot read it so we need to do one thing
(7:11:45) we need to import on dependency okay name is format sorry name dependent system is not formed dependencies name is import format from our uh what is that name okay guys so if you didn't install it before then obviously install this okay time ago.js install this dependency then copy this format and in here we will just say format and then we will wrap it in this format what this will do this will change the data like this okay 18 hours like a one week ago and just now okay it's not have any data that's why
(7:12:27) it's showing just now and this is to purchased and ratings is all this right now zero that's why it's showing zero and guys if you wanna add like any more new Fields then you can edit like price or anything like that okay I'm not adding it but if you want then you can add it so yeah that's it so now as you are getting on all data just come back here and fix this what is this is saying okay simply add like this okay and then error will fix that's it now check no error even I mean our in
(7:13:01) our code editor no error okay it was not an error it was just confirming now it's we can see your live courses very good now simply we will make the users okay live all users which is very easy so uh now all courses is done now remove a word I mean close our server also then come here in this app folder in this admin create a new folder that is users okay admin slash users now in this users create our layout Dot TSX sorry sorry not layout paste dot TSX and inside here we can copy our discourses code okay courses space.k6 yeah now
(7:13:54) paste it in here first save everything will be same right now now click this users yeah so now we need to change these all courses to all users now we need to create it all users so copy this then admin users and all users dot TSX create it cool and in this all users we can copy our these codes all courses codes okay done save it now come here and check okay chunk failed next a0 just keep on
(7:14:59) reload yep now notice here's our component cool so now we need to go to our our this uh API folder I mean this Redux API then user okay not API user API and after it after this upload sorry update password let's create new one which will be our gate all users Builder dot query then query then in here URL will be I don't know what's the URL let me check this is the URL get users okay done then method get hand credentials
(7:16:07) and copy our this sorry add new one like use it all results query save it right now now come here paste it import it and in here we not need this all Fields okay so what we need in our users so we have our users ID we have our user name what we can give this to name we have our user let's check our database guys we scatter we have in our database for users we have name email password okay so we can add name email then roll then purchased courses length Okay so uh we can add name email then our role
(7:17:23) courses and in here we can say purchased okay I mean how many user purchased courses how many courses either purchased so purchased I know I know spelling mistake oh the co-pilot suggestion is sometimes very disgusting okay purchased purchased courses they not need any edit but need on delete yep so name emails role and courses copy this name email Let's Roll and our courses item.courses dot length like this and
(7:18:38) one important thing that is this created ad okay so we can copy or this one and we can say created add and header will be joined at and this is also format item dot created great and in here data dot users dot forage now save and come here and check not code says okay yeah now check yep we have our data but we don't have image role anything so let me check what's wrong here then yeah this this will be email this will be role cool this name is taking lot of space so we need to change it to 0.
(7:19:35) 5 yep looking better right and one thing we can add guys that is after this delete button we can add another one another icon hidden name will be email okay and we can add here our email icon BCS okay so this will simply send email to our user okay it means suppose we want to send email to our user Okay then if we click here then this will automatically redirect to our mail and this will fail the mail also okay so yep this is the UI I hope guys it's looking good I hope and the ID is still looking very big you know why is 0.5 this net point three
(7:20:37) it's looking big yeah now it's looking good okay great so our users is done now oh let's make the function in the case I forgot totally for make the functions which is I will do one by one okay like when I'll make this delete Live courses also okay similar thing that's why so in here if you can click this button right now this will be not any button this will be next sorry link or sorry sorry not link this will be totally ank or rape okay and here will be ref will be male to mail to params.row dot email like this
(7:21:34) okay what is this meaning let me explain so for sip then I'm explaining it so this is the user and if you write now hover it the note mail to these are made then if you write now hover at the bottom gmail.com this is the email that's why so if you write now click here this will be automatically go to the email okay so I am using another mail services so that's why it's going to write services but for your case this will be automatically redirected you to your Gmail okay and now our live courses is done our
(7:22:09) users is done so one thing skill we need guys and that is our invoices right otherwise manage team is also important yeah so many scheme will be simply okay let's do one thing totally copy this now make our many scheme because that will be similar admin and team okay let's right now make the manual scheme this is totally similar kind of you can use uh kind of similar component okay so in this admin create a new folder name will be team inside here create our page Dot qsx and we can copy our this users and in here we can send this
(7:23:00) cool save it if you right now click this minus team then here you go so in manage stream basically guys we don't need this all users we need only those users who are admin or moderate or anything like that okay so simply given format and come this all users okay we are using same component still here we can do one thing we can send on props in this all users okay like is scheme true okay so copy this esteem come back this all users receive it is team type is Boolean okay remove this link and so this is our eyes is item sorry is
(7:23:59) team why this is neat so right now we'll just add some Logics okay so add here first if C then in here each team so if each team is true if each Kim is true then cut this okay guys not the second bracket without the second bracket cut it like this else like this in here if steam is true then constant new data will be
(7:25:03) data and data dot users.filter okay like this then item dot role will be admin okay because right now we have on the admin in our admin dashboard okay so we want like what that means that will become here so that's why new data Now new data and new data users like this now save and check okay so you not need new data dot users then simply new data now save so it's giving on reload yeah notice it's only showing me okay why it's only showing me because I am the admin that's why so for admin in
(7:25:56) here we need an another button okay like add new member okay in our website so for that's why we can do one thing before this box in here we can create on giv okay so like Tableau full Flex end like this and in here we can add our button style start button okay and inside this we will say add new member okay this is looking very big it's not it's common in here add width only um 80 pixel okay it's looking very small make it 150
(7:27:07) 250 yeah and this is flex in but not going okay because we need to make it Flex now sorry Flex in class is not exist Justified and make it 220 . cool if you want to change this anything then you can change this okay the UI yep now this is our add new member if you need to click here then this will open a new pop-up okay and background colors is okay or not I don't know what do you think guys we can change this to Black right and this is only four dark thin and we can add on white border for direct theme
(7:28:18) yup now check little bit code not that much code we need to change this color like a little bit down um kind of better and this dark BG is black change it to a little bit down color kind of okay guys so I just changed the color okay like this probably it's looking more good okay and now in here height will be a little bit down 35 pixel and an important otherwise it doesn't work yeah looking good so uh you can also update your design as per your wish okay no problem now simply given format and in here if anyone click this given
(7:29:18) then on click on sketch at first okay because we need to like add new members so use state active and set active initial value will be false so copy this set active and set active will be thank you come now if you right now click here then our active status is changing okay good so then we will make a pop-up in here okay okay guys so from our next video we will start to implement this feature when we will click add new member this will open the pop-up and we will simply add new members in our admin dashboard okay so
(7:30:12) that's it guys see you in the next video all right guys so our uh this delayed user and this add new member everything is working but it's GitHub on small issue and that is when we are adding a new member as admin or a user after clicking submit it's working right users will update to successfully but instantly it's not showing here it means the state is not updating so what we need to do in here if we think about our Redux I mean I'm talking about Redux toolkit state right and when we are updating
(7:30:50) something then we need to reface that state or we need to update that state right this is a Redux toolkit sorry yeah Redux toolkit Style but one good thing is in our Arctic query you don't need to do this lot of hard work in artificial this process is very easy in article query what we need to do just come to our code and in here what we need to update first we need to understand so when we are adding a new member first we are getting our user information from this get all widgets query right it means when we're
(7:31:21) updating our anything we are updating user role or we are updating we are deleting any users then we need to refetch this so I already explained it at the first or for this series that archic Equity basically uh worked with cache data okay so right now our Tech Equity have this user's cached data so that's the way you are updating something it's not updating because the cache is not updating so what we can do in here we can simply remove the cached then what will happen when cached will remove uh rtk query will automatically
(7:31:53) give and refetch will give another refresh then obviously this data will also instantly update so for this we have just one line in here we need to write in article query that is refetch sorry sorry not here not here I'm sorry not mutation this will be in this engage all the just query okay here refetch on Mount or argument change okay this need to be true must add it true right now from here we need another thing which is refetch okay it's loading data and refuge when we are updating our user's role
(7:32:38) just called a refuge when we are deleting our user just call the Refuge right now if we Simply Save Our code we don't need to do anything just check okay it's not updating okay it's updating okay instantly it's updating so right now suppose we have admin and admin so suppose I am changing this program user again okay just enter the email first let me copy this full email now from here now change it user and hit submit not instantly it's removing from here instant even more faster than our Redux
(7:33:14) toolkit right it's very fast right now I am again adding it to admin like this not instantly it's added user wrote a user will updated successfully perfectly right now click this users suppose right now will not delete this user so just click here press cancel delete cancel now hit delete and boom instantly it's deleting also done so all features is perfectly working what we expect now what we need to do we need to make some other features other features is like come disk live courses and right now we need to make our course
(7:33:53) delete features Okay so just start to make this so course delete features in here when we will click this delete course this button we need few things totally similar with our users okay so you can open users right side like this now we can copy this state this open and set open okay in here then after it obviously import use state then in here when we're clicking this button on click will be this and we don't have set user ID we need right now our course ID for delete our course ID and set course ID which initial value will be
(7:34:58) empty string now copy our set course ID and add it in here and request dot programs params.id perfect save it now when we are clicking this is first opening our pop-up so let's add this pop-up in here pop-up means model okay so we can come here or bottom and we can like copy this last one open one now paste it in here import our model from we material import this style import these styles then our handle delete what we need to create and yep that's it so copy this handle delete compact is top let's make this handle delete
(7:35:54) and in here for now simply make on Console log okay like anything so this is are you sure you wanna delete this course like this now suppose click here yeah are you sure you're gonna do the discourse cancel or delete so let's make our delayed mutations right now so click here click redx folder click features then courses API after this get all courses this will be delete course so Builder dot mutation obviously query will be on unique query okay because we need delete course and our ID what we are receiving
(7:36:54) from here method will be delete and credentials will be like this done so copy this delete course uh sorry first export it so use delete course mutation now we can copy out this intellect course mutation now come back to our all courses when you are clicking first import it at top mutation and in here this will be in third bracket and here will be first delete codes secondly each success and third error that's it done so error is doing problem so we can say erode delete okay yeah and one thing guys I don't know why I added this gate
(7:37:59) all codes error okay that's not neat so you can remove that error and then you can keep it like error perfect now in here we can create a new effect and inside here if we have is success then toast Dot success codes deleted successfully trying to remove this third and in here obviously add is success and our errors that's it and in here if you have error then do this just do this and this will be errors yup so if error then data in error then
(7:39:04) constant error message erased any and closed in your message or data Dot message perfect save it right now and if success then we need to refetch Okay so refetch and we need to add this refetch in our here where this get all courses refetch and in here refetch on Mount argument chains true done so right now we can test it guys okay so delete course copy that that course and add here on asynchronous I have it delete course and we need to send out ID so ID is basically our course ID and send the ID done so simply given format
(7:40:09) and right now remove this all users.net now come here and try to delete this course okay click and hit delete codes deleted successfully codes deleted even that's removed also but this pop-up is not really deleted okay I mean not stopped so in here just close our pop-up set open will be false do it at first yeah so guys that's it now updating will obviously work so our course delete features is also working okay now what we need to do we need to make right now our discord's edit features which is also kind of big so let's start
(7:40:52) to make this if you can click here then what will happen this edit we can make it link okay so copy this link paste it in here on href which will be slash admin slash edit course and we must need to send here our course ID okay as the params then slash rows Dot params.ies not rows guys mistake paramps dot row dot ID okay like this now if we save and if we come here just hover it notice is showing a link and right now if we click here this will be go to our edit code so what we need to make right now so format it like this and come here
(7:41:59) in this admin and then this is admin edit course okay so make on folder name will be edit course inside this folder make another folder which will be IG and triple bracket okay third bracket inside here create our page dot TSX now if we add here our like default like typescript now if we click the note this will become to the edit course page okay now in here what we always do this edit codes and create codes this two component will be kind of total decimeter okay just instead of static data in our create codes in edit course
(7:42:48) we will add Dynamic data and this is the difference otherwise everything will be similar okay save it done so just do it and yeah here you go so this is our edit course okay so in edit course basically and edit course this will not show like this okay edit course will be fill the value like if you click here then this will change the value so let's do one thing that is inside this create course hmm let's create a new component okay guys create courses big component so we can
(7:43:53) create a new component and we can like add some new code little bit okay name will be edit course component name so import edit codes from our components admin codes and edit course dot TSX now create it remove this qsx done save and right now we'll one thing that is we'll copy our full create course will come this edit codes and we'll paste it in here and instead of create course we will change it to edit course and edit course although it's looking like everything is same yeah everything is same
(7:44:55) but right now we will change it so uh first in here this course info is empty this benefits is empty okay everything is empty this value okay but this name we need our data first okay okay guys first we need to find out our data so let's do one thing we can do few things in here for our data we have two way first we need to take our ID okay not like this like this from use params and the stylish guys in here simply we need to receive our programs okay like this and this is not need like this and here will be
(7:45:46) programs dot ID okay not need to call anything like this and this is asking for types because as you are using right now typescript so we can add like this for now okay if anything we'll change it later so yeah right now we have our ID so right now if you console log this guys come to Google Chrome and check it forums.
(7:46:15) id this is saying undefined okay okay sorry guys I did something mistake and the mistake is we need to do the same thing okay this same thing cut these props and add here like props and props what was like default one okay I did like little quick mistake just come to this page okay because we need to do this in this page not in our uh component obviously then it will doesn't work now if we right now add our constant ID equal to params dot IG like this now this will obviously give on value I'm showing you suppose
(7:46:57) same case for edit course come to our edit course in this props receive this ID which type will be string and now we save it in here now if we console log our ID we will find out our ID value save it now come here and note okay it's giving reload note guys it is giving our ID in here okay this is the ID or course ID so we have two ways I said you already that we have two way for uh getting the data okay first way is equals right now first way is we can filter sorry we can find from our all courses right now okay which is like
(7:48:02) don't need to do an API request like constant something if we check out this all courses we'll find out it this okay just add it yeah and inside here you don't this is loading or anything like that oh yeah when it is loading and we don't need this create course now and import this use get all query and if it's success for now comment it okay this easy way not neat as well right now not implementing the data that's why and in here guys uh okay as we are updating our courses so okay yeah we can add like this okay then this
(7:48:58) will refresh the data so now what we need to do we have our data right so constant codes data equal to data and data dot find I and I dot underscore ID equal to our ID now if you console log this code's data okay we already have a code sticker probably somewhere yeah this function and this okay so we can say edit codes data now if we save it guys one error still okay create course is not a gist yeah we can remove this now
(7:50:04) so come here right now okay guys we need to say data.court says dot find okay it was a mistake now check yep now if you check our console notice this is our edit course data how fast right we don't need to fetch anything so guys right now we need to add one use effect okay after this act even set active okay Vionic use effect because we will simply say this all data value okay initially our data okay like this so this is the use effect if edit codes data Hab then set course info we are just checking the name description price estimated price
(7:50:57) tax level demo URL thumbnail.url okay like this if you want then you can add like optional change which is optional because sometimes it can be like undefined then set benefits sets the data array pretty quickly similar content data is similar okay right now if you come to our website if you right now click any course like this one notice this is giving us the data dynamically and right now thinking why the images is missing in here the images is missing in here because this course probably don't have any thumbnail okay
(7:51:28) we created it with our Postman so that's why it's not have any thumbnail and one thing guys I just noticed it's really a funny and weird mistake and that is what we created our content from here okay create course it's not adding the codes data when you are creating course where uploading content but that's not coming in this course data why not coming let's check okay it's a very simple mistake kind of like variable name mistake in here we're creating course content data okay course content data and from
(7:52:03) here we're sending course content but unfortunately in our database this is not course content this is course data so we must need to send here codes data not course content okay like this in here in this createcodes.tsx line number 100 just change it to course data okay in this before sending it just creating the course okay that's it now my suggestion is as like this is our Postman data and some like missing data so my suggestion is just delete these two courses right now okay let's create again from scratch so it's empty right
(7:52:39) now now create course so course description in here we can add lot M text like this this and give some space yeah price is like how much twenty dollar estimated price like 90 dollar course tax just add some text course level is intermediate and this is not demo URL and I'm in the video ID okay and let's upload on thumbnails so suppose I'm uploading the eCommerce one thumbnail okay this one now hit next in here add this and let me copy it and add it like three times in here two times now hit next Now video here give this
(7:53:32) name to demo and intro or anything okay section name and this is what we can say course overview or first video okay video URL will be you need to copy it from over here now next next and paste a video URL description this yup Source link so here suppose source code and links will be https then github.
(7:54:16) com slash like my GitHub account okay you can write anything okay then hit next and this is showing the video okay I cannot play it because this will show dark okay because it's protected that's fine and now we can create code so create and let's wait so course created successfully and after creating codes I don't know why I added admin and all courses this is a wrong URL okay so this will be admin where's the all courses sorry create course create course is in here come this component and when we are creating codes redirect it to our admin
(7:54:59) and courses okay not all courses yep now this is in admin courses now if we click this edit icon now we can edit it so click this edit icon it will like take little time yeah here you go and this is a thumbnail everything is coming here perfectly notice how beautiful it's looking and this is the course name price everything here now you can click next notice the all prerequisites already here right now you can add a new suppose I'm adding 3D okay it was amazing like new fields and now click next something is wrong item links.map
(7:55:46) okay let me check guys reload and codes data this is the object so links which is an array inside object we have this links and what is in here okay it's perfect I don't know okay let me let me check as database obviously something strong kind of that okay like naming mistake so yeah then this is links and inside this we have an array and we have title and URL so links dot map hmm no issue come here in our edit course and this is the content data codes data okay edit codes dot codes data now in here this is our course content
(7:56:47) so course content data perfect [Music] now guys come to our this course content component and let's check what's going on here and the links is in here so yep here's the account.links.map okay so let's do one thing for now simply comment it for now and let's console log our item okay what we are receiving not item what we are receiving we are receiving course content data okay so console log this and check what we are getting actually why it's giving error this is called debugging you you also need to do
(7:57:44) this type of same debugging okay now check what's wrong in here now okay notice no error anywhere and video URL is missing okay so something something is obviously wrong okay we'll check it don't worry now click check this console not click this is an array hmm where we have this and what's the links it's missing guys why it's missing pretty strange right okay I got it right now if we notice one thing well we are sending request just watch it
(7:58:47) and one thing guys one thing I do know you did it or not in here this refresh token right now not need to like send request to a refresh token okay refresh token is like not need because this is totally working on backends okay so don't interest any request from our front-end uh remove the refresh token okay function like this okay so call the like just load user right now not need refresh token yeah so uh in here in this features courses and courses API when we are getting codes this is get courses okay this is get all courses
(7:59:27) right now if you go to our back end roots this is the gate code says this is not for admin one okay this is like uh this is we are removing we are like select these few things like video URL code suggestion codes change links nothing will come right now okay so what we need to do probably we created something for admin I don't know I probably created something for admin let me check this yeah get all courses for admin but what is this why all users oh my goodness it's really it's really very weird why why we gave this name to
(8:00:13) get all users change it to get all courses get admin courses okay because all codes is already here get admin all courses copy this name guys now come here and in here course router dot get admin all courses then obviously this need to be first is authenticated secondly most important authorized roles need to be admin only admin can get all codes data okay yeah now we form it and from here this is not looking good you can get admin courses okay or all courses you can write anything whatever you want okay API name just your URL and right now
(8:01:14) come to our this course API okay and change it to get admin courses okay now given reload everything will fix okay because right now we will receive the all data and just wait yup notice so one thing I want to show you right now simply click this next click next now open this and check we have our everything this is the video URL video section title links question everything whatever you want okay so uh just right now we can uncomment our these links okay these links we obviously in the previous one but that will be for
(8:02:05) our home page okay that get all courses for our home page and these get all courses for our admin dashboard not similar obviously now if we check the links is here also okay you can add link you can add new content if you want okay so suppose I'm like adding a new content video URL will be uh what we can say folder setup okay just it then I'm adding same video because it says for testing and suppose same description also source code I am again adding and I'm adding this same URL here okay now if you right now hit next
(8:02:51) I hope it should work yeah it's working so everything is perfect in here and notice right now it's showing one two three one two three okay right now guys the main important thing is let's check our course data okay if it's okay perfectly or not so cut this code State obviously add it in here before this and let me check guys this is Angel submit yep okay so save it and let me check is the everything is correct or not if anything is wrong then that you can check it recheck it yeah so this is our data
(8:03:45) this is the benefits which is three skill hmm and content no no sorry this is the new content notice new course content here folder setup perfect and this is the last one and this is the prerequisites let me check one thing previous previous yeah three and two if you want to create new one then obviously it should come I believe because we're updating State now click next now check guys yep that's it perfect now we need to Simply when you just click this edit or create or like edit okay we can change it we can send
(8:04:38) one simple thing like each edit two okay in this course options uh sorry not course option we need to send it in this course preview okay is edit true and inside this course preview come back to our course preview component how's this guy just kill me how this edit component it's really very interesting right this component I am really enjoying this one because it's really very interesting interesting component right now we are just playing with our components right so each edit this is obviously Boolean
(8:05:14) now we'll write on logic like if is 88 then show these two update course not edit codes update course or otherwise idiot or you can say update simply okay because this is create it will it will looks good now save it and from here not make this use create order mutation not only just toast not net is redirect or we need those redirected both yeah yeah we need this word don't translate this okay because in this use effect we need this yeah and refetch let's see if it's not or not okay so right now if
(8:06:00) you click this update then this will update our uh course okay so first uh we need to do one thing that is we need to come back to our Redux this courses API and we need to make our edit course one so copy this and in here edit course edit course and probably you need to send the ID if I'm not wrong and put request obviously and in here we need to um one thing guys let me check how our edit course is working so edit course yeah here is it we need to send the course ID okay and in body we need to send this okay hmm
(8:06:50) so in here edit codes we will receive two thing ID and data in here edit course and in your body we need to Center data now let's copy this sorry in here first add our edit use edit course mutation cool save it simply copy this and in this edit course right now import it at first sorry now like this edit course mutation and inside here this is obviously array sign because we need our edit course in here then data which success and errors just two things yep so uh in here guys we not need is
(8:07:54) loading or anything like that in this edit course when we are clicking this on submit okay handle submit sorry this handle codes create I'm not changing the name if you want then you can change the name if you want to change the name then you need to like send the other name also okay so I'm not changing it because we are using Sim component so that's why I'm not changing so I wait and edit codes and send this data that's it very easy and in this use effect right now uncomment it the game will start right now so if
(8:08:29) success then course updated successfully and admin all courses that's it anything error then like that save it now click next click next okay so the data totally gone so let's create new okay I mean add new little bit yep now next now click add new content it is gone because we change some code okay that's why the state again update it so in here we can say update or sorry seeking environment I really don't know what you can write here then video URL will be this one or you can like update new video in your
(8:09:29) video Cipher and you can copy that ID and you can paste it in here source code that's it next now here you go now click update type string at path underscore D for model okay okay sorry sorry something is wrong guys and that wrong is in here we are not sending the correct thing we're only sending the data but we must need to send data and ID okay ID will be our we can say edit codes Dot equals data and underscore ID okay like this and data is our data now save
(8:10:35) and now hit update let's check missing required parameter public ID okay hmm I got the issue why this is happening because we are oh my goodness okay second time it's changing the ID yeah but the problem is guys let me explain what's the problem right now happening it's not have like any uh new updated data so that's why it's saying missing required parameter file okay it's not able to update the Avatar okay so we need to write a very awesome logic in our backend okay and guys I already uh added it in offline
(8:11:20) okay because like as an offline so this is a very simple function okay I mean in our function edit course function I just changed something little bit something okay don't worry just this like few lines in here constant data equal triggers dot the thumbnail equal to will be this then quotes it is now we need to make an uh variable quotes ID okay which is new and if thumbnail starts with not start with https only then destroy our previous uh Avatar okay previous thumbnail then secondly delete uh sorry upload on new thumbnail okay and set
(8:11:55) that value and if start with https it means that's not updating then keep the data thumbnail data dot thumbnail will be our default image okay like the previous one don't need to update anything so this is the logic and right now for before testing I am suggesting you one thing and that is before testing obviously delete the course okay I mean delete your course previous courses because we already did like some wrong things with this so create a new course create a fresh course then edit codes everything will work okay everything
(8:12:26) will work so I'm showing you right now suppose I am coming here and uploading this uh I'm changing this what is this called thumbnail okay so suppose I'm adding this image okay or suppose I'm choosing a new thumbnail yeah suppose this one now hit next now next I'm not updating anything just the thumbnail Now update it just note this is taking little time and course updated successfully cool and you can also add on loader also okay if you want now in our thumbnail note the data is updated and right now if I don't update
(8:13:02) anything I just if I update like just a price like 20 dollar and next next next and update then code separated successfully instantly because it's not uploading any images so that's an instantly working now Note Everything is similar okay but the price is just changed to 20. okay so our codes edit features is also perfectly and perfectly working if not working any single thing okay then you can ask a question or I am suggesting you one thing okay please don't ask like weird question okay like unusual question then it will be hard
(8:13:38) for me to reply to all just first check the code okay check the source code and compare it with your code I believe something wrong in your code obviously because in here everything is working so obviously your end will also work everything perfectly okay so just check the front end then check your Redux State okay I mean uh rtk query API you're sending everything correctly or not then this this uh function and this edit codes also as well okay check the every single line then if not working then you can ask
(8:14:09) question okay so right now everything is done guys our delete codes edit codes create course then uh delete user then we can also like add our new member new user in your website admin dashboard and our everything is almost done right this minus team then this live course has create course users invoices is not available right now so that's one not done so our this section is done our content section is done content and controllers and data is also done we can say now we will start this analytics sorry not
(8:14:43) analytics now we will start this customization okay it's a very easy things and we'll complete it in like in a single video so from the next video we'll implement this we'll start to make this hero FAQ and categories from our hero we will update our website Banner homepage Banner from the FAQ we will update our FAQ new question new answer and from categories we can like add new categories for the course okay and one thing okay I just noticed are you enjoyed any categories in create codes okay we can
(8:15:20) add it later okay like when we will add here categories then we will edit okay and let me check one thing little bit one thing single come to our server model course model and you know course model is also missing okay don't worry guys we'll add it don't worry in quotes model it's missing so that's why I also mistake in like front end okay don't worry just add a single string and we'll add it in our codes creation options also okay because it's not it's not like mandatory kind of that
(8:16:06) okay but we'll add it don't worry okay we'll do this from the next video just we need to translate to your full lines of code okay in here we need to edit in our front end we need to create a label and select option then that's it everything will be similar otherwise so that's it guys uh see you in the next video foreign guys so right now we just need to start our this customization when we'll click this hero then this will come to our uh website Banner customize options okay so let's create
(8:16:41) it come back this admin folder and in this admin folder create a new folder name will be hero in this folder create.page.tsx sorry TSX and t s r a c e like this and now click this hero yep there you go now in here guys I'm copying our ey design okay like this is the UI design we need to create a new component name will be edit hero okay otherwise like everything is similar in here admin sidebar dashboard hero and edit hero what we need to create right now so let's create our this component edit hero from our admin customizations then
(8:17:35) they say digital.tsx okay in this components folder admin folder and customization folder new folder created and this is the file the edit0.tsx and inside this editor TSX we need to start our editing work so first let me remove this tesx save it and if right now come here then note yep looking good now in this Edge hero first we need our few state in here okay like three Escape at first and here we need obviously import our use State image State image title say title and subtitle okay so first guys what we need so first
(8:18:20) we need our Banner data then we can update it right without having the data we cannot update our Banner so as we didn't create our Banner at the first time when we created our API okay we didn't create our Banner so right now we need to create our Banner so just go to our Postman okay like here and uh in here guys just go to this root okay create layout only for admin type will be banner and this is the image I know this image is very big so how can you get this image let me let me explain it to you like how
(8:18:56) you you can also get this image so suppose I am right now I'm right now I'm deleting this image okay so suppose I'm check targeting this full URL from here like ending in here this is a base 64 Valley base 64 value so in this image we need to add on basic different value so just come this create codes okay and from here just click this drag and drop your thumbnail okay so basically I want like the same thumbnail what we created like whatever LMS okay because I like the UI so that's why I'm
(8:19:38) in the image so I am choosing this one so client then public assets and this is the banner image so let's upload it upload it and now guys give on right click and click this open image in new tab okay and now copy this base64 value okay now enter this base64 value in here like this done you don't need to do anything in your title on subtitle must and one type Banner okay and in backing in API I changed few thing let me show you this so this is our backend API okay so create layout constant type this is
(8:20:29) coming from request.body so in here I just changed something please check the code or check the source code if you're from bitcoinme didn't uh this is how I'm explaining what I changed uh so this is image title subtitle was receiving okay then we are creating it and I just added this new line Banner okay because this is a new object in this create layout I just added this line otherwise everything is same in here okay now come here and create our Banner okay now hit send so this is saying please login to access
(8:21:05) this resource yeah because we need to log in first so uh login user and let me log in login login done now we can create on layout so it's sending request obviously it will take like little bit time yeah layout created successfully so open our database right now and here you go this is the banner this is the banner image and title subtitle everything is in here so our balance creation is done so our Postman work is right now done we can close this tab right now okay so simply leave this now come here and now come this hero
(8:21:43) now from here close this and this edit hero just add it as a functional component and receive the props then in here and we need to import this FC yeah and in here guys now we need to get our uh we need to right now get our hero data right the banner data so come this Redux folder and inside this Redux folder inside this features folder let's create a new folder name will be our layout inside this layout let's create our layout API dot TS like this and what you always do simply at first we need to import our
(8:22:36) API slice from our API slides like this now export constant layout API equal to API slice dot inject in points in here we need to say our we need to add our endpoints then Builder and now we need to create our actions or like what yeah this is called get hero data okay we are giving this name to like get hero data now Builder dot query and in here we need query which writing like empty okay type sorry not empty this is need one parameter what is our type okay type means this will receive this will receive the type which
(8:23:35) type of data we need okay and the URL will be get layout then slash our type okay then method will be get credentials will be include as constant yeah then uh in here we can give a comma and at last we can export hours use engage is your data query cool from layout API so now let me show you how this gate layout is working in our backend okay so if you go to this layout or root gate layout slash this is called params okay type so I added this probably in offline so just
(8:24:38) check it this obviously edits this this is called column probably I don't know then type okay layout router case just add this and in this function type is coming from request.params not request.body okay then layout we are finding it and you are sending it very simple now if we right now save it and if you right now copy out this use get hero data query and if we come here just add here our data and paste it and import it from our Redux features layout API and in here we need to add the value so with your band
(8:25:26) Banner okay so you are sending the parameters and we also need a refet on Mount argument change to okay because sometimes we need to refresh our data okay we will update it in that time so save it right now and we have right now our data okay so in here we will say if we have our data then then in here set title will be data layout Banner dot title same for subtitle also like this and same for our Banner also okay but layout Banner image and you really like fun question mark our optional chain then
(8:26:32) dot URL okay because you're using Cloud energy so image.url yeah that's it for now it's enough so now in here we need to add on fragment yeah now we need to create on div while class will be w ool and some like other classes like this then in here we need another class which is I am copying it totally from our hero Banner okay because kind of similar that's why we are implementing same features in here and another UI design so I am just adding the UI design okay one by one like this and we need to
(8:27:19) this create this handle update and this icon so let's import this icon and this is the class this is image I am using IMG not image tag from sorry image stack not using IMG from next image okay because some things need in here which is not possible in next image step that's why so handle image update let's create this like this and a parameter which will be any then that's it now Simply Save It and notice our Imaging here it means we are getting our Dynamic data perfectly okay this is not static data this is for
(8:28:06) the dynamic data if you open it no this is our cloud in our image URL okay so we are getting your Dynamic data now we need our another div after this okay after this report DFE this is here this is also like very simple styling so let me show you this is on kxt okay this is on class and this text area which value is Title One change is this and we are adding four rows okay and let me import these styles from our styles and this handle edit we need to make it in here I added a logic like if you don't update anything okay like you are
(8:28:45) not updating anything and you're clicking like saver like update button then this will don't allow you for update anything okay this is a logic like if the banner title is similar with the previous one okay without data then not similar okay this is not not sign not similar then just call this angle edit otherwise not call any function and if not same then cursor pointer otherwise cursor not allowed okay this is just from logic probably you are getting the logic it's a very like common UI logic okay now save and let me come here and
(8:29:21) show you okay so some device mistake so guys I did something uh UI mistaking here okay so let me just uh add this again okay I mean let me just copy my UI code okay at some given mistake okay I just I really don't have time like to find out what's the dev mistake so same thing everything is same but the mistake is not right now here yeah now notice it's looking perfect so just check the styling okay I totally copied it from our Banner component okay sorry hero component and I just added like Dynamic value that's it otherwise
(8:29:58) everything is in similar in here this is the image and this is handle update and on icon this is for our label okay this is on label and this is for input so right now if we click here we can upload a new a new Avatar we can change it like suppose I'm changing new thing and note when same it's not giving green it's not allowing us to like update it so suppose here right I am updating like 20K plus students notice now we can update it okay and this is like my grammarly suggestion okay students students okay no problem we can like add
(8:30:37) anything whatever we want so now we need to make out this edit feature so this edit features is like something we need to I need to show you right now in back end okay because I changed a little bit in backend and uh it it was like some videos with mistake of myself that's why like I updated it so I'm showing you what I updated in this function just this function edit layout function okay here's this is so suppose I am not updating our Avatar not Avatar suppose so suppose I'm not updating this banner
(8:31:12) and I'm clicking this save okay so it means this this state which state we are sending from here this image this is Cloud in the image so it's not sending any group it's not sending any object okay object meaning suppose in here this is Banner object it's not sending this image object public ID and URL it's just sending a URL so obviously if we right now uh without any verification if we save this then this object will update to simple string simply URL will come here then obviously you cannot delete
(8:31:46) the image next time for deleting image from cloudinary we are adding this public ID we are adding this public ID for finding out the image from our cloudinary okay so that's why I added this logic if image starts with https its means it's not updated one it's the previous one so then this Banner data Banner determinings we are searching it with our banners then otherwise upload.
(8:32:15) upload this image this folder is name is this okay now in here Banner type is this image is this and it is like this it starts with https then this one other is this one just some logic very very beginner type of logic like if image start with https then Banner data Banner determinings or previous data dot panel dot image.
(8:32:37) public ID okay if the image is not updated then if image is updated then add this new public ID okay it means new uploaded image ID that's it otherwise in here everything is similar this FAQ then categories everything is similar just change in here in this uh banners okay the problem was in the Spanish now we need to make our edit features okay so simply call our root right now and this will obviously believe it will start to work so come to this Redux folder and in this features folder in this layout API we need to make another one which will for
(8:33:18) our edit zero data okay so yeah here's it not hero data edit layout now Builder dot mutation this is obviously mutation because put request we need to send and now in here we need lot of things like we need Type image because we'll use this same thing everywhere that's why then our subtitle our subtitle our categories okay everything will be here and inside here we need to send our URL which is basically our edit your edit layout okay not URL yeah like this simple then body inside this body we need to send or type
(8:34:19) image title subtitle FAQ and categories everything okay then method is put method and credentials obviously we need to edit because it's it's authenticated that's why when you say in that token uh sorry cookies then in here add on second palette like this yep done so we can give on format yeah and in here use edit layout mutation so copy this save this right now come here and handle edit so in here make it on asynchronous function have it and first comment it and in here import our this mutation and we are receiving sorry we need to
(8:35:31) call this edit layout then data not need probably data because we don't need data we need is loading is success and errors this treating okay and in here just write on logic like if is success then our toast dot success hero updated successfully and one thing guys as we are updating our data from here so don't need to refetch it okay because we're already updating years right we are updating this state so we don't need to like refresh it so you can remove this line okay we don't need to replace features in
(8:36:35) here so toast.success if error then we need to do the same things what we always do for our error like this okay now in here add our is success and our Heroes done and in here in this handle update this is for our image update okay so notice my copilot already suggesting me some code okay but something wrong in this code so let me write it with my hand so e Dot Target dot files and in here add an optional chain okay dot like this obviously add this dot okay now if file
(8:37:41) then create on reader because we need our base64 value so new file reader and reader dot on load if ready state is 2 then set image will be e dot result uh one thing guys just add here on parameter name will be e and type is any and set image will be e Dot Target dot result done and after it we can call our readers dot read as data URL and file done so now we can easily update our anything whatever we want so update edit layout
(8:38:45) type we need to mask at the same type which type is Banner and now we need to send our image title and subtitle that's it now do one format now save our code so right now if we come here and if you right now change it to like 20K plus now hit save hero updated successfully and give on reload what is 20K but why we are giving reload let's do one thing um okay yep I caught it what's the problem here okay let's do one thing guys after uh successfully getting data just call our refetch don't remove it okay
(8:39:42) because it's not updating that perfectly so call Refuge like this from here and refetch and refates on Mount argument argument chains make it true that's it so suppose right now if we update it to like 30k plus 10 note instantly updating but it's showing two times because of refetching it that's why and we can update the images also if you want but I'm not like don't want to update the image because it's looking good to me if an updated then you can update it okay so our this hero work is done so right
(8:40:26) now we need to start this FAQ which is also very easy so just close this and this one now uh in this admin create a new folder name will be FAQ and create a new file paste.tsx tsrfce and in here I am copying the all chords again look at the UI design I'm going to create this edit FAQ otherwise everything is similar with our this one okay everything is similar you can copy this and you can like instead of edit hero you can add this edit FAQ okay otherwise same everything now create our edit FAQ component which
(8:41:05) is in our admin customization and same folder okay and in years just create the simple typescript default here now if we click this FAQ then it's coming to our FAQ page and in this edit FAQ which is also very easy okay so first we need our FAQ data right first we need to fetch our FAQ data so how we can do that simply add this use hero get data query what we are always doing okay simply import it like this now we are sending our type to FAQ so it means this will give us our FAQ data okay this is sending through params
(8:41:50) so now data if you write now console log data if you check our console the note this is our layout FAQ data okay perfect so uh then in here we need guys one state okay like this uh question and set questions which initial value the empty string and which type is any and add any array okay now create on use effect hook and in here if data then have then set question will be our data dot layout dot FAQ okay if each success okay each success is not available right now okay so this is enough for now so data at dependency
(8:42:48) then we need basically few functions okay what we will do after some time not now guys come this here in this edit FAQ and let me just copy the like the UI part okay the UI design okay because it's very messy yeah here we go so questions dot map and because obviously this is an area so right now we need to Loop it right and toggle question what we need to create this function so import this Styles first and this one handle question chains we need to create it and this icon import this this one also then delete icon
(8:43:37) this icon also and now we need to create these few functions so first let me show you the full code again what is this so this is a new cache probably you are watching it like for first time okay I also didn't watch this before I just copied the UI like from my website okay this FAQ design part okay then I added like the dynamic features in here so question start map Q which type will be any okay it's just parameter then key is this and class name if Q dot underscore ID and question uh first object underscore it is matching then
(8:44:12) border keynote okay so border key for the first one for the first object you don't need any border top so that's why writing like if not matching then then show on the bottom top otherwise don't need to show border top just one like styling logic then in here toggle question what we need to make right now in this toggle question we are sending this uh FAQ question ID okay handle question change so this is where updating our question okay and this is our we are updating our answer and for the delete one we are just
(8:44:48) removing the previous one okay and this is new FAQ Handler so let me just make these functions right now okay then you will understand it more easily so first we need our total question okay so toggle question is this set question we are adding a parameter previous questions dot map then we are receiving this ID this ID is our question ID okay so if question ID and this ID is matching then spreading our queue it meaning send us our previous uh all data then active will be this one and otherwise in this queue okay this is the
(8:45:27) logic then handle question change and this is also kind of similar like everything is kind of similarly logic guys okay but in here this is this previous one sent like active and right now we are sending question otherwise similar everything in here then now we need similar type of function again for our answer change this is and this is really similar instead of question in here this is answer otherwise like everything is same now last we need our new FAQ handlers if you don't click new FAQ plus icon then this will open a new FAQ Handler
(8:46:11) with questionable empty string answer will be empty string we are doing the same things also in our create course component right when anyone clicking like plus icon in the benefits options are pretty widgets option we are adding a new field we are doing the same things in this FAQ also okay we are spreading or we are adding the previous all questions and we are creating a new questions with empty value that's it for new FAQ handlers now we need on function to check the FAQ arrays are unchanged or not why
(8:46:44) we need this why we need this because we need to understand that the user is the admin is updating any data or not if not updating then we will not uh will not allow to admin for update our FAQ okay I mean admin cannot click the save button from here okay what will add then we need more two functions okay this is another one which is its questions is empty obviously no questions cannot be empty then this will do one problem right so you need to validate it so that's why you are validating it now our last one which is
(8:47:23) for our handle edit so suppose I am creating it in here and for right now I am just console logging like anything in here okay for now so simply save it and check the UI right now so notice we are getting our all FAQ in here if you don't update anything like I'm clicking here but still it's not but when I'm typing something like hi and here also now monkeys we can save this notice we cannot save it so it's perfectly working when you can delete it right now you can delete any FAQ if we want then suppose I'm deleting this one
(8:48:03) if we want we can change it to like anything any anything okay this is fully customizable right now we can add anything whatever we want if we click this plus icon this will show us our data we can delete this one we can update anything in here any spelling mistake or anything like that okay so we can update our rules also so suppose here I am adding a new one okay I'm copying it like from because you mix like on simple FAQ so suppose question is this and answer is this one okay so you can add anything you can add
(8:48:41) any lore M also now if I hit save then this will update but obviously not because right now we need to make our uh okay okay not need to make guys because we already made it perfectly right we already made one for our Banner chains okay so this is also similar instead of singing type Banner with right now same type FAQ then everything will work we don't need to make multiple time okay we just get like on shortcut so in here right now the right and logic if r if not our question changed and send our data dot layout Dot
(8:49:25) FAQ and our course change and okay we are checking second time if not is any question empty of course chains then just update our edit 0. okay so edit not edit hero edit layout data so let's do one thing import our this edit layout mutation okay from here at the top and we can do one thing guys we can come back this edit hero and we can copy this line this edit layout mutation line now add it in here edit layout is loading is not need right now each success is important so copy this edit layout and add it in here
(8:50:28) inside here at the type which is FAQ all will be caps and we need to send our FAQ which is our questions okay that's it now format it and simply in this use effect if each success then our toast dot success updated successfully okay and if any error in any case then we can do the same things what we always doing okay yeah that's it so in here add our each success then errors okay and one thing guys in here we can give this name to layout
(8:51:32) success yup done now if you try to update our FAQ it will work it should work obviously so suppose can I download any codes videos so simply hit save if you update it successfully notice it's here perfectly even if we give reload also then it will be here because it's added to our database so one logical issue okay I got it why this is happening so notice we added here our is loading right so in here cut it and write a logic if is loading then show our loader otherwise show this cool now notice this will show loader loader
(8:52:34) loader then it will come to data okay and this is our which ones we updated can I download any codes video and this is the data so we are perfectly adding our FAQ also and we are perfectly updating it from here this is our last one yeah cool so now we need to make this categories one we need to update categories so we can finish this we can close this edit FAQ right now and edit here also and simply come this admin folder create a new folder name will be categories and create our page dot TSX and add our UI here we go
(8:53:14) very simple similar thing and edit category is Dot TSX create it now done simply remove this GSX come here and check our categories it's empty right now so uh we need to make it in this edit categories we also need the same two things okay first one is our this gate one okay and this edit one so just we can copy these two things from our edit FAQ import it from our Redux features and type will be right now categories okay and obviously import it also if you right now show you our database note the type is categories
(8:54:17) okay so category is done then in here after each we need category Sunset categories which will be on empty array so use kit and in here we need our logical things little bit first in here add-on fragment if is loading then show our loader otherwise your component so first class will be like this and in here we need on H1 all categories okay then right now we need to loop our categories so first make on use effect
(8:55:22) work in here and if data have then set categories will be data dot layout dot categories yup now in here simply map our categories then in here return inside here we need like some classes input and we need to make this function handle categories add okay we have an icon for delete our categories then we have our two TI fee
(8:56:30) and finish it yeah now simply given format and we need to create this function handle categories at calm this top handle categories at and in here we have ID which type is any we have value which type is string and now set categories will be like this previous category previous category.map questions or I dot undescribed you okay whatever we can write in here this parameter anemia then equal to ID then title will be value otherwise this I could so right now let me show you how it's looking so this is all categories
(8:57:24) okay something is wrong like my next Chase server stopped and the back end on is also stopped Network issue kind of let me restart this both yeah here you go so this is our programming digital marketing Graphics design machine learning if we click here what is this is come this is deleting okay but it's not really deleting we will make that feature also so now after this what we need after this we need on plus icon right for add new categories so I am giving three line break or two line break not three in the
(8:58:04) UI this is F2 and one icon for adding new categories okay so let's make this function new categories Handler new categories Handler we need some logic okay if categories and categories dot length minus one dot title equal to empty then in here we need to show an error that is category title cannot be empty okay like this what is this meaning let me explain it
(8:59:09) okay it's a very important things okay so a lot of people almost like 90 beginner programmer don't know about this logic so if categories and this categories start length minus one meaning sky is the last object okay last object in our area so suppose in here we are clicking one plus icon it's opening a new one okay it's adding a new one without entering that value we're again clicking plus icon so obviously you must need to enter something in the categories like input input value okay from here you can change it also like
(8:59:44) notice this is input everything is input in here you can update anything whatever you want it's not any paragraph or anything like that so this is fully customizable so suppose you are clicking this plus icon and you're not entering the value or you can click class icons obviously you can you cannot do that so we are checking the last object is the last object is empty if m key then show this error category title cannot be empty okay and else otherwise set categories will be previous category then in here we
(9:00:17) need to add a word previous category and title will be empty string like this then and finish it cool so what is this so set categories we're adding like a parameter previous category and we are uh calling our all previous category this this spread meanings then we're adding a new value we are adding a new title into this previous category okay after this previous category we are creating a new title which is empty so that's why when we are clicking here it's opening a new file it's opening a new field
(9:00:59) so now we can type here okay done so now what we need obviously at last we need on very simple thing and that is our submit button but this very simple things we need to write logically logically meanings only if user field the value then this will be traceable right this edit categories okay so now we need the same logic what we created for our FAQ also like at categories unchanged our category is unchanged is in the categories title empty okay as all category unchanged so we're checking it so we need to make
(9:01:41) these two functions again in here okay even it's kind of very similar with our previous one so this is our R category unchanged original categories and new categories we are adding these two things then return json.stringify this original category is equal to json.stringify this new categories okay so we are just like matching with each other that's it now we need our next one which is is any category title m key then just do this return categories dot sum then Cube dot title okay if anyone is empty we're just checking it
(9:02:21) this is you can say utils okay this is these two functions is kind of right it's just helping us for like validating our data then now at last we need our main function edit layout Handler okay so not layout Handler this will be edit categories Handler yeah and in here if our our category is unchanged and you need to send right now the value like data.
(9:02:52) layout dot categories and my copper light already suggesting me so this is also correct suggestion so data dot layout dot categories were changing this our data what we are getting from our database and this category switches on new data if not updating okay then only like call this otherwise don't need to call it foreign how powerful right I'm clicking here it's still visible because it's empty that's why so suppose typing something it's undisable very cool right so suppose here I am adding a new category like uh AI development okay
(9:03:42) AI development now it's safe and it's working it's working if I right now show you in here the note the categories is adding in here AI development but it's not giving any message because you forgot to add that in this use effect that's why so in here just write this if layout success show this like uh categories updated successfully okay if you have any error then what we are always doing similar thing okay then in here is success sorry not his success this is called layout success because it changed the
(9:04:34) name that's why and our error yeah done so simply to one format save it now come here and suppose uh in here machine learning I am just changing it to like email development okay simple like for only showing you now hit save categories updated successfully but it's not updating still okay but obviously it's updated so what we need to do after success we need to refetch refetch and here call our refetch that's it now if we change it to again machine learning then not categories updating right now okay
(9:05:33) perfect so uh our this is update update work is done categories FAQ then our hero everything is updating perfectly right so our customization work is done so little with things right now guys I'm gonna uh update you know this create course okay what I said that uh we forgot to add here our categories so which is very important so just add it right now it's a very simple thing come our client folder I mean sorry come award these uh components then admin course and create course okay so we can go to this one course information first
(9:06:16) one and one thing guys we make sure that we are going to this create course component okay which is like the main component and in here this is our course info okay in here add a new object new string name will be our category we can check from our backend we edit it or not so check our course model in here in this I codes data notice it's missing here so we need to add it obviously in here we need to add it so check this uh name description price estimated price thumbnail text level benefits
(9:07:20) okay so after this uh description here add new one which will be categories type will be string and required will be true now categories is like not showing anywhere yeah because we need to go to this I course and after these descriptions we need to add our categories which type is on string that's it it's very important so we edit it perfectly categories which type is string and also one thing I want to check which is very important but I forgot to edit that is our video length okay yeah we already have it in here
(9:08:11) video length in this course data schema which is a number but in our front end it's missing so we need to add this obviously then let me check few things hmm this is our I codes data okay done so in our codes uh codes data we are calling this code sticker schema and while we have visual in it means it's perfect Okay cool so uh right now just come to our front end in here and add this categories which is an empty string okay in this course info and in this course content data after this video section add our video
(9:08:59) length okay which will be also for now like empty screen but this is obviously a number so I am just noticing some error but if this is saying each as it is missing course preview let me check each edit okay so adjusting optional chain in here then your will become yeah so this is saying video length perfect so guys now uh come to our this course information component and in here after this code stacks we can make this so we can do one thing we can right now comment this okay and in here this course level so let me just copy this because this is
(9:10:02) fifty percent fifty percent okay that's why now in here paste it now guys we can uncomment it you can card this and you can remove this kiv okay so for the first one this level just remove this and paste it okay so this is for our codes tax secondly this is for our codes category course categories and this is not an input we need here on select okay so save it and option value will be like this and categories.
(9:10:53) map obviously will do it right now option value of the empty select category categories dot map and like these ICM dot undiscuit option.title okay so categories how can we get these categories come here top and if we notice in our edit categories we are getting our categories data so just copy this and in here guys edit after this drug and after this dragging and dragging so import it now we have our data in this data right and we don't need like this refresh in here so simply change this right now in here add-on state constant
(9:11:47) our categories and set categories which in which initial value of the empty string now one use effect what will add our categories data okay like this so set categories data dot layout dot categories right now we have value in this categories so if you right now come here under node categories dot map so just come to our website simply from here select categories this is showing okay but we need to add some styling so let me add it in here so in this select I am adding Styles dot input yup cool we don't need anything else
(9:12:39) so we have our all categories in here we can select categories okay so let me check few things this is our select okay but we need to add here value I mean course info dot category okay like this and on chains will be on change will be set our categories sorry set course info and send the course infant category will be e.target.
(9:13:12) value now guys if you right now like choose something and suppose right now we're going to debugging it okay we need to check it like is it perfectly coming or not so come this create codes and console log this course info okay console log or course info and check it from over here notice we are right now getting the category which is programming we are changing it to suppose digital marketing this is the category digital marketing okay perfect so it means perfectly it's working and one new things we just need to add that is our video length then
(9:13:44) this will be also done so uh in here suppose let me just add this all things suppose for testing and writing something and upload on Banner like this one then next now next and in here after video URL we need video length which is very important okay so uh in here course content yeah course content in here uh after this input after this video URL we need this video lens so just copy this or video URL then paste it in here like this and this will be video length in minutes okay we need to edit in
(9:14:51) minutes so that's why I'm just writing it and item dot video length Okay updated data will be like this and here will be video length cool save it right now and here placeholder will be like you know we can add like to ENT okay like 20 minutes or 20 and this would be obviously numbered not text quote okay so video lens is in here right now so suppose I am typing something or again just come this create course guys and console log our this codes data foreign then it's giving reload damn I did mistake that's why okay so let's try again from
(9:15:46) fast now next and this and this and next video user is also like empty and this is like 40 minutes 45 minutes now hit next now guys let me check inspect and console and notice this is our data perfect and in this uh course data right now we have our video length is where where video length why it's missing okay still missing so something is obviously wrong video length so calm this course content again video length
(9:16:50) and last thing guys come this create code.sx and in here when your calling is handle submit okay this format course content array in here we need to add our uh video length okay course content dot video one like this now everything will work I believe yep yep now everything will work so come here yep so guys now again fill our field okay so just uh type something tummy now next video URL training okay description this
(9:17:56) and this now hit next now check here so this is our course data where we have right now this video length which is perfectly coming it means everything is working right now okay so that's it guys so right now if you want to create any course then uh it will includes the video length also can obviously add the video length which uh in your video how much the length Okay at that otherwise this will do problem okay so suppose you're making a video which is like 20 minutes so then at 20 if you're making videos like more than
(9:18:34) one hour then like calculate that minute and add that because we will calculate it in our uh user page also okay in our website course Details page so that's it guys so this was the video guys from the next video we will start this analytics part then we will jump to this dashboard and we'll add this everything in our dashboard with a short form and then our admin dashboard work will be done and one thing I removed these settings from here in this extras because settings is uh not needing here okay probably not meet right now setting
(9:19:06) in here so that's why I just removed it from the sidebar not need setting options and log out we need to make it uh at the next video we will make the logout features okay so that's it guys done everything is working our customization feature system so see you on the next video all right guys so right now we just need to start this analytic expert so first let's make start to making this one so course analytics let's come to here in our vs code in this admin folder we need to create a new folder name will be our
(9:19:41) courses Analytics and in here create our page dot GSX and inside here we need like little bit UI design okay what I'm like copying similar things what we created some time ago that similar thing and in here we just need this new component which is our course analytics okay so let's create this component so this is in admin analytics new folder and course analytics.
(9:20:16) tsx like this now ts are a c e and remove this TSX that's it now come here and if you right now click this course analytics then this is redirecting yes okay now in this courses Analytics first guys we need to install on dependency okay what's the dependency name the dependency name is recharts so just go to this website Richards first website and click this install button then this is the command MP install recharge so you can copy this and you can install it in our this uh client directory okay now simply install
(9:21:13) it and our backend server is stopped I don't know why let me restart it yeah now it's installing so yeah installation done so this is for our charts features okay what we are going to use right now and uh if you click these examples you will find out all type of charts like simple line charts then teeny line charts area chart and like this is here one so you can easily add anything whatever you want okay but I am like adding three charts in here okay for courses on chart for orders one chart and foreign
(9:21:58) first in here guys we need to import something from our research recharge not a result so this is the recharge so input bar chart bar responsive container and then x axis then level y-axis and level list okay these few things then we need our zoder also and right now we first need to fetch our data right our analytics data so simply come this Redux folder inside this relax folder inside this featured folder create a new folder name will be Analytics and create our Analytics Analytics API dot JS file inside here first we need our API slice
(9:22:59) import it then we need to create simply our Analytics sorry a spelling mistake Analytics API which is a base slice dot injecting points then in here in points Builder and inside here we need get first we are making worker courses analytics so get courses analytics like this and inside here we need our query okay which is not need any parameters and in here URL will be our git
(9:24:02) courses analytics like this and Method will be get and credentials we need to send it because this is for only admin done so now we can simply export it from this bottom export constant something or this use git analytics query okay save it right now copy this come here constant data is loading is zero from here cool now now we need guys some Styles okay so first in here I am right now adding on testing analytics data or you can say
(9:25:08) mob data okay like dummy data then in here we need to create our analytics data array okay like this so uh now we can like comment it this is for dynamic and this is like Aesthetics so first let's make the static one so we can do one thing we can add this line okay and we can also comment it this is what the dynamic first we'll check static then we'll add a dynamic on then the minimum value of 0 yep now in here we need our keys loading what basically from here is coming and is here is not request because it's a gate
(9:25:49) request obviously not will come in Eros and in here if is loading is true then show the loader otherwise on class name is screen like this and I'm just like adding The Styling in here okay the class is just this so we have on empty 50 pixel merging top then courses analytics and let's import these Styles then last 12 months analytics data this is and this is our responsive container okay what we are importing from Richard then this is like bar chart we're using here bar charts then this is X Y axis
(9:26:39) then level then light wire y-axis you can check this documentation for understand more about it okay we are I am using right now this one this simple of no sort of it for bar chart I'm using this one okay teeny bar charts but I did some like you know some modification okay some modification so uh notice it's already giving us our data like this is the all lost on your data okay and in here I edit like the color I changed the color then I just added like some xoxis then this level okay just little bit I
(9:27:17) updated it that's why it's coming like bottom in this one okay but I am using this same candy chart any bar chart so uh this is done and uh now guys let's do one thing let's Implement here our Dynamic one okay why I didn't Implement Dynamic first I am showing you right now because in our Dynamic we don't have that much data notice just we have on data because we recently started our website so obviously we don't have like in data for the last one here so that's why it's like just showing one and I
(9:27:50) just added this mob data also for like testing obviously you need to test it like everything is working perfect or not so that's why I just added it so you can comment it right now because we will use a dynamic data that's why now our courses analytics is done now guys we can start this orders analytics okay so let's come here in our this analytics API in our Redux this analytics api.
(9:28:16) ts and from here copy this and paste it in here and get orders Analytics okay get orders analytics or we can add your users analytics because second time secondly we will make our users analytics right now okay so in here this Swiss get users analytics otherwise everything is same now use get user analytics save it now come here create ours in this admin folder create a new folder name will be users and analytics like this then create our page dot TSX gsra c e and in here simply we need like the UI
(9:29:19) design okay whatever all is green some little bit classes yeah here you go done and we need to create this user analytics.tsx right now so let me create it this is in uh okay one issue now simply click this create file and remove this TSX done so our this file decoration is also done and in here uh at like on simple typescript template here and done so now notice if you right now come here then our results analytics oops first order analytics but no problem we'll make it later so user analytics it's empty right
(9:30:10) now so right now let's Implement our Asia Analytics so guys in user analytics we have the same things also in here like these few things all time it's similar we are picking on Styles then our gate all the results analytics query then this is the recharge import okay okay and now we need like one analytics data array okay mob data what we are like always doing so I'm just adding here on Mob data like this simple for testing our charts and uh in here in this props guys we need to receive one thing okay
(9:30:55) this is our ease dashboard okay because sometimes for our admin dashboard we need to add it so that's so we need like some customization in our admin dashboard so that's why we are taking this value like is that is dashboard if Hab is dashboard then like uh change some little bit Style and in here we can also add our is dashboard and we can like also add props like this or we can add our functional component FC then you can call it but no problem you can do this same its meaning is same and now in here
(9:31:33) we need to write our logic like if is loading so is loading uh okay so just add here our okay sorry is loading is adding done so if he is loading then our loader otherwise some styling so let me just add this styles yeah this is the classes some classes okay UI design so in here uh this is like some logic I say you like is dashboard if it's true if it's false then you need like submerging top otherwise background color will be this some Shadow okay some padding bottom uh for rounded then little bit border
(9:32:21) radius okay and this is the main thing this area chart uh where we are writing we are adding this analytics data static one right now let's check our this right now so come here and this is our results analytics static data okay so this count meaning is the number so this is meanings in the last 28 days this much user created account okay 435 people created account okay obviously it's static data right now is right now implementia Dynamic one so now we can uh comment this analytics data this mock data
(9:32:59) and now we can add here's our Dynamic data which will be like this yep Simply Save it and right now come here and then note only we have two counts okay because we only have right two users this is the two users okay not two three users but uh wait let me click here again measure similarly kicks okay okay so notice this is two and this is one so from uh July 32 August 27th to user created account okay and like from the last one day one is a created account okay this is like the charts data okay this is last 12 months
(9:33:56) analytics data and at last right now we just need this orders analytics thin or analytics uh what we've also done analytics work is very easy the main everything is like in packing in front end will just simply implement it and add it in our chart that's it and again if you wanna update any color or anything you can like update it or you can check this documentation of this website okay or you can like add more charts from here if you want yep then uh after eight right now we need to create our last one so just come
(9:34:30) back this app and admin and in this folder create a new folder which will be for our orders Analytics yup and create a file here name will be paste dot TSX and in here I am again writing the same thing okay like the CSS uh sorry not CSS that lasts what we need basically and this is the new component orders analytics so let's create it everything is similar guys for these three analytics components for the three analytics pages also so in here we can remove this ksx now so now we need to create this audience analytics component okay we need to like
(9:35:32) add our files so first in here I am right now going to our this Redux folder okay analytics API and after this get users Analytics now we need our sorry now we need our git orders Analytics yup now add your own comma that's it and from here remove the comma done so uh in here instead of users we
(9:36:46) need to add here orders done and in here export our use get orders Analytics now save it and in this order analytics now we need to make our analytics so this is also guys very similar okay so I am that's why like copying this full component and I'm showing you so this is the data okay this is our mock data and in here this is our sdi's board what we are receiving this is because this component also needs in admin dashboard home page that's why and this is our Dynamic data so for now we are using here analytics
(9:37:27) data which is this one Dynamic one so suppose right now this is data so let me do one thing let me make it analytics data this function sorry this area not function and in here let me just comment this like this and in here this is analytics data okay so save it right now and come here hours orders Analytics yeah here you go this is our analytics order analytics data chart okay you can customize the charts as your wish guys no problem you can like choose another charts if you want like in another charts then you can easily
(9:38:15) choose that and you can do that okay and in here data dot for each so limit one thing let me just comment it right now and let me add right now the dynamic one so this is and I don't know why I added use effect it's not neat and in here we need our data so on comment it right now and uncomment this one as well now save it and now mode it's giving on reload data dot forage oh yeah sorry sorry not have data dot forage we have data dot layout Dot uh orders dot forage yep so not layout I'm a mistake pattern this
(9:39:16) is orders data.orders oh this is very disgusting I forgot that uh structure actual git orders analytics this is orders so data.orders dot last 12 months okay so data dot orders dot last 12 months now we can Loop this yeah but it's not giving any data obviously something is wrong it meanings okay so name is item dot name counties item dot count Okay C will be not Capital that's why now yeah it's giving data so uh in the last month we have like two orders so that's why it's showing two cool
(9:40:19) so done and this analytics these three analytics is done now come this admin dashboard and let's add this everything you know this home page I mean admin dashboard homepage now simply close this everything and come back to our this space.t6 okay in this admin page.t6 and in this dashboard hero right now we need to start our main thing in here simply saying right now uh in our page.
(9:40:53) tsx okay dashboard will be true like this is dashboard will be true and in this dashboard hero we need to receive it right now Boolean spelling mistake yup and obviously official analysis obviously this is optional save it come here and uh in here we need to send few things we need to create our open State open state in here at first okay and in here guys let's receive our is dashboard now and write a logic like if is dashboard then only show this component okay the component name is dashboard
(9:42:02) widgets and in here open will be open cool so copy this and import that is about widgets from our components admin and create a new folder name will be we just then uh dashboard which is dot TSX now create it so create file and remove this TSX and open we are sending it so in here we need to receive it in this props which type is Boolean save it and one thing guys in here
(9:43:07) we need to sync open and set open okay and in this dashboard header let's come back this component dashboard header component not need this in here we will receive award open and set open and in this props we will declare this open is uh Boolean and set open is any okay so add here obviously optional chain otherwise sometimes it's undefined that's why done so come here now we need to start this widgets so yeah everything is still similar perfect now in this dashboard we just first make it on functional component
(9:44:09) then receive our props and in here we need to receive two things on is open another one is value which will be numbered but obviously optional chain add here and for the first one also then we need to create some UI design okay we need some classes in here like this is and then on grid so let me copy this grid and inside here we have our user analytics component so let's call our user analytics component and each dashboard is to do okay because right now it's dashboard that's why and this is an icon this is on component what we need to
(9:45:12) make right now and this is on icon okay it's not automatically suggesting so we need to create we need to import this icon manually so yeah this is the icon URL now we need to create this component circular uh progress with level okay so basically here we are using on material material UI round circular icon so we are creating this component in years okay inside component so if C props and in here we are adding our open and value then in here's return and in this Recon we need our box what is coming from Material UI okay like
(9:46:16) this so import a box from Material if I import this circular progress from our material by mui and material this one and two erode this open error okay yup so in here what is this is saying open oh yeah so in here guys we need to receive our open so receive our open and value cool not need to receive value because we'll set the value from here now save it and if we right now check our this here the node it's already giving our user analytics data and this sales and new users okay yep and we can like check the
(9:47:17) notification also right now from here so this is our first row is done so right now let's start the second row well we need little with few things so in here uh this is what I am doing let me explain right now little bit this is on box which is coming from actually this is circular progress and I am giving another suggestion just click left side of your mouse and click here then you will can you will be go to this dependency code okay this Library code what is this is on circular progress this is receiving these few things now
(9:47:49) click this one now note we have classes so we can add colors in years we can add colors so we have four options for our colors not for primary secondary error info success earning and inherit so we have these few colors so we can write logic in here like if value is like more than 99 then show it info color info color meanings kind of sky blue collage and if not like that if not more than 99 then show error it means down okay minus when we have minus 10 show it down so thickness this is uh this is like our this rounded icon thickness okay
(9:48:32) so that's why notice in here so I am giving a suggestion for any dependency not for this one if you wanna add something which is like doing problem then just go to the dependency code and check it right now you are not like totally beginner developer okay you can write her check everything so this dependency code is very easy it's not that much hard I'm explaining just note this code is not that much hard if you understand typescript obviously right now you understand little bit typescript right because we are also making our
(9:49:02) project with typescript this is very easy this is an interface where they are type where they are writing the all type okay and like this is the color where we have this Shadow so if you enter something like if you add any color name like red obviously it will give errors because color name is not available here so size this is a number it means we can add here size like 45 notice I added this so then A6 this is our like some Style thickness okay and even they are adding here like comments for us like the thickness of the circle default is 3.6
(9:49:41) if you don't add it default this will be 3.6 this is our value which is default zero and variant determined and in indetermine so if you add determined minute then this will automatically uh you know this will round automatically like this okay and indetermine it means this will we can set it as per our wish so that's it guys now let's start the next one which is also very similar so next on is also another grid okay another great so our first grade was this one and second grade is this one in here we have our order analytics so
(9:50:28) obviously import this and we have our all invoices this component so all invoices component okay so we need to make these other invoices I forgot to make this so let me make this import all invoices from our dot dot slash and create a folder name will be invoices or sorry not invoices created with name orders now all invoices dot TSX here we'll also use like on data grid what we are using for our all data okay so all invoices we already have this data problem if I'm not wrong and remove this ksx then save it
(9:51:29) and come here and in this all invoices first receive award is dashboard which is on Boolean now we need like the few things what we are always using and in here now we need another data we need to fetch it from our backend API okay so come back this deduct features and let's create a new features so let's create a new folder name will be orders inside these orders create our orders API dot GS okay and inside here orders API we just need on single function for our orders right now this is here others API API slice
(9:52:26) dot injects in points get all orders get orders and Methodist get credentials include as constant like this now save it now come back here and in this all invoices first import our like data grid secondly our box start our use theme then like we need our gate all courses query then our loaders and like a little bit more 14.
(9:53:14) what we need to import in here format then get all orders query or users query okay while we are this is invoices component so why we need users orders orders is okay what are six median here but one thing why why this is R Us query let me check everything okay orders query now come here and in here this will be also or DARS query done so this in in our database if you check our database note in this orders we have code size user ID just this two thing right code signing user you don't have any other data so that's why we need to like check
(9:54:08) this data from our front end so that's why we are taking this users and this uh courses okay for finding out the data with the ID yeah that's it now in here we need like these three things team and this is orders query yeah now we need our order data import this use state and now we need to write down use effect which is basically the main thing in here the main part of this component so uh first import this use effect from our react so if data Hab then this is data.
(9:55:02) orders dot map like this and in here is a DOT name is a 30 main codes.name course price okay so what is this first in our users data okay just determining is this all inserts query we have our users right all users so we are finding meanings this one okay this user ID one thing guys this is user ID okay not need undiscourse simple user ID so this is meanings we are getting our user and in this here we have either dot underscore ID okay like this and course dot underscore ID and I came dot quotes ID call that's it so simply save it right now
(9:56:05) and in here we need our The Columns what we like always write for our material UI data grid and here you go this is the columns so you can notice sometimes if is dashboard then show these otherwise don't show this like some logical things okay because in admin dashboard not possible to add the all fields in admin dashboard whale this shows like some little bit like two or three Fields okay and this ill all invoices component will also add in here okay this invoice so that's why uh we need to like think about it
(9:56:50) so uh is judgment is giving error because we need to receive it in here yep done so our this is also done and right now we need our rows rows array so here I just added some mob data also like this I just created one and I just copy paste copy paste copy paste okay I just hit copy paste same everything here so this is like mob data for testing yeah now we can loop our ordered data and we can set our this rows value also okay dynamically and we can keep this static on also like for testing just for testing after
(9:57:38) testing we will remove it or will comment it now we need to start this GIF equal so I am just copying out the IV okay I mean the UI part very short not that much big yeah done so if not dashboard then like some styling and then this is the copy style and this is component gift is dashboard otherwise toolbar with key toolbar so for this one if I show you one thing right now in just a second it's loading yeah here you go so notice this is the recent transactions perfect which is looking fully perfect but it's giving a
(9:58:22) lot of data in years right and the price is still showing undefined so something is obviously wrong here let me check why price undefined item dot price so order data Okay order data foreign guys let me check a little bit okay probably the course is not exist okay wait which course we ordered that codes properly deleted okay so that's why it's showing like mtmkmt okay and you're fine no problem we'll uh when will do real order from our front end then this will not show like undefined okay we don't have
(9:59:22) that uh quotes right now we deleted the codes from our database so that's why it's showing undefined great so now we just need on simple thing then our this all work will be done in admin dashboard so our admin dashboard uh homepage is also done this is the home page and I am giving you installation obviously you can add little bit more features in here also like after this you can add some other charts also like the courses charts you can create on pie charts I'm showing you what is pie chart this is called pie
(9:59:53) charts okay so like you can add here how many courses uh you created from the last one here okay like which months how many courses okay we already have data so you can easily make on pie charts in here this is your task right now okay this is your task you can make it like more big but we have everything in our database already sorry in our admin just whatever you know admin just about right now we have everything so simply make these invoices then our admin dashboard everything will be functional now come this vs code
(0:00:33) and our component is already ready so we just need to create in this admin folder in our app admin folder we need to create our probably invoices or what was that yeah and this is invoices so create it and our page dot GSX and in here simply add our everything in here like this so all invoices then everything is done so right now if we save it and if you right now click this invoices then just check here you go or all data and here it's showing
(0:01:37) undefined the title and price because the course is not exist that's why but otherwise everything is working so uh at last our admin dashboard work is done one thing this is notification is still static because we will Implement Dynamic notification when we will finish this everything like when someone will click order when someone will give any course chain in our court says okay so obviously we need to First Complete our users part then we can add this notification Dynamic and we can uh connect it with a
(0:02:10) socket server we also need to create a socket server but that is very small okay because we just need our socket server for this notification right so that will be very short so don't worry we will do this so from the next video guys it has our admin section is done this is the last video in this section after this video and the next section we will start our user basis okay live will come here we will start this component okay from here we will uh make to we finish this we will make our footer and everything
(0:02:42) so that's it guys see you in the next video
