(116) All Functional MERN Stack LMS / Learning Management system series with next 13, TypeScript | Part 1 - YouTube
https://www.youtube.com/watch?v=kf6yyxMck8Y

Transcript:
(00:00) hello everyone how are you doing I hope you are doing good so today in this video we're going to start on Industrial Level full stack LMS platform web application Series if you're interested to learn how to scale on application or how to protect an application from hackers or how to optimize speed for on applications then you click in the correct video in this video I am gonna teaching you almost the most important things of software engineering that you might know before so I am really super interested to start
(00:32) this series as you are so don't waste time let's see what applications we're going to start today alright guys so you can see my screen right now and this is our website home page I believe this is looking very gorgeous very awesome right if I'm not wrong the background uh kind of this is on CSS classwork I added here it's like you know I added here opacity and of opposite animations it's like blinking to town then light color it's really looking awesome and we have dark theme and light them in this website okay like
(01:06) this and I believe like that both team looking good and one amazing features and that is we can update this Banner from our admin dashboard okay so let me show you the admin dashboard this is our admin dashboard we have a lot of things in this admin dashboard which is basically you will not find out like in any YouTube video we have analytics for everything like users analytics orders analytics courses analytics and this analytics is totally real time okay I mean we are like doing an analytics for our last 12
(01:40) months and this is the all charts so if I click this courses analytics then order its Analytics and as we just started this series okay so that's why I don't have that much data otherwise like it will show all the data okay then users Analytics this is kind of another chart okay so main thing is in here from here we can update our this image okay we can update this text we can update everything and we can save it we can update our FAQ okay we can edit the text we can edit the answer we can delete it we can add new one okay we
(02:27) can update our course category so you can change the name or we can add new category also then let's come back here now we can start scores okay and this is our course page okay in here this is right now we have only earned code so that's why it's showing like this this is kind of you can think like kind of copy of because me okay not totally copy because yeah I added like some features which is not existing because yummy okay then this is a Review Spot uh as right now this is static okay because obviously uh when you're
(03:02) starting your new applications uh you need to like add some reviews in here obviously the first time you don't have any like Dynamic reviews so that's why like this is like for marketing so you will just add it customize it with your original reviews now FAQ which is dynamic totally and this is on banners so the footer not Banner okay awesome now uh one thing guys I don't want to show you but this is fully mobile responsible okay because it's very common thing it's fully mobile responsive okay and right now let me
(03:35) show you the authentication part which is kind of the main amazing thing in here so let me log out first instant logout so I'm clicking here and I'm clicking this login so notice we are going to use here formic and Yap Farm validation for this form okay so this is a very like kind of good form validation for checking our form and this is showing like this okay now if you click just sign up there you go so we have social authentication and we have manual authentication as like decoding me okay so let me first try on manual
(04:11) authentication I'm giving name like this I am giving this mail okay and I'm giving on passport like this and sign up and notice image already exists so you cannot create account with this mail so I am trying a new mail like support at edit picotemy.com now hit sign up and right now it's loading and please check your email to activate your account so we are sending on OTP on four digit of OTP in the previous e-commerce one I noticed lot of lot of comments hey the activation link is not working so that's why I updated it to OTP okay
(04:53) right now it's not in the activation link you will get on OTP in your mail but obviously we are designing email I'm showing you here you go this is the mail okay welcome to e-learning hello thank you for registration registering with e-learning this is guys not any like simple like cakes this is on template okay so probably you didn't watch before any tutorial like how to send template by using node.
(05:22) js okay probably you didn't watch it before okay awesome so uh in this tutorial I will teach you this everything like how to send Dynamic templates even not only in authentications we are sending email for lot of other things also like you know for uh validating okay a lot of things I mean for like order then for like when you're asking some questions then administ replying then you will get all mail okay you will get mail from all time okay so now copy this code and come here and first try with wrong code like this now verify OTP
(05:57) activation code and it's moving I'm again clicking it's moving and it's red right now so right now I'm adding the correct one three seven seven four okay I don't need to click here this is automatically going to the next one now if I click verify OTP this will account activate success it means our account creation done so right now if I try to login this mail sorry this account let me log in like this login successfully in sciently it's giving the profile picture but as you don't have any
(06:29) profile picture that's why it's giving like default one you can change password but as you don't have write any password so you cannot do it oh sorry yeah we have password so you can change our password and uh in your courses we don't have engineered courses that's why it's not showing okay so right now guys click this course page this is our course detail page one thing guys and uh tell you that is if you think about an LMS platform kind of main thing is in here the security part right like obviously uh
(07:04) I am right now not purchasing this course so I'll don't get stuck I don't get the course informations in here when we are sending requests in this uh our API is not sending like the all informations for our courses like the video URL then like video source code okay it's very highly protected okay and if I give you an example about this video player we are using here on platform name video Cipher which platform is giving us DRM encryption so if we Implement JRM encryption in this video player it means we cannot record
(07:42) this video okay so I am right now recording so when I'm playing this video not this is not showing anything this is totally black it means we cannot record our video this is very protected you cannot download this video by with anything okay you cannot download it then also you cannot like we cannot take any screenshot also this is very highly protected okay awesome now guys let me show you the kind of kind of the main interesting features in our this applications okay I believe you will enjoy this notice the
(08:17) admin does what is Right Now not working because right now I'm logged in in user account that's why so let's do one thing let me right now log into my admin account so I'm clicking new tab and I'm logging into another Main awesome now let's go to the website and this is our website let's come here and in here let me log into the admin account okay okay guys so right now I am right now in this admin dashboard okay so I am right now showing you these features what I'm actually talking about
(08:54) so I am making it like this half up okay then you'll understand it better so uh I am right now ordering on I'm right now giving an order okay so just introduction email okay inscribe and one thing guys note it we can pay right now with after pay US Bank cash app lot of payment Gateway okay even Google pay also so I implemented here stripe that's why and I implemented stripe stripe element okay so I will show you in like in detail video okay in the video part like how to implement it so then uh CVC like this now hit pay now
(09:37) now check it I do know you hear the sound or not it's giving on instant notification even with notification sound notice it's six you have a new order from Minecraft LMS Landing management system series with typescript this is the notification how incredible right probably I am the first one who is making these features in this type of like you know full stack courses okay and YouTube on YouTube right now yeah I I'll notice like some other tutor also who made tutorials with like notification system but not with sound
(10:17) or not with like this this much biggest big applications right so I believe these features is really awesome and like you can Mark as read this okay I mean when you click Mark as Rick this will automatically go now it's five if I again click now it's four okay that's it now guys one thing and again show you suppose right now come this invoices okay and obviously this is not real time so you need to give on reload it's very common the notification is real time only but if you want then you can also make it real time also okay I
(10:54) mean this because this browser and this browser is right now not same so that's why okay so this is the course what you purchased okay 24 and if you right now notice the sales obtained this is showing four and uh in this month we got this four sales okay and in here this is also showing on mini cargo this is created this is the price this is the like username and ID now come back here actually and let's go to our application and now click is enter to course guys now simply this is our quotes player also have the
(11:31) same thing also in here we will start to play this we cannot see this video okay because uh this is like protected and this is the all sections if you click here this video will play if you click here next video will play even previous lesson the next lesson is also working okay now let me show you this question answer features so suppose I'm asking on questions like testing question okay before sending I am showing you the admin dashboard we have four notification Okay now click submit and here you go question in here now
(12:13) check our admin dashboard here you go I don't know you hear the sound or not but this is here 12 second ago and this is the new question received and even right now if I give in a review also like 5 star and it's cool then we'll get notification in admin dashboard with sound notice here you go just now has given a review in mindstack LMS and like this a new question which video this is telling us the video also so admin can right now come here and admin can reply this okay so suppose right now I'm coming to
(12:52) admin account I am going to the course and I am simply giving reply right now okay so in here we need to given wizard guys because obviously this is not like updated yeah so if you right now check uh sorry sorry with video This is for this video actually okay this is technology brief yep second video yeah here you go this is the casting question so suppose I'm giving an answer case King reply like this and submit and there you go instantly it's here and for admin okay only for admin reply this will show this verified best thing like
(13:42) this student will understand yeah this is reply from admin okay that's it in this reviews also admin can give on reply add reply we can say thank you like this okay awesome thank you in here great so we can ask question we can give review in here we have resources options where like you can add source code or anything else also like this is on links array so you can add anything in here this is our overview now guys come back to admin dashboard because this everything is almost done in here this is about Pace totally
(14:29) static policy is also static FAQ is dynamic and in here right now if you right now come here in this user account enrolled courses this is showing if you click here this will totally go to code success page okay and now come back to right now admin dashboard and let me show you some admin dashboard features so first of all if the sales is down from the last month then this will show rate okay and this part sentence is fully dynamically checking then we have like all the users in here okay we have this invoices in here and
(15:05) all of the main important things in invoices if you are learn through real-time business you need to export it right so you can download these invoices download as CSV or you can like print it also if you click here then you can download it now let's come this main interesting that is create course how actually the create course which is working this is fully organized feature okay I'm showing you I'm giving this name I'm giving like description like this giving price you know 20 estimate price hundred dollars okay code
(15:38) Stacks I'm giving some tax I'm choosing on category programming suppose programming I'm choosing here and also you can add new category from here okay if you want when I add in a new category then course level so I'm giving it intermediate and demo URL which is basically guys as we're using video Cipher for like implementing uh Advanced video protections for our course videos after uploading video in video cyber dashboard we will get an ID so we just need to add that ID like this okay now
(16:10) we can drag our thumbnail or we can like click here to upload it so suppose I'm dragging on thumbnail like this one okay now next now in here this is the benefit so here like I'm copying this I'm again opening here like this like this yep now I am clicking next this is our section name so here I am giving section named like demo and video title to like this URL I'm giving like this for now video length this will be obviously minutes so again I'm giving Here video descriptions we can add like
(16:45) this link on okay so this link is basically this link this link we can add multiple link also in here okay now we can after a con after finish this everything suppose right now guys I'm clicking this add new content we cannot add obviously we need to fix this I mean we need to fill this all field if you click add new section please fill the all Fields first perfectly we are validating out all data okay if you think about any LMS platform the main challenging thing is in here is the data structure it's very hard very
(17:24) big data structure in our LMS application so maintaining these applications or if you are really making these applications if you add it in a portfolio this will really help you to get a very good job okay and by doing this project you will learn a lot of new things which you didn't know before now we can collapse this video like how LMS platform work now guys it still is giving error because yeah we need to add here like you know anything we can get we can say source code and URL will be like anything I'm giving
(17:57) okay now add like this and now add new content yeah it's coming so suppose test I'm typing something okay uh like anything yeah now we can like again add like this so suppose I'm clicking add new section it's opening a new section okay like this and I am going to show you some other features also some other interesting features okay so suppose I am creating a new section okay in here I am changing his name to demo now let's see the magic notice it's not right now in same section because
(18:36) right now this is also demo section so that's why it's automatically going to the first one so suppose after uploading after like adding 20 videos you are thinking no uh we need to add a new video in the first section okay you will simply change the section name it will automatically come to this section so just understand how much organized about this now if you click next you can get an offer view for this full uh how this will look like in when we'll create this course okay so I'm not creating it because I don't want
(19:10) to create like any code spy like this data okay then live courses you can see our all live courses in here we can edit it and in edit we can edit everything every single thing we can edit I don't know why this closed case is still in here let me give one reload everything means everything this is our course description this is our course name even we can update this we can update our videos also okay if you're not like need to update any video if you like after uploading codes you can also update video or you can like add new
(19:57) videos in your course from here by editing video which is very awesome features and important now controller switches like we can add new member in our admin dashboard okay then also we have in here like all analytics I already showed you this so that's it guys we have almost all features what's neat in like in LMS application okay right now guys I will don't extend this game apart to more big but I want to tell you something okay some of my personal things okay I am doing programming for about the
(20:32) last four or five years I'm not like that much like very expert or like very old in programming community I am doing programming for over the last four or five years but yeah I work in upwork I'm a Cooperative freelancer okay I was and like I also work in some companies I I completed some projects but actually I don't like that I'm a top-rated freelancer every day like I'm getting very good job offer from my clients like you know I'm making good contents I'm like I have good skill like my clients
(21:07) say this okay so obviously it's very easy for me to like get good job easily it's it's very easy for me even I got a lot of offers also but I didn't take any of them because I'm gonna do something for this world it's really my Target and from the last 1.
(21:27) 5 months or on and half months I am making this course I didn't take any single project from upwork I got a lot of offers from like my clients okay as it operated freelancer so it's very easy right now to like get offers and also guys I am right now bearing my family okay I cannot tell you about my age because I'm like not that much like you know senior person I'm really a junior person okay but this doesn't matter you know industry so why I am telling you this because I am working in this project like I am making this tutorial for about the last
(22:04) uh one and a half months it's very hard to make on 40 hours plus of tutorial or 40 hour makeup 40 hour plus of course this is totally kind of course because I I give a lot of time for editing I like made on plan perfectly I scheduled everything and I'm like doing everything as per the schedule so so that's why guys in this project I am like private in the source code you right now ask me why because I just want some help from you then I can really continue my contribution for this programming Community I can make more content
(22:44) because I am also a people I am also a person I am also running my family so it's very important for me to like earn something at least like how I can bear my family I'm not telling you to give me like very like a lot of money I'm not really just saying you this every month you are spending a lot of money without any reason or we you are also paying your college you are paying your like coaching or like what your teachers are paying right so as I'm doing this lot of hard work I believe I am at least eligible for 10
(23:15) from you right for this hard work I believe I'm at least eligible for this game dollar then the change color is not too much for you if you're from India also then this is highest like 900 rupees if I'm not wrong so these 900 rupees wheel guys really appreciate me to make more content even I have six multinational projects plan which is totally not exist on YouTube right now even not on YouTube I am fighting like with udemy content creators also okay like I'm planning to make on full stake applications with
(23:49) algorithm which is not exist right now on YouTube with more advanced advanced features very Advanced features but if I on a do something for you obviously I need to at least earn something right now you're thinking I earned a lot of money from YouTube but it's no it's it's not like that YouTube don't pay us like lot of money 100 200 it's not good for us as I earned almost eight thousand dollar in in my first freelancing year I started freelancing like few years ago and in on year I earned almost eight thousand
(24:25) dollars which is obviously kind of good amount for like starting year so uh this course guys is like uh the video is totally free you will get the all video on YouTube totally free you don't need to pay anything but for the source code you just need to go to bicodemy and you will can like you need to pay 9.
(24:49) 99 okay you can pay with your Google pay like then phone pay phone pay probably not available but Google pay PayPal credit card debit card almost all kind of like women Gateway you can pay with your local currency also in decoding website okay so I believe guys nine dollar is ten dollar is not too much for you but it's too much for me like when one 100 people will purchase this this is really good for me this will appreciate my work to make more content so that's it guys I believe you will support me and you will
(25:22) purchase this and also one thing uh if you purchase the source code I mean if you purchase it from Biko Jamie you will find out like multiple sections in picodemy okay I mean you can watch video section wise like part part videos you will get premium support it means you can also ask questions after every video okay in every video and you will get source code and like you will be a premium member of picodemy okay and also if you don't purchase it then no problem it means not like that if you're not purchasing then this course
(25:53) is not for you okay no it's not like that you will find out the all videos same because every video also in this YouTube also okay but the source code will be not like you will don't get the source code but if you want to really learn something then I believe like source code is like don't need for you okay but if you wanna support me then you can purchase it okay guys that's it guys I'm not exchanging this video from the next video I'll explain you how to make any Plan before any software development
(26:22) project okay I mean suppose you wanna build on project for your client or for your company how can you start that project it's very important even the 90 programmers you don't know about it like how to start a project we really don't know about it so at the next video I'll explain it deeply so that's it guys see you on the next video all right guys so before you start any full stack project any full stack project you are getting from your client or you're getting from like you're doing in software
(26:51) development company job or you're getting projects from your college so before start any full stack project first we need to make on plan we need to break down our full application there have been another common question of almost all beginner Minds Tech programmer that is which part should I start first back end or front end most common question right for every beginner programmer so what is this answer answer actually before giving this answer guys I am giving you another thing and that is before thinking this like which part you
(27:29) will start first back end or front end I'm telling you first break down your application break down your application meanings you can like open on text file or you can do it with your graph also by using like chart so uh first you need to find out how many major features and minor features have in your project so now come to point what is major features what is minor features major features meanings which is kind of main main features so I'm giving you like example okay with this website without this LMS platform
(28:03) so in here we have an authentication system at first right so this authentication system is a major feature and inside this authentication system we need to like create account then we need to log in we have social authentication then we are using like a refresh token or access token like for making authentication so this is minor features this is minor features in our authentication part okay so first find out how many actually main main features or my major features have in our project like honest authentication okay
(28:38) obviously it is available almost for 95 application right almost every applications have authentication system now come to next one what is the next the major features so if you notice in here in our admin dashboard okay some applications don't need it but I prefer I personally suggest you to like make on features on admin dashboard to update this Banner okay it's very important not for this LMS it's very important for e-commerce also like you are making on e-commerce application so uh you are like uploading on product okay or like
(29:14) you want to feature something then you can update the banner by but by going to code updating it it's very hard so obviously we need feature to upgrade this Banner even not only Banner we can we need also these features to update this text this text also okay so this is called on major features so what is major features in here the major feature since this is kind of called layout okay here we need to like add these features I mean admin can update this Banner okay you know this application then admin can update this
(29:50) FAQ from admin dashboard admin can update this category course category if you come here courses this course category admin can update it so this is this is the major features this layout called major features and this like category this is minor features okay so first guys suppose I am opening on text file for explaining it to you like on new text document here you go so in here suppose I am giving like 1 and I'm writing like you know uh first is authentication okay guys don't skip this part it's very
(30:27) important to understand this okay don't think that you know everything but it's not it's really not like that okay it's very important okay don't skip this part then secondly after authentication what we thought layout okay in this layout we have some minor features we'll add that later but first break down the all major features next one is scroll this is course features we have courses right admin can upload courses so this is also another major features course we can give this name okay then
(31:00) uh after course guys we have let me come back here right now we have this profile page right so profile page is also including in this authentication so you don't need to edit this now it's not any major features now come back to admin dashboard obviously uh before starting your project guys you will get you know on figma file or like any uh any website or your client will give you some plan also right like if I share with you some of my personal experience like how to run a software company I know this okay so suppose on
(31:35) client is coming to you like the client have on business okay very good business so the client is gonna like build it on software for for his business so he's explaining us about his business like hey uh we are running this business so we're gonna run it to online and this is our Target customer so we need this type of application okay this is actually how software software development company works of her industry actually have worked so then we ask to the client okay well so uh you just give us some points then
(32:06) our UI designer or figma developer he will like design on template for you after that when the client will ask the figma design okay like he's just watching yeah everything is okay not or if like need any modification need any extra features then he's selling the figma designer and figma designer making it and after that when we have on good overview okay when we have on good overview of our project like we need these these features okay the website will be look like this then you start the project okay before this we didn't uh we don't
(32:37) start any full stack application first we make the UI our client give us like some you know demo website okay like some other website you can uh use this website as reference okay so first obviously we will get on website right or on figma file so then you need to like go to admin dashboard right now and in here for like marking out the all major features admin dashboard is the most easiest thing okay because in admin dashboard we have everything so it's very easy to find out the all major features notice this dashboard we have
(33:10) analytics obviously analytics is a major features so let's come here add this Analytics okay then next come this invoices this is called orders okay this is related payment orders then you know invoices everything is related in these orders this is the major features now if you notice create course live course already in here course Now customization it means the layout already in here now controllers this is kind of legit with authentication system okay so you don't need to like add it in here now analytics also done and that's it we
(33:50) have just these five features five major features in this application this application size is obviously not that much big this is kind of uh called medium scale application okay we can say this is a kind of medium scale application okay and also one important thing I really forgot and that is this right side notification obviously this is a major features because notification will always like suppose we are doing a new order so we are adding it so we need to create a model also for this notification right you know if your view
(34:19) is like mongodb obviously we are using mongodb so that's why let's point out this also notification okay just need to we need a new collection for this not database yeah so this this sixth is the major features now inside these major features we have lot of minor features like as I said in authentication we have sign up login this is manually right then we have social art we have update profile gate profile okay then we have like other other features so I am guys not adding everything in here because I will
(35:02) give you an overview of our plan okay I already I will give you I don't imagine here okay because if I like add the all features in here in this course I record I recorded almost 56 videos okay so if I either 56 video so understand how much big this will be so I just tried my best to give you an overview for start any full stack project okay because it's very important in our industry if you think about our full stack develop in a software development industry which which people are kind of beginner okay which programmer is beginner they
(35:40) think like hey we started to code then yeah this is this is our task but no if you wanna be really a full stack developer you need to understand how to scale an application and you can understand how to protect our applications you know like the security keyboard then when our application size will be go to big then we need to like add cash maintenance which which things we are going to implement in this tutorial okay I will show you in the next video what is that then also when our application size is going to like more big then we
(36:09) need to implement like on algorithm on recommendation system otherwise it will be very hard for us to like fetch all the data this will take lot of time so you need to understand this everything if you understand this everything if you can play with this then you are a full stack developer you are the real full stack developer mind stack just hit just one stack in full stack okay it's not full stack development yeah obviously we by using mine you can do full stack but if you really want to be a full stack
(36:37) developer then mine is not enough for you you just you need to learn more more things okay if you ask me like hey then who is new technologies I need to learn there's not have any specific answer for this okay because every year day by day day by day programming is updating so you need to also update it you also need to update yourself like a new framework coming you just need to start that it's easy guys people making it so we can also do that right they are making for programmers so what's the problem we can also start
(37:07) driving another stock like start that if you're really a programmer then you can do that okay so uh from the next video guys I mean from the next part I will explain you uh like which Technologies we are going to use in this project okay because I already explained like technology is very important every time not man stack good so what we are going to use in this application and why we are going to use those Technologies I'll explain in the next video okay that's it see you on the next okay guys so now I'm gonna giving you an
(37:39) offer review which Technologies we're going to use in this series and not only this series for your future project for your next feature project which technology should you use for the project I'm giving you an offered view okay so first of all first we need to understand how many applications actually my I I'm talking about like how many types of application have in this world okay so basically s programming as software engineering we divide application in three parts okay three part of applications like we divide on
(38:15) its lowest skill another one is medium and another one is high skill so what is lowest skill what is medium skill application what is like high skill applications I'm giving you example and explanation okay so first low skill application so lower scale application will be not that much big okay the functionality should be not that much big and people will not visit that much okay so for example if I give you like some uh kind of give some example then I can say some like you know some of your local newspaper website okay
(38:53) in your country local newspaper website probably they are visiting from your only your country right so that's kind of like you know not medium skill application that's it low skill applications okay because there's not like that much complex say complexity in the application also like don't have that much critical critical features so we can say that sun that's one low skill application so uh for actually low skill applications which framework I success Cube if you are working with JavaScript okay most of
(39:27) the web developer working with JavaScript so I would suggest you obviously you can use nyxjs full Nick JS is perfect for you okay you don't need to use like any other back-end framework also because ninjas already have backend so you can use next Chase and you can build a uh for 2023 I'm recording this video 2023 and I'm talking about like right now time okay right now time for uh like you know for small scale application nexjs is obviously best choice okay so now let's come to the next one medium
(40:00) scale what is called median skill application medium skill applications meaning where have user visitors okay I mean user visiting those websites and wires have some complex features some complex features and on future this application can be grow okay like because you know this is on Biko to me kind of you can say medium skill applications because you may also have lot of features which I didn't implement the front end but still in back end there are a lot of features in the economy okay the kodium is also very big
(40:33) applications and in the next six months you'll understand it like how much big because yummy website is going to be okay so another good example is medium skill application is this LMS is also okay so in LMS in medium skill application basically suppose right now you are starting on LDS application okay on LMS platform the first time obviously don't have like that much student you have kind of like medium students right so this is called medium skill application so for medium skill application guys this is I suggest
(41:07) sometime next Chase I suggest sometime not next Chase you are thinking why Nick Chase is obviously good yeah I admit next choice is very good even I also like but if you think about like uh suppose you want to implement you uh you want to implement like some critical features you want to exchange your back end to like Next Level so as our these applications like if we're gonna add here multivender system on future in this LMS if we can add like live classes features then you know other features LMS is a very big
(41:42) platform if you notice about udemy you cannot say udm is a medium skill applications udm is very big right this is also an LMS so they are very big so obviously for this type of applications I never suggest next Chase for the at least backing but for a front end okay next year is good but for backend I never suggest next Chase okay I know Nexus is fast is good but I don't suggest snake chase even I don't suggest node.
(42:12) js also okay yeah you can use node.js but if your applications like if you have a plan your applications will be like more big you are planning to make it like udemy then node.js is also not good for your application you need to move to initiating JavaScript as a programming language if you want to use then you can try nest.js Nest okay which is back-end framework very popular and in this case you'll find out like lot of pre-made things or if you wanna change your programming language to like python then I would suggest you Django okay for the backend
(42:45) part for large scale applications this is very scalable even no index.s is also scalable but I don't suggest it okay because I personally don't like for like you know I don't know like why I don't like for large scale applications okay I feel it's complex complexity is not the main thing the main thing is like you know code writing style okay then lot of other things I also try it next Chase in my some personal projects but yeah it's good enough for medium scale or like small scale but it's obviously not good
(43:18) for large skill when you want to implement and algorithm this this is obviously not good okay even node.js is also not good then obviously node.js is also like bad choice that time we need to use that time next Chase or like in Django this is right now on popular on Market okay as per myself like this is the best choice okay so this is for large scale applications I also explained large scale in the medium scale also because like large scale we need to use next JS or like Django then for the front end you can
(43:49) use next just no problem and because Neches is providing a lot of features for like doing ACR for application then each type also like go to server side rendering but as you don't use necess for backend so you don't need this but niches is obviously good choice for front-end obviously because you will get a lot of features okay that's it guys so now let's come to main point which Technologies we are going to use in this project then we are going to use next is for the front end node.js for the back end Regis or
(44:26) maintains cash and rtk query for instead of Redux or Redux query uh sorry not 3x query Redux toolkit we're gonna use Arctic Equity what is article query I'm explaining after some time okay so uh then alien CSS for the like styling and I did on post okay in community post in my YouTube channel that I edit like EGS yeah I'm I'm using right now ejs in this project so EJ has basically one kind of uh you know for adding Dynamic mail okay like for sending Dynamic mail uh mail template we are using EGS just
(45:09) for that okay it's not like in our uh it's not working for any other features we're making EGS template ejs template and we are sending the template to our users for like Dynamic features that's it so now let's come to some important features in our these applications okay you need to understand Master this like what is cache maintenance when cache maintains is important okay why we are using radius then also another thing is that is when you need to do cash like when cache maintenance is very important and also
(45:45) one thing here I forgot it that is Arctic Equity why we are using why we are not using Redux toolkit why are ticket query based in Redux toolkit okay so let's start the first point why we are why cache maintains is important okay suppose right now I am going to unpopular website name is Netflix okay so Netflix Bangladesh I don't know I can go to this website or not click get start okay I cannot go here I need to create account but I don't have an account okay awesome so guys and basically if you think about like
(46:25) you have a lot of data in your website okay right now we can skip uh like you know cash main gains okay now these applications if the if the size is not that much big I mean if you if you don't have like larger audience then you can skip it but I suggest you for like do this okay so cash maintains meaning suppose let's come back this course details in this course details in the same time 10 000 people giving request same time same API then this will be very hard for our server to respond to the 10 000 people
(47:03) in a single time then what will happen this will decrease our website speed this will decrease our website is server speed right obviously server will get lot of pressure so for this problem we are caching data what is meanings caching so there are two types of cash main gains okay there are two type of cash one is front-end cash another one is back-end cache back-end cache meanings suppose we have 20 courses okay so obviously 20 course is not visited like 10 000 obviously like some popular courses which is visited by user more by
(47:39) students more so those courses we can add that in our radius database reduce is also on database like mongodb okay but it's serverless and radius is basically we are using for caching so what we are doing when we are watching like yeah these courses like people searching very lot lot people searching very much but adding that you know the cache so when 10 000 people requesting it then our database I mean our server don't need to like go to database or server can go to Cache okay and Casual totally send it in the
(48:17) same time so our server will don't get pressure at that time okay we can maintain sketch for this type of features like if you think about Netflix in the same movie A lot of people researching okay obviously Netflix are probably a lot of movies like 20 000 parties I really don't know the exact amount okay this is like my idea 50 000 movies they have probably are like more I don't know really so when in this 50 000 obviously not all movies people are searching that much right some movies are popular some
(48:48) movies are not popular so whose movies is popular they are adding it on their cache so when people are searching the people giving that response getting that response very fast and server is not like getting pressure so that's why they are also using cash even not only Netflix almost like all popular website like Instagram or like you know any applications they are using some cached data sometime okay even in our next Chase also if I'm not running sjs is also cached data okay if you check here yeah they are also doing cached yep
(49:33) what is this is error okay no issue no guys basically so this is called Cash maintenance I'm going to understand it okay if you don't understand then you can like ask them comment I can write you write it for you okay so now let's come to the next Point why you are using article query not Redux toolkit so I am giving you an example this is total related with kind of cash so that's why I am giving this example second time then you will understand the cash again with a good okay suppose I am removing this I'm like wait wait I'm
(50:10) giving on the reload and this is our Network app okay in this website so just check it we are sending some request okay not over I mean this is saying the request is changing by rtk query so this is the me request okay it means this is sending request to API slash video on slash me now guys what is get courses okay this is also sending request simply remove it now come back is courses component not it the gate all courses okay not this one previous well previous or not this one not sending again request if we again
(50:51) come back this home page note it it's not sending any new request so how working if you think about if you notice any uh Arctic not article query if you think if you notice any Redux toolkit project okay just doing spec and check it every time when you are going on your Canada URL it's always sending request request request okay but in article query why it's not sending request because this this data is right now cached in rtk query okay when the data will expire from the cached or when like we'll give on reload
(51:27) then it will refetch otherwise this will don't refetch okay this is the kind of main powerful thing of Arctic equity and if we use rtk Query we don't need to make like a lot of custom things the code is very short very easy very easy to implement we can easily refresh our code also and I think query is just cool I just want to say this online that is queries really cool if you learn in this project okay if you use article query in this project obviously you are going to use so you will also start to love artificial
(52:03) like me okay I'll take it is really awesome so that's it guys and I uh deeply again explain with you about article query in the courses and the front-end part so I hope you will enjoy that so that's it guys I'm not making this like you know this part is called theory part right so I'm not making this theory part like more big because some people really don't like this and also let me know you are like this part or not if you don't like then I'll don't add this like from a next tutorial but pardon me
(52:33) theory is also important sometimes okay like what I explained there are a lot of programmers still don't know about it like what is called Cash maintains how to uh how to optimize one application speed then like this type of things lot of programmers don't know so it's very important to know because we are going to be a software engineer we are going to be full stack developer so it's very important right that's it guys so for all next video I'll give you an example of uh of our overview of our code editor okay which
(53:03) code editor I am going to be using this series and you will then we'll start to quote okay so that's it see you on the next so before starting the coding part I'm gonna give you an overview of my code editor which we uh we're using in this full series so I am using right now Visual Studio code which is the most popular code editor right now in all over the world so for installing this code editor you just need to go to this website code.visualstudio.
(53:36) com okay this one then slash download okay so if you also search like this V is code then this will also come okay the first website so uh right now I'm using Mac quiz so that's why it's showing here download Mac universal but if you're using Windows and Linux then probably it's showing here like download Mac sorry windows or Linux Universal okay so simply click this and download it okay so I hope guys you know how to download the software very basic thing then after download uh just install that software
(54:11) okay so after I install this vs code will be automatically open like this okay but uh the theme will be obviously not similar I am using here a new theme so then you need to click this icon extension icon okay so right now I am gonna show you which extension I am using currently in my vs code okay which is the important for you to install so first of all I am using this Firefly Pro this is a theme what I'm using right now in my digital Studio code then secondly you need this console ninja so what is basically these two so
(54:46) when we will write some console log then we can check it from our Visual Studio code we don't need to go to the browser and we're going to take it from by doing inspect okay that's it then the next one is third one is es7 which is the most important uh extension for this series okay within if you're not work with your GX Redux or react native or typescript okay next JS then you need must make this extension you will find a lot of shortcut okay then after it I am using East link this is for uh find out you
(55:21) know what is this called syntax problem okay if we have any syntax issue in our code then it's linked will Kayla say you have this problem in your code please modify this okay then I already explained you what is this Firefly Pro okay this is just my coordinator theme then git graph so you don't need to aim you don't need to install this okay this is for GitHub then live server yeah this one you can also install it midsreel image okay so this is basically provide us uh when we will use the when we will
(55:52) start the front end code then we can use like shortcut using this image then you can also install this path intelligence what this is providing you this is simply uh if you write in the wrong path then path into the sense will show you like like a rate sign okay and this will suggest you the correct path okay any file so that's why you can also install this this is a very good extension path intelligence then next one which is also very important this is split here for uh format our code okay and Prisma is not
(56:26) made in this series obviously this one is important K1 CSS we need this for the front end curve okay so Tailwind CSS increases just install this uh extension okay turn right line we can we can skip this because I will use Postman okay this is a kind of similarly Postman Hungary client okay so right now you can also skip this two plus two extensions so what I uh told you like what you need to install then you can install that and even you can also install the every extensions if you want okay so that's it guys so at the next part uh
(57:05) we will totally jump to the coding okay we will start to the code we'll set up the backend server then we will start to code okay so that's it see you on the next part so right now I am just opening my finder so actually you also need to open that folder where you want to actually create the project structure okay so for myself I want to create the project in this documents folder so that's why I just came here okay in here I'm clicking I'm clicking new folder okay and I'm creating a new folder name will be uh
(57:36) LMS then YouTube yep then I am opening this folder into my visual studio code great then from here I am opening my terminal by pressing Ctrl and back touch okay or you can also open it from here so then on the right side we need on server sorry we need a folder name will be server so this is our server folder and in here right now we need to go to First our server folder so CG server yep modules okay so npm init then package name is nothing server version default version description right like this empty entry point this
(58:27) will be our server.js okay not index.js just comment nothing git repository nothing keywords nothing author I'm writing my name you can write your name and enter and type yes and enter that's it so we created our package.json here perfect so now uh let's install some dependencies so what we need to work with in this project so the dependencies is [Music] just type in PMI then Big Crypt Js cookie Purser course dot in v Express then for connecting radius when is I release then we need our Json web token then mongos
(59:28) and TS node K because we're gonna be using typescript okay so that's why then for typescript actually we need to also uh import the type type version okay so like types updated types slash big grouped Js okay like this also at the date types slash cookie burster same add edit types then slash course same for express yep guys so done all writing done so right now just press enter so obviously it will take some time we need to wait for it yep so installing done perfect so now simply clear this
(1:00:32) and yeah everything is okay in here so on the right sun is on the top just click create a new file name will be app dot yes sorry for my phone notification okay so in here first we need to import our Express so import Express from Express then export constant F equal to Express and call this like this okay that's it for now it's perfect now create a new file name will be server dot TS so yeah here you go in here we need to import that app so import app from our app dot slash app okay then now we need to create our server
(1:01:29) Okay so first we need to create a dot in Vin here in the root directory totally now we need our Port which is eight thousand so now come here and right here like this require dot EnV then Dot config perfect so now we can create our server so simply we can write here on Console log sorry not console log app Dot listen then Port so this will be process Dot Eng Dot port again like this and now you can write a console logs like server
(1:02:32) is connected with port process dot EnV dot Port perfect that's it then here for now it's perfect okay so simply save it and now if you check the uh dot in this sorry not DOT in we need to go back to the package.json we need to add on the script for tested okay so like uh here we will simply add right now if for checking it okay and the command will be not similar with uh like JavaScript okay this is new new command like e is then node give then we're using this one respawn and then trans file only server dot yes perfect
(1:03:35) so now if we try to run this by typing npm run if then not our okay so address 8000 is already using let me check probably I run it somewhere okay so let's try it again obviously it should work so yeah it's working so server is connected with Port 8000 perfect so our server connection is done right now okay so on the next next part uh next video where we will connect a database okay database then uh like mongodb will correct we'll connect mongodb then we will also connect the radius with this project
(1:04:17) okay so let's see an expert okay guys before connecting our database and reduce we need to change something in our app.ts will not need to change we need to add something in our app.ts so basically in here first we need to import some dependencies like import our course from our course like this then we need to import our cookie parser from our cookie Purser and that's it for right now okay this is uh yeah this is enough right now so now we need to make our body burster okay so what is this body person I'll explain
(1:05:03) everything don't worry so body person will be simply like this but in this express.json we need to add a new property which name will be limit okay so limit is like we can add anything like this 50 mb okay and in here basically we need another second bracket because it's a property that's why yep so then after it basically this is our body pressure okay this is the limit of the body percent data okay this is important for using Cloud energy okay that's why so this is like you can say limit then right now we need our cookie
(1:05:41) parser so basically this cookie person basically when uh suppose we are sending data we're sending cookies from our front end okay we are trying to add something in a front-end cookies from our backend server okay if we don't use cookie Port something this really doesn't work so with that so we need to use this cookie first dependency okay like this okay now we need to use course what is this course so basically this course meaning let me write it in here cross origin resource sharing this is the full form
(1:06:11) of course so what course doing so suppose we are making this API and we're developing it only for our website okay so we're not adding course then what will happen if anyone try to add this if anyone try to hit this our API okay suppose from any other URL from any other server then they can hit our server because we don't have any codes but if we add course in this course we can add a we can add a property like from which origin we can we can hit this API so in this origin we will add our website link only in this origin we will
(1:06:50) add simply our website and like for right now we will also add the origin like in this localhost 3000 okay so from only localhost 3000 and from on your website we can access this API otherwise the our API will return on course errors okay so if anyone try to access our API then they will they will see they will see an error okay so obviously it's a best practice it's a secured thing of our application so that's why I'm adding it so in here basically we need to say quotes origin okay I already showed you this yep and
(1:07:24) in here basically we can add uh from our DOT Envy so why in this dot Envy if we add in our DOT Envy so we will deploy this website to like virtual okay so from Brazil in our environment variable we can easily change it from our information variable so that will also change from here so that's why you not need to change our code that's why we are adding this uh origin in our DOT EnV okay so here I am creating a variable name is origin and this is an edit because I want to add multiple websites in here multiple
(1:07:57) website meanings like http dot slash slash localhost 3000 from this URL if anyone request then from this URL if anyone request then that will not show any error any course header okay so for testing obviously this is important to act now I am coming here and first we need to import our DOT in win here so simply we can say requires dot EnV and like this dot config perfect then simply like this we can say because we already have it's connected okay that's why so in this origin we need to say process dot EnV
(1:09:01) dot our origin like this now we can finish our function yeah cool so after course basically we need we need to add a simple another comment which will be like for testing our API so we can give a comment like pasting root or or like kissing API not testing root then in here we can say app.get then this URL will be like simple test okay we can write it you can write anything in here if we right now go to this URL then we can see a preview of our API okay like on response so simply we need like three parameters request response
(1:09:52) and next but in typescript we we cannot write these types of parameters this is not rule Supply split as I already said you that in typescript we need to Define type okay so that's why request you need to define the type and this is like our request so obviously import it from our Express then response is like this and in here guys not need anything I this copilot is giving funny suggestion okay it's not neat like that okay so let me do one thing yep now we can start it and in here finish it yeah so race dot
(1:10:31) status 200 dot Json and our success is true and one message like API is working okay like this anything we can write in here okay so I forgot to import it that so it's like giving error okay so let's import it now notice this all little really gone so yeah import done so simply you can give a format okay simple yep looking good now for unknown's roots okay suppose if anyone trying to like writing unknown routes then this will give errors so for that so we need to write app dot all then select everything
(1:11:20) then in here basically sorry the comma will be outside from here like this and request then we need a response the next function like this and in here basically we need to make a variable okay simple variable the constant error or error if anything we can write then we need to Define an error like errors then on package root then you need to say request Dot original URL original URL like this not found okay so this URL is basically not have that's why you need to write this type of thing okay so then after it
(1:12:12) we can write like this but in here basically yeah now it's perfect so you can give a simple format so basically what we're doing in here we are targeting our all routes okay without this one so if Union type this any any URL like this then this will return on error okay so I am right now showing you so suppose I am closing our terminal I mean closing your server and again I'm pressing npm run this and let's go this is like salvation 8000 so right now we can open our Google Chrome new cap then http
(1:12:53) 8 000 so notice root slash dot found okay so this is returning an error so if you're right now type test successful message Api is working perfectly it's working okay like this even the error is also coming in yes okay cool so simply right now what we need to do we need to connect our database so in here create a new folder name will be utils in this folder we need to create our we need to create our db.
(1:13:31) ts and right now we need to go to two websites first one is not two website we need to go multiple website first one is mongodb so mongodb and just go to this website search Cloud energy and also search up stash so what is this up stash this is we need this for our connecting our radius okay so we will use this service it's a very popular service so yeah in here basically let's click login if I already back on so that's I'm clicking login if you don't have accounting obviously sign up and create an account same for mongodb
(1:14:09) same for app stash okay so I hope guys you know like how to create account this is very basic thing so I am just logging into my both these three accounts so yeah I am coming in after after finishing the login so guys login done basically so this is our database so I am simply in mongodb if you are new in mongodb then first create an organizations okay probably it will ask you for right your organization's name and the first time then this will redirect like this not like this this will your mongodb will
(1:14:39) redirect like this so then click new project okay what you need to do right now so in new project so what we will give our database our project name so this will be LMS YouTube we can say like LMS YouTube tutorial and you can write any name this is not like fix name you can write anything as your wish then click create project then from here this will create our mongodb project and now click build your database now in here I am choosing m031 and I am choosing provider AWS and cluster name we can also write LMS then we can click
(1:15:18) this create so it's creating our database now we need to uh create an user in here so here I am just using the default username and passwords we make sure that you are copying the password from here okay because it's important so copy your password then in here this is very important in here simply we need to add a IP address that is 0.
(1:15:46) 0.0.0 so what is this this is basically a whitelist IP address what will uh if we write if we write this type of IP address then our database will accessible from all over default and what we want actually because uh we want our website can visit from anywhere right anywhere in word so that's where we need to add this IP address okay and click finish and close now click go to on databases yep so it's creating so while it's creating we can go to cloudinary then click this dashboard okay so this is our Cloud United dashboard and first let's do one thing
(1:16:18) guys and just come back in your uh dot EMV and in this dot entry basically now let's add something so first here I am adding a variable name is not EnV so obviously this will be like development because we development right now they pull up main yep now origin is done adding so now we need our DB URI okay so DB URI like this then you can give a like this and what you copied the password you can paste the password in here okay what we copied from our mongodb database that's it so now simply click this uh connect
(1:17:03) then from here when I'm clicking connect it's not we're deploying your changes currently actually okay simply give a Reload okay then this type of all problem will fixed all right okay now notice connect is working so click connect and click this mongodb for vs code and copy this UI okay now come back here and paste it and instead of password paste this password cut it and add it in here like this uh wait let's take one thing yeah after support in here and then we need to paste it cool and in here we need to give a
(1:17:46) database name okay like our collection name so uh in here basically I am writing this name to like LMS okay so save it and right now click close And if you write down count this browse collections nothing is coming because we need to connect our database then this will automatically create one like LMS okay in here so yeah DB URI connecting done now we need our radius URL and this Cloud energy so let's copy this Cloud name and obviously guys don't use my information because after recording this video I'll delete this all the
(1:18:17) information so just follow these tips and create your own account and add your own URL in here okay my URL doesn't work obviously then in here simply we need our Cloud name okay which is this one then we need our cloud API key okay Cloud API key like this then we need our cloud secret key obviously keep it capital later because in dot in you need to keep everything to capital letter it says rules it's a variable this way so sorry now paste it yep done now after Cloud secret the main thing is important this is up stash okay
(1:19:10) so my account creating is done in upstage so right now I'm clicking this create database okay and in here basically our database name will be LMS we can write it will be capital then Global reason is choose like I'm choosing this one Singapore near it's near than me okay that's why it's like uh in Asia that's why and obviously click this TLS in a world now click create so this will create on uh radius or upstairs for us so just click this just copied from here then from here we need to add our Regis URL
(1:19:51) like this and paste it so radius meanings basically you can compare like HTTP right now HTTP okay radius meaning and this is the URL so obviously we need to use your another s it meanings https so radius another s okay like that okay not exactly similar but like that then we need to write another uh important variable okay that is our access token private key so guys we'll edit later because this is related to authentication so we will edit later no problem because you will not understand it right now like why I
(1:20:31) am adding this okay so yeah for now this is perfect so you can right now connect our database so for connect database simply import mongoose from Mongoose and then we need our we need to require our DOT Envy then we need to write our GV URL which type is string and process.env.dv URL otherwise like empty okay this will not give an error okay this is like rules of typescript based practice of coding okay so connect DB and this is an asynchronous function and then in this function you use on try catch in this try we need to write a
(1:21:23) rate then Mongols dot connect then we need to say our DV URL then this is like then we need to type this then and this will return on data okay which type is like any we can say and then in here we can write a console log like database connected with data.connection.host like this perfect then after it if catch any error then what will happen simply console log the error Dot message and use on set timeout like connect even 5000 milliseconds here and here we need to Define this type also this type is also like any yeah
(1:22:22) cool that's it so our DB file creating dance around right now let's connect it so in here simply import our connect DV function okay what we created some time ago so connect DB oh it's not working because we need to export it from this file so export default connectivity like this now in here import our connect TV and call it and save it so right now if we come here invalid schema mongodb start okay so something is wrong in here basically GV URL and what is over here so this is URI so change it to URL now save and it
(1:23:03) should work obviously so server is connected with Port 8000 and mongodb will connect right now so it will first like take some time then after it right now we need to connect our release so radius dot TS like this and in radius connections we need to Simply import on dependencies at the first I don't know this is exist in my package.
(1:23:27) json or not yeah this is here I O radius if you didn't install it then obviously install it first checking your package.json if it's exist or not okay if not have then open Terminal and type like npm I release okay so I am simply importing our radius from our eye release like this then we need to require our DOT NV again because it's connected to dot EnV now we need to write our radius client function so release client like this then in here we need to say logic like if process Dot ENT dot radius URL have then we can say a quick and write a
(1:24:29) console log like radius connected yeah then we can return our radius URL like this then we can simply return our reduce URL like this okay so sorry not this radius process Dot ENT dot radius URL yeah cool otherwise simply throw on new error okay if not connected perfectly okay like release connection failed here then we can export hours export constant radius equal to new radius and reduce client like this so simply save it right now cool so that's it guys it's done now dot EnV is also done in here perfectly
(1:25:29) so our radius connection is not working right now okay so why not working because radius is basically connected with caching so this will obviously work when we will make our authentication system then for like for fetching out user data we will use redists on that so then it will perfectly work okay because right now we're not like need ready so that's why it's not showing in terminal actually disconnected okay so that's it guys this was in the video so see you on the next one in the next video we will
(1:25:59) Implement error handling in this project Okay so see you on the next one okay guys so I noticed some problem in my code okay not uh basically code problem this is so uh this that problem is suppose I am closing the server okay and I'm restarting the server again like npm running div then check the mongodb is taking a lot of time to connect the mongodb cluster okay so I do know guys why this is like taking time for my laptop I really do know this because like three or four days ago it's it's worked perfectly but
(1:26:38) right now only right now mongodb cluster doing problem in vs code okay not doing problem in like production mode notice it's take almost one minute to connect okay obviously it's late so if you are not suffering this problem then you're really then it's really good you don't need to worry about it but if you are also suffering this type of same problem okay so if you're if you're also suffering this type of same problem it means it's a bug okay not for me okay it's for like working for everyone okay
(1:27:09) then what we can do we can simply come back this door candy you can comment out it okay obviously we will use this database but for right now as I'm going to be taking lot of time so it will waste a lot of our time okay so that's why I am right now connecting mongodb without locally so how can we connect mongodb locally simply type mongodb slash slash localhost this is the URL of mongodb then we need to we need to write a name so if I show you right now mongodb Compass so we make sure that you download mongodb compass in your
(1:27:45) devices okay like this so this is basically the URL okay so you can simply minimize it right now again then slash elements this is basically database name then we can simply save it so right now if I save the code node database connecting like very fast okay if I right now close the server and if I write down right now show you again then you will understand it note it's connecting very fast okay so obviously for right now we will simply use this but uh when our application will be done okay when we will deploy
(1:28:17) this on the production then we will simply comment this and we'll simply comment about it okay and we'll start everything uh we'll post everything and add everything in this database okay because in uh production mode I notice not not having a problem okay but in just development mode in vs code it's doing problem okay but if you're not suffering it if you're not suffering this type of any problem if you're wrong what will be connecting very fast then you not need to like add this line okay you can work with
(1:28:49) this yeah obviously it's good okay that's it so now let's start work for our error handlers so in here basically in this utils create a new fold need to create a new file not folder name will be error Handler dot TS like this and in here we need to create a class for our error Handler so why I'm creating class let me explain you so probably you know these three letters this is named oop or object oriented programming okay so why we use object-orient programming so for example in our controller we have not on
(1:29:28) the controller we have lot of errors in this project right Zappos user are not writing the phone number either not writing the like email address or name when they are creating account so we need to we need to throw an error like hey interior in enter your name into your email or suppose user is entering wrong password so we need to enter the error like uh please enter the correct password okay so for that's why we need to always like write on raise dot status 500 then like Json send on error response so we are writing this same
(1:30:04) type of object for multiple time okay everywhere we're writing the same object so for fixing this we are making this object oriented class so what this will solve we don't need to write same type of object for multiple time we can simply call this class we can send our error type error message and we can send a status quo then this will automatically generate the error for our project so that's why we are using this object oriented programming even this is the like main reason for use object-orient programming okay like for
(1:30:36) using class object Orient meanings this is like when we are using same type of object for multiple time then we can reduce that we can make a simple class and we can say in the parameters then this will start work okay like shortcut or code yep so I hope guys you understand it now simply create it so I am creating a class I'm writing this name to error handlers like this error handlers now we need to exchange this exchange meaning this is another name okay we can say uh like you know if I say about like functional
(1:31:16) programming okay so this is like we are giving another name that's it nothing else and in here we need to use Constructor okay this is like a system of using object-orient programming okay so Constructor means this receive parameters okay parameter or value this is meanings so what we need we need to send a message obviously error message and we need to send a status quo your status quo so this Constructor will receive two data from us like this yeah then in here basically yeah perfect and then we need to use
(1:31:55) this super so this is this will basically change it okay so super means this is not change basically this is shaking a value okay this is calling it you can say then we need to write this this is a rules of object-orient programming so these dot status code if we write this it means we are calling this okay so this is the status quo yeah perfect then after it we need to call our error class when you use this one capture stick Trace okay this is notice this is uh this is a method okay your Constructor capture structure Trace
(1:32:33) basically this uh its Target object is an object okay so you can write you can read this everything okay like inner vs code vs code is really very uh Advanced code editor okay it's always explain everything so you can read it from here simply so capture extract Trace then in here we need to send our this and this dot Constructor so construct dot like this now in here basically we can module dot exports you can export our error handlers like this so what is this is saying let me check this okay so oh sorry we need to Define type I forgot
(1:33:19) it this is typescript so just add it type in here so this type is basically numbers okay status quo type is so basically guys typescript is saying as this is like we are not setting it so first all our status code okay is status code which type will be basically number like this okay then we can say our Constructor and in here we are writing status code which type is number perfect and super this message this dot status code status code okay sorry we need to write it like capital N yep now notice it's working so
(1:34:01) uh just add this line this single line status quo type is number okay like this is typescript that's one like giving a rook otherwise our code was perfect yep that's it done so Euro Handler class is done so right now we need to make on function in our middleware this is called middleware so let's create a folder name will be immediate wires and in this folders create on file name will be erode.
(1:34:28) ts and in this file we will simply Define some error okay like some common errors and we'll call our your Handler okay so I am showing you when I'm explaining you everything okay don't worry so first import our error Handler in here so error handlers from your Handler not like this so basically I don't know I've imported it yeah module.
(1:34:59) exports or we can say one thing export default your Android like this okay because we are using import module that's why yeah so input error Handler from utils and our error handlers like this now we can say module dot exports and in here we need our three parameters so error which type is any request which is basically our next sorry express.
(1:35:30) js request so let's import this request from Express like this then we have our race which meanings response so import it from next so sorry not next Express then our next which is our next function so import it from Express like this cool now create a callback and simply in here right now we need to Define sort of status code sorry all errors so if our error.
(1:36:03) status code equal to 0. status code if the status code is same then okay perfect otherwise like 500. like this then we need to type on error Dot message like error Dot message yup otherwise internal server error yeah like this then after it if anyone if suppose we are typing wrong mongodb ID okay so wrong mongodb ID so mongodb ID error meanings basically from Front End suppose you are typing is wrong ID okay then this will give an error okay from front and meanings from like from our website API so still it's showing on error what is this is saying us
(1:37:02) okay no problem we'll fix it so wrong mongodb ID error in here basically we need to write like if error and Dot name is cast error this is called cast error wrong language I recall Castillo okay then resource is not found with invalid this yup this is already showing us the perfect message okay like this okay so here not Albany comma obviously here will be like this okay that's why it's showing errors yep now after it now we need duplicate key error so this is basically for our authentication so suppose sometimes uh
(1:37:39) duplicate key can come okay so if error status code is 11 000 then this is called our basically duplicate key error like this okay then sometimes user can type wrong jwc token okay so this is called not JWT token this is called wrong JWT error okay suppose wrong token user is changing from a mail okay then this will give this error so Json web token error if error name is this then basically your Json web token is invalid to the strike in later now after this we need our JWT expired error so sometimes obviously JW it will expire so
(1:38:19) then we need to show another error you like if a road.name is token expired then this and obviously close it yeah Json app token is expired please try again later like this cool then after eight we can right now simply uh make on requested status like this 0. status code then Json success false and message will be 0 Dot message cool and like this so that's it guys nothing else it's done right now so simply give a single format and it's right looking good okay nothing else now save our code so open the
(1:39:02) terminal again now come back or app.ts and let's connect our error handlers in here okay so we need to connect our area and also right now if you have any anything mistake then our our server will tell us like hey this is this was mistake so uh export sorry import our error Handler from not this util server Handler this need to be dot slash go to our medial wires and then this error B make sure that you are writing the same thing okay otherwise it will do problem so module dot exports okay so this isn't problem because we
(1:39:40) cannot write like this so we can say export constant error Handler sorry Heroes middleware we can say like this now save it and come here and we can use it like this yeah perfect done so we can save it right now so still everything is perfect okay and at the last of it okay at the end we need to use it so app Dot use and we need to call our error middleware and we need to call this sorry not need to call like just use it save it now so now notice everything is still perfect Okay cool so our error handling is done right now so we just
(1:40:30) created two files on error and another one is error and other and one thing is still New York important that is our catch async errors okay for create or controller we will use all everywhere we will use asynchronous function okay so that's why we can also make another file for like shortcut our code that is called cache async errors okay so catch async error dot JS like this now basically from here we need to say export default we can like anything like parameters the func type is any and basically in here
(1:41:17) this need three parameters request response and next like this and promise then dot resolve the funk request response next and catch next like this finish it cool so basically in here export default catch async erode like this right here obviously on constant smartly than default export constant caches and errors like this cool and obviously in here don't forget to use our request
(1:42:20) okay so import it like this and then response and next function cool now simply give a format and we can save it and now we can start our next task so the next thing what we need to do that is wait let me see the schedule uh where's the schedule yeah so next thing we need to make our user model design okay so right now we will simply jump to our main work or we'll start to design our authentication or user model okay our database model so this is right very important things okay so uh that's it guys so this was the
(1:43:14) video this is like for only handling error so see you in the next video we'll start to design the model so that's it bye see you in the next one okay so come here and create a new folder in this server and guys I forgot a small thing in here basically so let me just do one thing in here basically uh this is like I'm taking my jss okay so I forgot to write on comment okay the comment is this one npx key is C and init okay so just run this command and after running this command notice this is uh making on Curious config.json like
(1:43:55) which is very important to make okay and yeah that's it we can perfect this is yup so then we can simply again run npm run div oh sorry we need to go to our server first and I am ready to mistake guys first delete this uh case config okay first delete it right now tsconfig.json why deleting because we need to create it in our server directory okay not in root directory I did a mistake yeah now we are in perfect directory so now simply paste write the comment again in PX space TSC then space initialize okay like this
(1:44:39) now yeah perfect this is in our root director server directory code now we can run our server by typing this command in memory div which comment we are always using yep now basically in the server folder create a new folder name will be models in this models create our first user module dot TS and in this model basically now we need to import our mongoose from Mongoose and basically in here after mongos okay we need to also import some other things like document and model and our schema like this now simply import Our Big Crypt so while
(1:45:33) we're importing Big Clip we keep this need for hashing our password okay be Crypt from decrypt.js cool now basically we need one variable which name is email rejects pattern what is this basically this type is reach exp type okay so this is basically uh one uh text you can simply copy it from my GitHub repo okay or basically I just copied it from stock overflow okay this is Need for validating our email okay suppose one is a typing uh like shaharia.
(1:46:19) com obviously that's not a valid email so this email rejects pattern will basically tell or this email rejects button will basically evaluate the mail is the melee mail is validate or not okay obviously need at the date obviously need like dot then.com or like gmail.com yahoo.com okay then the mail is verified so then this will not give any error otherwise we'll simply give an error okay so now uh we need to make an interface in here basically okay so why we are making interface this is because this is a best practice okay
(1:46:55) as we are using typescript so this is the best practice so yeah export interface I user extent document so what is this interface let me explain you this first so you can say this is kind of function okay you can think about it okay but obviously not properly function this is like typescript interface in this interface we can Define some types like in this user model we have name email password Avatar right so we need to Define that type at the top this is like you can say professional thing in typescript okay so
(1:47:27) that's why I'm using it so name which type is string email which type is string password is string and is admin.net and this is not in it copies are giving wrong suggestion we need our Avatar which is basically one object and we have our public ID because as we are using Cloud energy so we have public ID and our URL is up like this then after it we have our role which type is also a string call then sorry guys not need to type string you can simply write here like string and then after it we need another field
(1:48:14) which name is is verified which initial which value is basically on Boolean okay so Boolean which type now we have our courses which is basically on LA this is the purchased course of uh users okay I'll explain this more better like when I'll write the model code okay then so first I am just defining the type so course ID which type is string and like this cool so add a course ID uh uh courses okay guys I forgot hit one thing here need on second bracket like this and sorry not here yes not outside meet inside second bracket
(1:49:08) yeah like this now after it we can add our own method which is like compare password this is like our Another We're creating it uh later no problem I'm just right now just defining the types okay so these few things we need in our model okay this few things basically we need so right now let's start to write the model code so you just schema which is on schema and we have an i user in here I U will be Capital this is basically our interface we are calling our interface design I user is the interface name then in here we are
(1:49:47) creating like new Mongoose what we always do for like create mongods schema in Mongoose schema like this now we need to write our name what we are always to so this name is string obviously you don't need to type one name for create account so required true and if not give it then this will show like please enter your name yeah and email required to do obviously type with this email sorry string not email and after this required to do now we need uh one important thing in here that is validate because we need to validate it
(1:50:31) so how we can validate it in here basically we need to call our validator which is basically one function and we have on value which type is string then in here we need to return our image rejects pattern DOT test and this is the value so this value is basically our email value so we are just testing it okay and if like have any problem if the mail is not valid perfect or validate then we need to write a message okay we need to show a message to the user please enter the email like this now let's type here unique true because
(1:51:15) email obviously need to be unique a two user cannot be with same email that's why then right now we have our password which type is also string then required true please enter your password minimum length will be 6 password must be at least six characters and select will be false what we always write in password then we have our adverters our profile picture you can see and Avatar basically an object so public ID is string and it was a list string called now after 8 we have our role which is also string and default is user
(1:52:03) then we have our is verified which is basically we will check it for admin okay so if is verified is true then we'll show like this account is verified or something like that okay so yeah type is Boolean and default will be obviously false obviously not verified at the beginning then we have our courses array and in this array basically we have our course ID and this course ID type is string so this is basically guys what we are doing in here what is our plan in here so suppose user is purchasing on course
(1:52:47) we will simply add that course ID to the user courses array then when the user will go to the course detail page we'll fetch it will check it from our backend the uh this course ID okay which course user is going okay that codes details okay that course is exist in user course ID if exist if that is existing user purchased course then user can access that course video otherwise each I cannot access that video If I cannot access that courses that course video okay so this is like a security of course selling platform so this is like
(1:53:24) on our plan I will explain it like more practically when we'll do it practically okay so very simple guys this project I am trying to my best for adding it like very simple structure okay like if you understand more better then in here we need to say timestamps true so what is basically these two so if we add timestamp true and then this will add a two field created as an updated that okay so created that means when user will create that time and suppose user is updating profile picture then this will add
(1:53:56) another updated okay so that's why I'm adding this timestamps true now we need to do something in here so a hash password we need to Hash our password because in our database we will don't add the exact password of the user we will hash it okay then no one can learn able to understand the password okay so that's why we need to call our user schema then we need to call this free method then we need to uh not give Fast bracket guides guys first call our I user interface like this now we can call our like save
(1:54:38) okay this is called save via then in here give a comma oh then in here write an asynchronous function give the parameter next and in here just write a logic like if our this Dot is modified is password then call next this is meanings what so wait first let me finish it then I'm explaining you uh this is a very simple thing but I'm again explaining you yeah and simply finish it okay cool so what is this so uh this is meanings we are receiving password from our user right users increasing the password so uh basically that password we are
(1:55:37) simply hashing it with the Big Crypt so I wait Big Crypt dot hash and this is uh giving on value like this dot password okay so these dot password meanings basically guys our client password okay what user is in carrying that password okay and this is where hashing it with chain okay this is like on value okay if you hover it like this then this is property I user password okay so that's it and then after it we're calling on next yep then after it right now we need to make another one which is our compare
(1:56:17) password compare password so either schema Dot methods Dot compare password which is an asynchronous function we need our intern password which type is string basically then we need to write on promise which type is Boolean then simply call it like this then we need to Simply return Our Big Crypt compare and this what is this so uh wait just a second you apply this so what is this guys compare password so you can call it like from a controller easily then we are taking our entire password this is meaning so client convert password is
(1:57:14) giving the user is entering what password that we are sending we are receiving from here then we are comparing because obviously users are not incuring like hashed password user is incuring like the original password but our database password is hashed so we need to compare it right we need to compare with the hash password so when user is giving the password we are simply checking this we are simply comparing it with the entire password okay we are hashing this and we are checking this with this dot password
(1:57:45) this dot password meanings our original database password so then where we are like we will be able to understand this password is correct one not okay then now our model is done so simply export it so user model I user then Mongoose cut model user and user schema like this so I user you will be again capital and now export our default is our model like this cool so that's it guys our model is done and this is a very simple thing and I'm right now formatting our codes so then this will look like more good yeah so
(1:58:32) that's it a very simple thing okay so right now our model design is done so right now we need to start our user create features or our controllers okay so we will start to do this and right now it's really very interesting part because in the next video we will see like how to make how to connect Dynamic email templates with our node.
(1:58:54) js project how to use EGS okay then EGS means like this is called handle words okay probably you know or if you do nothing this is like on uh you can say dependencies you can select on Library okay for singing mail okay for sending mail template then we need to send an OTP to the user for verify that mail okay for activate users so obviously that's coming in the next video so I'm super interested so that's it see you on the next video okay guys so simply close these models and close this types as servers also and
(1:59:32) in This Server folder create a new folder name will be controllers like this in this controllers create our first user controller.ts and in this controller first we need to import our request not from node fetch this will become from Express then response and next function like this now we need to import our basically we need to import right now our user model from our wizard model then we need to import our user which is our interface here then simply right now let's import some few things also like our error handlers
(2:00:28) so this is not any not need any like function so simply you are enter from utilizer Handler like this also want short things catch as in Getters yep like this now create our user or register user so first before guys registration user we need to make an interface so this is basically I name will be anything we can give so I registration I'm giving it like I registration body okay so we need three data in here like name which is string we have email which is also string and we have our password which is string
(2:01:20) and a rule is not need but Avatar is like sometimes Avatar need which type is string okay cool that's it so right now let's create our functions export constant register or registration registration user like this created an asynchronous function and then sorry not asynchronous call out catch async error sync catch a sink Heroes and then our async then request which type is request and response and next like this and guys not need like this line just add a line in here and finish like this and in here basically create on simple track
(2:02:21) as a block okay in here basically if you have any error then what we always do return next new user Handler and send error Dot message and our uh error is type unknown okay so type any then erode Dot message and status code will be 400 perfect and in here basically first what we need we need our name email and password at first we need this few things from our request dot body so we will take this from our request.
(2:03:06) body then we need to check it what we need to check we can write it like is email exist so each email exists so basically we are searching without user model if the email is exist okay if the email is exist then this will show on error okay so like if email exists then this will return next new error Handler our email already existing database okay very simple thing now we need our user with like I register body okay which is our interface then we have our name email and password like this cool now simply create one thing and variable
(2:04:02) name is activation token what we need so right now we need to create another function which is name is create activation token well we'll send this user so let's create this function right now just copy this come back here and in here basically create it export constant grid activation token which have an user which type is basically I user then I activation code which we need to make which is on basically interface I activation token and let's make this in here first interface Eye Activation token which we have on
(2:05:03) token inside of this which type is string and we have on activation code which we can say now screen like this yup so I activation token is a function whose declares is undefined void or must return a value okay yeah obviously we need to return some value that's why it's giving like error okay so now first what we need we need to create a variable in here name will be activation code now let's generate our activation code so math Dot floor and give your 1000 plus matte dot random into 9000 like this then what will
(2:05:52) happen this will generate a four digit of number okay so they make it string because we need string that's why yeah now create our token variable now we need our JWT so let's import this JWT in here import JWT from Json web token like this yeah so then obviously it's still giving error because we need to return then this error will run so JWT DOT sign now we need to send our user then activation code then basically in here we need our process Dot env.
(2:06:47) activation secret what we need to make right now activation Secret then give a comma we need an expires in which is like five minutes like this and simply finish it in here a notch here guys simply in here finish it now return our token and activation code so I user cannot find I user okay it's here yep you will be Capital first make this okay in our uh you know dot in the EnV and paste this activation secret and this activation security number okay on like unique number you can write anything in here okay so I am simply right now entering like this uh
(2:07:51) activation uh activation secret okay so suppose anything and be up like this now come here at the top obviously import our uh sorry require our dot EnV y dot config yep now not process.in video activation secret is still giving error so we can do one thing guys in here simply write it as Secret okay as secure then this will like don't give any error to us okay so what is this secret meaning basically you need to import it from our Json web token like this yeah dump now save it then this error will gone and this is saying
(2:08:42) argument of I resistive body is not acceptable assignable to parameter of type I user so guys this error is happening for this I user so you can tell it like any okay then this will not give any error and will not need like this I user also okay so this is fixed yep done so right now simply what is this is doing so right now if you console our activation token then this will generate one four digit of number okay what you basically need for activator user okay and we will send this activation okay in our user email okay so how to do this so
(2:09:18) simply right now create another variable like constant activation code which is basically activation token dot activation code okay so basically this activation token is not returning number this is returning an object what in that object we have this activation code okay inside of this activation code we have the value okay now let's create another variable name will be data then right here users then name will be user dot name like this then simply in here we need to send our activation code yup cool now constant
(2:09:59) HTML average EGS so let's import EGS or first we need to install this dependency okay so first let me guys install this dependency so import EGS from EGS so let's install it at the first okay so open our terminal and open a new tab now in PMI EGS not only EGS we need a few more dependencies I am installing one by one and the next one is uh we need our note sorry not nodemon we need our node mailers yep like this so install it node mailers done so yeah these two dependencies is enough right now if we need anything else then we
(2:10:54) will add that later yeah so in here basically we need to say a render file okay and in this render file basically we need to write our path so import this path from path then dot join and one thing guys you don't need to install this dependency okay because path is built-in module in node.
(2:11:17) js not net install but EGS here and what is this is saying okay so we need to install the new dependency also notice because EGS is not not available for typescript so just import this this one also npm I this one types and EGS okay so install this GIF engine C simply and still giving not giving error right now notice this is count so just close it and come here so path dot join right now we need to write our dir name so give a first bracket first then d i r name or directory name this is called now we need to write our email path so
(2:11:59) email path meaning template path okay so as we are using here our custom file email file like what what is obviously Dynamic I'm showing you so I'm creating a new folder name is males and inside this mails basically inside these mails I need to go to my all of my folder because I need to copy this email because obviously I'm not write this HTML yeah so in here let's create a new file suppose activation and mail.
(2:12:36) egs so this is uh the extension EGS okay what we are basically using in here so in here basically guys I am copying my Biko Demi mail in here okay because you mean activation code activation mail instead of Big Audio me I am simply adding here uh like LMS activation email okay so what is this this is a very simple email design I am adding here okay very simple email design like on CSS and in here welcome to B code me so I still don't know what is all like uh platform name so that's some I'm just simply writing a welcome to LMS okay we'll change it later
(2:13:11) then this is the dynamic value hello and this is we are adding user.name so this user.name we are sending from our controller so this will be dynamic the username thank you for registering with LMS or what we can give this name guys let's just give a name in here okay like what name we can write here e-learning okay we can say e-learning so like thanks you for registering with e-learning and at the top we can also write like e-learning activation mail yep then welcome to e-learning thank you for registering registering
(2:13:50) with e-learning to activate your account please use the following activation code so this is the activation code please enter this code in the activation page within the next five minutes if you don't register for a e-learning account please ignore this mail if you have any question please don't hesitate hesitate to contact us this is like because anyway no problem so this is the mail template okay what basically we're using in here what we are going to use in here okay and you can use any mail completed any mail
(2:14:21) template in here you can customize this HTML as your wish as your favorite okay any template so this is like totally depends to you which template you want to use here okay you can write any HTML but obviously at dot EGS okay it's it's totally pure HTML I just added EGS and in the dynamic place just add like this okay then this will work as Dynamic value yeah so now we need to we need to type our we need to write here the path okay so path is basically a DOT slash not DOT slash dot dot slash go to this mails folder and this is our
(2:15:00) mail perfect now we need to send our data right so this data is basically this variable where we are sending the name and the activation code what we need in this file so yeah then after it after it simply give a just finish it and in here now we need to use on try catch for send this email okay so it's a try catch Block in this try user edit and now we need to create a new full new file okay new file name will be our send mail okay what we always do for sending mail okay send mail.ts like this and in here
(2:15:45) import our node mailers note aim will be not Capital node mailers import node mailer and trans Porters okay from node mailer like this but node mailer is not exist what is this okay so we need to import the type person also so let's import or let's install the type not import and install it so open it and just paste it npm I save DF then types not mailer okay how I am understanding it notice how typescript or vs code suggesting I say install this one also because these dependence is not a big this awareness is not have like
(2:16:32) built-in types version so obviously install it okay that's it now import our EGS from basically EGS now import our path from path like this let's not need AWS SDK because we are not using AWS mailing here we are using simple node mailer so create an interface name will be email options this interface name okay email options like this we have email in here which is string we have our subject which is string and we have our template which is also string and we have data well we have basically our key okay inside array then string and which
(2:17:30) type is not string which type is basically any okay yep like this then simply right now we need to make our scent mail function send mail an asynchronous function need all options and these options basically our email options like this and this is our promise then type is like void then yep cool now Creator transporter so transporter uh and simple variable okay not import transporter not import your transporter okay so transporter which type is transporter so node mailer Dot createtransport and inside of this we need few things so
(2:18:23) process dot EnV and SMPT host what we need to create obviously right now we need our SMP Key Port okay which will be also like this okay not like this so SMPT Port cool then after it we need our service now we need to write the auth or authentication part okay so we need to type the user which will be SMPT mail okay which mail basically were using here then we need pass okay which will be our process.
(2:19:11) env DOT SMPT password like this so yep now done it's done inside here we are getting some value like we are getting email subject template and data what we are getting from our options so here just distracting it in here okay now what we need we need to get the path to the email template file right we need to get the email template file because we are using a dynamic email template okay so template path will be basically this dot dot slash not templates because we have our mails folder wire we are adding like the all uh templates okay mails not mail we make
(2:20:03) sure that here also males yeah males cool template now we need to render the email template with EGS obviously it just means obviously we need EGS extension so HTML which type is string now average Dot render file template template path and data now we need basically our mail options not need this so constant mail options yup so this is our mail options from is SMPT mail two is our email this is coming from our user email subject is subject and we are sending the HTML which is basically our HTML so we're not going to
(2:20:59) write it because same thing that's why then we can call our transporter dot send mail and we can adjust mail options now at the last simply export our send mail like this so right now we need to add these few fields in our DOT EnV so first SMPT host and then we have our SMPT SMTP port we have our SMTP service then at last we also have SMTP mail and the last one this is which is SMTP password so we need to add this we need to add this view field value okay so first basically our SMTP Port will be host will be SM
(2:21:59) TP Dot gmail.com like this Port will be 4 6 5 service will be basically Gmail and SMTP mail what we need to write right now okay so these two things basically which I right now we need to go to our Google Chrome so right now I am going to a Gmail I cannot show you which email right now I am going because uh for this reason YouTube deleted one of my videos so I cannot switch okay so I'm just logging into one of my email and after login I'm showing you okay okay guys so simply come here after login to your email just
(2:22:39) click manage your Google account okay from the right side okay second icon then this will come to this URL my account.google.com and just click the security okay just click security B make sure that in your Google account you already activated two-step verification otherwise this will doesn't work what I'm right now starting right now I'm going to do okay this will doesn't work so obviously uh won this two-step verification okay like this so now simply search something from here okay that will be our uh app password
(2:23:17) just search It app passwords like this so this is the app password so I am just clicking this app password and after clicking app passwords this will ask you for write your email password again okay so I'm writing my email password then I'm showing you the next screen okay so after entering your password okay then this will redirect it to this screen app passwords simply click this select app and click other custom name name will be node mailers click generate after click generate this will simply generate one password so
(2:23:52) yeah this is our password so simply copy this password okay simply copy this password and I'm clicking right now done button so simply I am closing it okay now I am come back in here now SMTP password is this one cool and SMTP mail I am writing my mail what basically I add it in here yep like this so this was the mail okay what basically I am adding in this here so then this is the SMTP password so simple very very simple thing okay then right now come here come this uh same mail and other first at the first line import our
(2:24:37) this dot in Z okay require dot EnV in years like this so what is this is saying so basically guys our typescript is giving some warning okay so let's fix this warning so simply in here add a purse int okay Parts initialize it's a JavaScript method probably you know this then in here if not have otherwise added like 587 okay like this cool so we already added this SMTP port in our DOT EnV like this yeah 465 kick okay this is perfect now Simply Save it and now come back here and right now in here basically use
(2:25:17) our send mail import it from our send mail and then then in here we need to same sum we need to send some value in here like email we need to send some argument like user dot email then we need to send on subject so subject is basically activate your account this is our uh email subject then after it we have our template so template is basically our activation template name okay activation mail dot EGS okay this is like the name the file name then we need to send the data cool now you can give a comma yeah that's it so then after it this will
(2:26:13) return on response so race dot status 201 dot Json now success is true and message will be please check your email user dot email obviously added like back teach okay otherwise dollar sign it doesn't work please check your email to activate your account like this cool so then we need to send this activation token to our front end like activation token Dot token okay we will simply add it to our way registers when we register user then
(2:27:19) we will change it okay and then catch if catch any error then return new error handlers hero Dot message obviously your will be any yep that's it so that's it guys done our uh registration user function is done it's a very big function I know but it's very important okay and that's it guys I hope you understand everything so right now let's test this so let me close these folders create a new folder name will be roots in this Roots create our user wrote dot yes now in this root basically
(2:28:01) import our Express at the first from our Express then we need to import our resistor registration user like this from our controllers now we need to create our router which is Express router now simply router dot post registration and registration user like this now export our default routers cool now come to app.
(2:28:42) ts and in here before this testing API add this Roots command comment okay not comment Now app dot use this will be slash API slash V1 Theon basically meaning then we can import our so just call it export import router so guys not make it a router okay make it user router so user router and paste it in here so either router dot post yep now come here and add here user router from our routers and user routers and Cooper that giving some bad suggestion here so this is roots slash is a DOT root like this cool copy this in here call this user router
(2:29:35) like this okay yep now save it and check if there have any error or not okay so not have any errors so it means we can check our function right now so I am going to use Postman so if you don't know about Postman Postman basically on API testing software okay from that software you can test we can test our API API endpoint so I am using the internet version okay I mean the I am just going to Google okay and I'm searching Postman and I'm using it okay so basically uh if you just need to go to Google Chrome and you need to search
(2:30:16) Postman desktop okay so Postman download so uh first download it then install it and then you will also get this type of screen okay and if you don't know about like anything about Postman then please like watch some YouTube video okay it's very simple software then and if you know then obviously it's a good and this video project which is also was like need some basic knowledge of my Instagram okay so this is a very basic knowledge okay so uh in here in this Postman I'm creating a new collection and I'm giving
(2:30:48) this collection name to uh our e-learning because this name is e-learning e-learning like this in this e-learning let's create our first request so click this plus icon click it post request add your HTTP dot slash slash localhost 8000 slash API slash V1 slash registration for what was that let me check our root this is the output registration perfect so right now let's try it okay so jsonline some first sent cannot send localhost select a different agent okay so I just need to guys connect my local Postman agent okay so I
(2:31:42) forgot to connect it let me connect it then this will work so now it should work to Simply write here our Fields so first we need our name so like name is I'm giving my name okay we have our email so let me just write anything test not test is available so we need to obviously type A exist email okay otherwise it will doesn't work because we need to okay so I am just simply writing my email in here so like programmer shahadir added Gmail Dot com okay then password will be one two three four five six seven eight
(2:32:41) that's it so now it sent now check so it's it's sending request so let's come back here in this Gmail and let's check so welcome to e-learning hello thanks for registering thank you for destroying with e-learning to activate your account please use the following activation code so our mail is perfectly coming and this mail is this uh this code is valid for the next five minute okay so this is like really looking very professional so right now we need to Value we need to create another function okay we need to
(2:33:30) validate our email in here so and after this register user right now we need to activate our user okay so I will do that at the next video I know this video is like very big okay but I added a lot of things in this video okay I hope guys you enjoy click OK if you are watching it from YouTube then obviously hit the Subscribe button forget more video more advanced topic because I think I am the first YouTuber who is making like how to send Dynamic mails with EGS okay how to design mail templates or this type of advanced
(2:34:02) things and adding it like in a single video I I believe still does not have any uh video in YouTube right now okay does not have any video on YouTube right now similar with this so obviously the Subscribe button smash the like button share it with your friends this would really appreciate my work okay so that's it see you in the next video okay guys so simply come here and give a new comment like uh activate users now first we need to create an interface because we are using typescript so I activation token not token this is like
(2:34:42) request and in here basically we have two data okay we will receive two data from our front end okay on this activation token another one is activation code which boost type is string like this now we need to create our functions export dot sorry not DOT export constant our activate user Now Catch async error asynchronous function request response and our next function like this then simply finish it and make one try catch inside this and catch will be simply this one if catch any errors then return this
(2:35:47) and this type will be any okay so at the first we need our activation token and our activation code what we will take from our request.boji as activation code request activation request okay it means this means obviously this data need to this type okay so that's why we are using like typescript so then after it we need to create a new variable like constant new user which type is basically user and now we need our I user again okay I user meanings our uh I user interface what we are using in our model like this
(2:36:38) then we need our activation code which type is string then right now we need to JWT dot we need this JWT dot verify we need our activation token then process dot EnV Dot activation Secret as our string okay then basically in here guys we need to write as user like this okay and obviously give a second bracket in here yeah so what is this we're simply creating a variable new user and which user type is this okay so this is basically for validating we are writing we are calling this I user interface okay this is our activation code this is
(2:37:37) typist string then where jw.verify we need to check the activation secret okay we need to check the activation token is perfect or not and even the activation code also is its uh validate or not okay so right now we need to Simply check it like if new user dot activation code if not matching with our activation code it meanings it meanings invalid activation code okay the activation code is not validated okay so invalid activation code we will give this error to the users okay otherwise simply distract our name
(2:38:19) email and password from basically hours new user dot users okay now we need to check it is this exist in our database or not so exist user if this user is exist then simply then simply the return on error like email already existed these are already exist okay not email we can say user basically we are searching through email so that's why you can say like email alert exist perfect then in here basically we need our user which is I read user dot create usermodel.
(2:39:20) create then in here not user this is Visa model okay guys usermodel.create then in here simply we need to write the all things okay what basically we are receiving name email and password like this yeah so then create our user simply and in here send on response like 200 1 and then on Json response success is true so yeah successful it's enough okay so activation token activation user function create also done so simply save it right now and come to our roots copy this paste here and this is also post request slash
(2:40:14) activate user then activation activate user okay call this function Simply Save It check everything is okay so right now we need to try this so come back to our Google Chrome and guys first save this okay so save this in our e-learning and create a new folder name will be Alt in this auth folder let's save this so yeah save done and we can change this name okay we can rename this so rename it simply resistor user like this now create a new request will be post request this one slash activate users okay obviously you need
(2:41:08) to send some value in from here like Json but what we need to send we need to send our activation code then we need to send activation token so uh what will be these basically this value let me check our vs code again so vs code meaning is our name okay because if any if you have any spelling mistake it will doesn't Works activation code activation token is this one yeah perfect and activation code cool so guys let me type a new mail in here okay like support at the date now click Send because the previous mail
(2:42:05) is expired okay that's why so let's create and notice this is sent a new mail so let me check the mail so yup notice this is the mail welcome to e-learning and this is the activation code so first we need to copy this activation token because we need to send this activation token also just copy this come here this activation token will be this activation code is basically our this on 898 so that's it now click Send so let's go secret or public key must be provided something error so just check it from
(2:42:40) here activation Secret let me check out dot EnV activation Secret okay guys so in here I did a spilling mistake check this is not activation we need another I in here okay like activation Secrets obviously take it from our DOT entry okay Mass need to be same spelling otherwise it will doesn't work so save it right now and let's give a retry again so click Send so success true it means it created account so right now if we go to a database so as I am using uh our local database so simply open the mongodb
(2:43:26) cluster not cluster mongodb compass and connect it with our this URL okay proxy we know how to connect it then simply come here and give a refresh refresh meanings but it's the refresh or click this and click here now simply click users and click this refresh icon yep there you go what is this is our data so our user is perfectly creating name is this email is this password is hashed perfectly rule this user is verified false and this is the course area obviously this is empty okay so it's perfectly working as we expect so
(2:44:13) our activate user is also working so you can simply save it and in here we can give this name to activate user so simply save it like this code so let's change the new thing in from here and let's take a new thing okay so let's type this mail okay sponsorshipme.com like this then let's send a request to this mail okay let's send another like activation code okay so please check your email and obviously copy this activation code guys and come here update it like this and from here suppose I'm
(2:45:03) typing like wrong activation code and sent notice invalid activation code so obviously it doesn't work right now and if we right now type the correct one so notice it sent a new mail in here this is the mail and this is the activation code 5461 so let's use this now hit send success true if you come back to a database if you give a refresh notice data is coming perfectly it means it's perfectly working if we enter wrong uh OTP then it will doesn't work okay so it's perfectly secret right now okay so
(2:45:38) our both work is done activate user is done so right now what's the next one the next one is very important and that is right now we need to implement our login features with our access token and refresh token okay so I know this is the like most uh interesting part in this tutorial because uh there's not up like that much tutorial with like activation token and refresh token like the advanced authentication system okay so I am also very interesting for teaching you this okay the next part I'm showing you this
(2:46:12) don't worry so see you on the next video so guys first uh we need to go to our DOT ENC okay because we need to make some config variables so in here basically after uh Cloud secret care after activation secret we can make it so this will this basically our access spelling mistake access token and basically our refresh token what is basically uh we are going to implement right now okay so access token will be on a one like string okay so let me go to like a website like you can go password generator okay you can search this you
(2:47:02) can go to this fast website password generator this one then click this use password generator click here like 50 now copy password okay then come here simply and paste it same for refresh token but obviously this will be not similar password we need to change this so uh click here and again click give a Reload now make it 50 now copy password and done so just update it with the new one yep so this is a refresh token and access token creating done refresh token access token here now let's come back to our user model and
(2:47:47) right now we need to make some few things in our user model okay we need to create some custom methods again in here like this so first add this in our interface okay so like we need our sign axis token uh we can give this is to Capital like this sign in sign access token not sign in sine access token then which type is string yep we can copy and paste it and in here instead of sine access token right here sign refresh token like this code at the at the top we need our dot EnV so require dot EnV Dot config like this then basically in here
(2:48:50) we need to import our JWT from our Json web token like this stereo Bluetooth from Json web token yup done now let's scan this bottom but before this compare password we can make it so this name is first one is basically sign our access token okay so this sine access token meanings uh when basically user will log in we will create a access token okay obviously we will create it and we will add it to our Json application okay we will edit or we will sign it then when user will give like a Reload or user will give
(2:49:35) access to like you know me slash me okay get user then we will simply compare it okay so I'll explain it like with programming also then I will understand it more back okay so first let me write it then I'll explain it with you it's a very easy thing enjoy schema dot methods then sine access token we can say this turn on function and inside here we need to return our JWT Dot sign and then basically we have ID which will be our this dot underscore ID then process.
(2:50:19) env because our basically access token what was the name let me let me copy this obviously this name need to be fully Sim access token like this and otherwise empty string cool let's see so basically what is this we are simply signed in our access plugin okay jw.sign this ID basically this queen this will be this login user underscore ID okay we are setting that in this ID okay then we are adding this access to you know our uh brought you in the access token okay then now we also need to assign our refresh token sign refresh token
(2:51:11) then user schema Dot sign refresh token then return sign refresh token like this call we make sure that again the environment the config variable name is similar or not because if not similar to it doesn't work okay so that's it so our two method creating done so basically how our uh this this type of authentication system working how we are working with refresh token and access token so first understand these few things so when we are hitting this slash API slash user slash login from our client site with
(2:51:53) the post request we are sending this two thing right email and password to our server then server first validating the credentials the email and password is correct or not if that exists in our database or not then you're also checking the password the password is correct or not if correct then server sends cookies to the browser okay so uh in here basically when server sending cookies to browser server is sending two cookies okay not single we are setting refresh token access token access token will be expired after uh five minutes
(2:52:26) and the refresh token will expire like like after you know after a long time okay but access token will refresh after uh not refresh access token will expire after a short time then when basically access in here just noted when we're getting this hitting this API slash user slash me then if token is expired then expired okay so when we are hitting this one slash API slash user slash refresh we are getting new access token how we are getting the access token so basically this access token is this access token
(2:53:03) will expire after five minutes so when it's going to expire our refresh token automatically generating on another access token so this access token is the main things what is uh working behind the authentication system okay we are validating our user with this access token and the refresh token is helping to generate a access token and access token is expiring after five minutes so this is like a higher secure secured thing so obviously after five minutes five minutes or after giving a Reload our access token is changing so it means
(2:53:34) it's highly secured no hacker can like easily hack this okay because this is changing okay so that's it and to get new access token where we are hitting this URL okay then this URL basically Returns the new access token okay then when we are getting new access token then from front end like we are authenticated okay if not have access token then obviously not authenticated and if access token is not like uh expired not expired then validate okay then it's authenticated the user is authenticated in the front
(2:54:08) end but if like expire then this is not authenticated so guys I hope you understand the system how actually this refresh token and access token work okay so right now I'll show you practically with code so this was like on plan okay what we are going to implement right now so let's start it so our custom method creating done so right now just come back this user controller and after here give a comment like login user so first right here on interface name will be I login request we can say okay and we have email and password right in
(2:54:54) this our login user email and password with both types string okay now simply make our login function so export constant login user cache async error asynchronous function request which type is request response and next like this now create and try catch and catch will be this and your type will be any yep so inside this try first we have our email and password and we are receiving it from our body right and
(2:55:59) this type is as I login request I don't know why go by let's suggesting this long thing obviously it's not good okay I'm writing again everything so I login request so this email and password we are getting it from our body and in which we are using this I log in style interface because in this interface we have email password Define type that's why okay after it is not app email or password if user is not in charging email or password then return new error Handler like please enter email and password
(2:56:36) okay like this and then basically in here guys we need our sign if I got it here then we need to if we have like the if user is entering the all field generative search right now the user with the email and we need to write this select password then it will like select the password also now if not have user if not have user then return this like in Relic email or password okay like the user is not exist if the email is wrong then now we need to check our password is password match so we are right now calling our compare password
(2:57:18) method okay custom method okay not these two things this one previously we created this one compare password so we are sending this inside password right we are sending this password then this is basically comparing it with the database hashed password because password is hashed okay then if our is password is not match then return on error like this like invalid email password okay and then finish it yep and then if everything is okay then what we need to do if everything is okay then we need to Simply change it to another
(2:58:05) function so let's create a new file in this utils name will be JWT dot KS which file is going to be very big but it's the main important thing in this like authentication system it's the main important thing okay so first let's import require our documents we not import then import our response from Express then import our I user from our user model then import an important thing which is already so right now we are going to use release simple release from dot slash release dot slash release now create another
(2:58:54) interface which is I token options so we have expires which type is gate we are writing this interface for like saving it to our cookies maximum age which is number HTTP only which is Boolean same site same side which is basically legs strict non non uh or undefined yep like this then we have our SQL which is basically Boolean but secret is not available for all time so that's why we need to use this like question mark okay optional chain now create our send token function so same token then we have basically here our user
(2:59:55) which is our I user interface we are calling it then status code number and one thing guys if you are not able to importing this I user I don't know I added it in the video or not obviously export interface I user okay if you if it's not like importing okay then add this this this keyword export okay before this interface like this in our user model then in here race which type is response now we need our access token enter first so access token what we are getting from our sine access token so sine access token then
(3:00:47) we are also getting a refresh token from sign refresh token like this okay so property not exist sign access token let me check guys obviously some spelling mistake obviously in here oh sorry yeah so spelling was mistake again notice in here a spelling mistake a c c e double s okay not what's the correct spelling yeah now it is the correct spelling we make sure that again you are writing that same spelling otherwise it will it will no problem okay In Here Also change it to like sine access token cool and sign refresh token
(3:01:33) you can copy it yep for safety purpose now we need to do one thing that is we need to set up or we need to upload this upload session okay session meanings when user will basically log in we need to upload that session to our radius okay for maintaining sketch but we'll do it later first pass our environment variables to integrates because sometimes like our environment variable not working so that's why we are doing this okay so I am writing the comments like if you understand more better first environment
(3:02:12) variables to integrates with fallback values okay now we need on variable in here like access token expire so parse ink then in here user process dot EnV Dot come here access token expire so we need to add new tooting in here okay access token expire new to new to variable which value will be 5. access token expired will be 5.
(3:02:52) and refresh token expire will be 59 like this now simply process dot EnV then in here we have our not refresh token first we need our access token expired like this so spelling mistake again let me let me copy this yep otherwise 300 and then comma chain just add it okay this is like for safety purpose okay if undefined then add this one then copy it and paste it in here okay now just change this name to refresh token expire refresh token expire and in here will be our refresh token expired like this which will be 100 sorry 1200 and change it like this
(3:04:00) now we need to add our options for cookies like constant access token options like this so what is this I do it we are calling this one then we are writing expires which is this one and then maximum age is this one HTTP true and same side locks like this simply add this line now copy this and paste it again and add here registration token options yep and this will be not access token expert this will give a refresh token expired copy and paste it in here like this then yep then everything is same and after this now
(3:04:57) we need to do one thing so here I'm just adding a comment for like safety purpose so only search security through in production okay so this access token will be in this access token we need to add another uh field name will be SQL which will be true okay but not right now this this secret to will be only in production mode in meanings when we will deploy it then this will then this will be secretary okay not needing refresh token just editing access token dot SQL intro like this then after it simply add raise Dot
(3:05:39) cookie now give this name to access token and this will be basically our access token and then our access token options like this yep cool then simply in here add our another cookie so registered cookie refresh token refresh token and refresh taken options like this cool done at the last we need to sync on response without status quo what we are basically receiving from our uh from our here okay we were calling it when we will call this send token we will send this status code not only status code will send this user also yep
(3:06:36) then success will be true and we need to send the user and access token like this cruel so this is basically our registered cookie okay perfect so now simply give a format and save it now guys simply upload our session to reduce right now so what we will do basically when user will uh successfully log in okay then we will add that user session to or reduce database okay so radius dot set user dot underscore ID and obviously we will send this full object so Json Dot stringify and send our user which is any type like this so yeah our
(3:07:31) concentrating dance writers simply copy this same token come here and paste it in here import it simply send our user to 100 and response like this cool so now if we try this route it will start to work perfectly now simply add this route in Our Roots users root just copy this paste it in here make it login user and login user like this now come back to our Postman close this one click new request click this post request then this login we need to type out Json data so what happens if we not enter the password and
(3:08:26) phone password and email okay so slash V1 slash logging is not okay login user not need login users just edit login okay now sync please enter the email and password okay so we need to enter the email password obviously so email will be basically uh which which account we're gonna log in so just check database let me copy my database password email okay this is email and password was simply one two three four five six seven eight like this and obviously if I try to write in a wrong password now hit send in the Gmail password okay so seven
(3:09:10) eight now check it's returning our value okay success student this is the user this is the access token and in our cookies it's adding the access and refresh both token with an expired Market expired okay so it's perfectly working right now okay so come back here basically in our user controller and let's make another one which is very important right now that is a log out user so for logout user what we need to do export constant log out user accessing errors asynchronous function then request response next
(3:10:01) in here try catch and then catch will be this which type is any now raise Dot cookie now access token just set it to empty okay so when basically we will log out we need to empty our token empty our cookie is not token then this is our access token remove this access token remove this refresh token also like this then simply send on response 200 dot Json success true and messages is a logged out successfully like this now simply give on for me like this save it come to our users root copy this paste it in
(3:11:07) here make another one this will be gate request and logout users like this now come here and right now again come here obviously save it and see give this name to like login user save now click here Now log out this one and simply hit send and logout successfully notice that cookies is right now empty so logout is also perfectly working so that's it guys so at the next video basically guys I will show you like how to authorize authorization okay with this access token on your fish token how to generate new refresh token okay and like how to
(3:11:57) check the results authenticated or not you can say Protect it out okay so see you on the next video at the last part I forgot to show you an important thing and that is when we are logging to our account by clicking like this then just come back to our apps Dash and simply give a result then note this is adding to our bridges okay perfectly I think okay then basically we need to do one important thing and that is in a log out when basically we are logging out we also need to delete this session from our reduce database so how
(3:12:35) can we do that for do that we need to make our protected router first so let's make this protected route okay so just come just click this immediate one not utils and create a new file we can create it by writing auth.ts like this and simply in here first what we need first we need to import our request then our response and our next function yup then simply come here and create a function export constant is authenticated authenticated then this is going to catch async errors call it then asynchronous function
(3:13:30) request response next function and in here that the first we need basically our access token because our authentication system working behind with access to Google Cloud authentication system working through this so access token we can use request.heathers.authorization yeah but we can also use one thing so for backing we will right now do this like request.cookies.
(3:13:57) access token and then we have our access token so if not have access token it means our user is not logged in so then return new okay return next new error Handler user is not authenticated or we can say please login to access this resource not this just write please login to access this resource and we need to add this status code sorry guys this is not erode this need to be error handlers yep then in here we need to say our status code which is 400 yeah cool so if not have access token then this otherwise what we need to do otherwise
(3:14:42) we need to Simply create another variable like decoded now use await and simply use our basically JWT or list one thing is not need average just write JWT import JWT from Json web token so this is not Json web token error simply right here import JWT from our Json web token like this cool so Json web token JWT dot calls this verify method now use our access token and compare it with our JWT secret not jwk secret this this should be access token okay access token we have simply verifying it so if not decoded it meanings obviously the token is not
(3:15:47) valid then we will not show this like this login to access this resource will show access token is not valid like this so guys if not decoded then this otherwise we need to do one thing we need to Simply search our user from basically not user this will be from our average dot get our this decoded dot ID because we are storing our data in our radius cache so that's why so now if not have user it means user not found okay otherwise request.
(3:16:42) user will be this okay and call our next yeah so request.user doing problem so guys you notice this our typescript giving an error like property user does not exist on type request Paramus dictionary or any any so what we can do for this so for fixed this we can do one uh crazy thing and that is we can create a folder in our root directory in This Server folders okay we need to create a folder folder name will be at the date types okay so this is only for our typescript then right now create a file name will be custom.d.ts okay like this and first in
(3:17:26) here import our request from our uh Express okay and then after it we need to import our I user okay interface like this one cool and then in simply in here Implement uh right here our declare one thing like Global declare this Global then writer name space and this namespace is Express then in here we need to write our interface so interface basically request then in here we need to add our this user which type is I user like this so now if we save it and if we come back here not your gun no error right now showing so yep our Euro fixing done so
(3:18:14) simply right now let's test this is authenticated is working or not at the first we can give a comment like uh authenticated user okay authen so let's come to our roots and when we are logging out Simply add here is authenticated give a comma import it from our middleware auth now now click this log out to note our response is please login to access this resource which is meanings you are not logged in that's why it's not working so if we right now hit here and note it also right now locked out
(3:18:54) successfully it means we are perfectly authenticated right now okay all right this logic is perfectly working so we need to do one very very important thing right now and that is when we are logging out from here we need to delete something from our radius so we need to delete it so radius dot Del call this and we need to delete our user dot ID okay so user dot ID meanings request dot user dot ID like this so we can do one thing we can make a variable like user ID equal to this otherwise empty string so this is saying request.t is a
(3:19:45) possibly undefined so simply add here an optional chain okay after it then it will start to work now add here our user ID so it means it will delete cache from our radius okay so right now let's check it so come back to radius node we have all cache in here so simply first login First otherwise logout will doesn't work here so this is our cache now come here and hit log out so wait again log out login now create logout and logged out successfully so this will obviously remove our cache so let's check
(3:20:26) okay it's not removing so d8 let me let me guys check what's wrong in here basically so basically this will be guys this is not uh working let me let me do one thing let me check our user the request dot user first console log it and check guys what is basically coming here okay when you are hitting our log out so again login come here and hit this log out then let's debug it so sorry we have underscore ID we not have ID so that's why it's not didn't work change it can't describe it then now I believe it should
(3:21:02) work so simply save it right now again login from here so this is our radius cache we have data now hit our log out and I believe now it should oh sorry cookies only have refresh token no sorry now add here now hit return so log out successfully now hit here and note yep our radius cache is also perfectly clearing from here so it's perfectly working as we expect okay so our either thinking that it is also working right now we need to Simply make another function in this auth.
(3:21:42) ts so this comment will be validate users rule like this now simply create uh one functions like export constant authorized roles then like this and in here we need to return and we need to add our like parameters so request response and next function now inside here we need to say if roles dot include like this wait let me let me oh sorry so if it rolls dot includes request.is.
(3:22:21) roll otherwise empty string then roll request dot user dot role in here same thing like add in question mark optional chain yeah perfect so if rules dot include it means what we are sending from our what we are setting this rule like when we will call it suppose in here I'm calling like uh one thing I'm adding here like add these authorized rules so authorize roles and from here I'm changing like admin so obviously this user's role is not admin so then this will not in this will not match okay so then this will show an
(3:23:00) error like admin role role user this is only available for admin but our our user is not admin so rickets.roll which means like user is not allowed to access this resource this will show in this type of error so I am showing you so just come here click so first we need to log in so login done and now again hit so notice roll user not alert to access this resource so it's perfectly working out for our authorization is also done so done that's it so guys simply create a new function in here and name will be our update access
(3:23:43) token this will simply update our access token because our access token is expiring after five minutes so that's why we need to update it right all the time so update access token then catch a sync error asynchronous function request response and next function like this then on try catch and catch win with this yeah and in this try first we need our refresh token so request dot cookies dot refresh token as string yup now we need to Simply validate this refresh token is this refresh token is verified or not so JWT dot verify
(3:24:49) hours refresh token with our process Dot Eng dot refresh token secret as string then as JWT payload okay like this JWT pivot will be imported from our Json web token then after it let's make a variable like message so could not refresh token yeah so in here now if not decoded then return new error Handler and this message cool so this is meanings the uh this refresh token is not valid or it's expired okay so obviously a refresh token will be expired like after three days okay so then in this time we will automatically
(3:25:51) call this we'll obviously call this one and we'll change our like refresh token and access token so what is this meaning this meaning is refresh token will never expire okay refresh token will never expire but access token will expire after five minutes so when access token will expire we will simply generate a new one by using our refresh token that's it so now constant user equal to uh sorry sorry not user guys because we need to check out stations right now so station area dot get and decoded IG like this and
(3:26:30) this is obviously string now is not have session then obviously something is wrong obviously is is a logged in then obviously we have session for the user right we are adding it so then obviously same error then create a variable constant user this will be simply our sessions and Json Dot purse or or let's check one thing from here basically what we are doing in here uh in this middle west yeah so Json purse and this session so this is meanings guys right now we have our data in this user our radius data so simply we can do one thing right
(3:27:26) now we can simply make our access token right now so access token a variable like this then obviously not same token we need to create it we need to create a new one so JWT DOT sign uses sine method then this will be ID which value will be user dot underscore ID then process dot Envy DOT active token secret as string okay so not active token secret we make sure that this is active access token okay not anything else yeah access token as string like this so and uh one important thing have guys I forgot it okay right
(3:28:18) now I just remembered it that is we need to add on expires in okay so access token will expires in like five minutes okay and also in our model I also forgot it if you come back here the node we are simply signing it but we forgot to add the expire scene so add this expires in so this is our sine access token okay so access token expired will be five minute and our refresh token expired will be it's a long Okay so this expires in will be basically like seven day or three day we can see okay yeah save it same things also doing here okay so then
(3:28:59) in here after access token create or refresh token so refresh token jwd DOT sign like this IG then these are transcribe tnz then this will be refresh token not refresh talking secret then in years this is called refresh Dragon secret but as we gave this name to like refresh token so that's why we cannot change it okay so then in here finish it yeah and refresh token in here we need to add an expired scene which is basically again seven day or three day not seven day three day cool so we successfully signed our two new uh
(3:29:51) token now what do we need to do we need to update our cookie we need to update our cookie with the new token so access token and our access token and we can do one thing we can call our this not this watch so let me let me just go to this file jwt.ts here we can call this access token options okay so uh one thing guys I also notice right now come back this jwt.
(3:30:32) ts in utils folder okay in this line number 33 access token options in here this is a mistake so let me break down this code again for you what is this is meaning Excel access token expires so this is value is what this value is five okay our access token expired value is 5 and this 1000 meaning is 1000 millisecond obviously this is a wrong thing right because we need it to be five minutes so what we need to do we need to multiply it with 60 then what is this is meaning this is meaning 60 ah wait wait 60 Minute okay so access token expired means basically
(3:31:10) 5 then this is like 5 minutes then 60 Minute sorry 60 Seconds add here another 60 like this yeah perfect then in here also do the same thing okay 60 into 60 yeah again into and in here in this refresh token expire after here at 24 this is meanings on day then 60 minutes and 60 seconds and 1000 milliseconds okay obviously add this otherwise uh this x pair will not like that much valid okay yeah 16 to 60 and also into 24 I have forgot to write it 24 and 60.
(3:32:01) men like this cool and in this dot in the guys change this 59 to 3 okay because we are making it J that's why so this is meanings three okay this sorry this refresh token expired meaning is three so three day this is meanings okay and this is also like 3D and so this refresh token will expire after three day and access token will expire after like five minutes okay so yeah done so uh one thing which is like we need to do right now that is we want to use these few things from this function also so what we can do for that
(3:32:44) because same thing so that's why we can use it so just cut these few things again just watch it cut it from 21 to 44 just cut it add it before starting this function centroken function okay then what will happen we can export it but inside a function we cannot export that's why I catch it and I'm just right now adding it in outside of this function so that's then we can export it like this now if we come here we can say access token X options notice this is our access token options so we can add the options again in here then
(3:33:28) our refresh token we also need so refresh token and this will be our refresh token and this is our refresh token expire sorry refresh wait let me let me just copy this name this name is refresh token options uh which on sorry we need to add this one not expire one okay add in here export this before this refresh token options like this now import it we can import it so options imported yeah done so obviously import it at the top like this and then in here we can save our code so we are updating our cookies now we
(3:34:23) need to send on response so JS dot status 200 Json then status will be sorry not status yeah we can we can send status which is success and our access token like this okay done so uh we can simply copy this name okay and right now we can come back to our roots and we can make a new route so come here after this log out just use here use router dot git and then slash refresh token like this then each authenticated no no not need is authenticated obviously if it is authenticated then user will not ex not give request for
(3:35:22) refresh token okay we can say simply this one update access token just call it yeah like this then simply open it in here okay and go to our Postman right now and this is a new request so slash not this slash refresh so first hit Center desktop isn't unavailable just a second guys let me run my Postman isn't yeah done so simply right now click sync notice uh API B and refresh not found uh okay obviously spinning mistake meanings let me check refresh token not refresh token we can add a refresh simple okay
(3:36:07) like this now come and again hit send JWT must be provided its meanings this refresh token is expired look it means the user is not logged in so obviously we will not hit this refresh token if user is not login then either if you if they either just login then only this will happen Okay so simply log in again right now and check our cookies is right now like on August okay on August this is 29th July which is perfect now come here and hit send must be provided okay so it meaning something is wrong so request.cook is just refresh token
(3:36:53) refresh tokens secret is guy is not available that's why simply update it with our refresh token okay so change this I that's why I'm saying you multiple time okay please check the environment variable name okay if if I have anything mistake it doesn't work okay now again hit note it will work it's success it's showing success it's generating new access token new refresh token okay so all the time when we will click here this will generate new notice 14 and 49 so when I am hitting this
(3:37:27) saint then note it's changing the expired it means it's updating new okay it's not updating only access token it's updating the refresh token as well okay it means user will not see like logged out from the website okay but behind the website at the back end we are always updating it okay for like most secure okay this is like more secret after five minutes five minutes obviously it's changing changing so hacking this authentication system is redirect very hard okay so this is like very uh
(3:37:59) professional authentication system of what like Facebook Instagram or the Step Up website is used okay like professional website so that's it guys now what we need to make we need to make another very important uh route which is very easy that is get user info okay and now we need to create a new folder where in This Server directory folder name will be Services okay in this Services we can create our user Dot service dot KS simply we will add the all services in here like get user by ID so export get user by ID
(3:38:46) in here we will receive our ID which type will be string then constant sorry export constant here and this this function is asynchronous function then constant user equal to 8 not basically user because we need to write here user module okay edit user model dot find by ID this ID then return our this user like this not you guys return user basically send on response okay so raise dot status 201 dot Json then success will be true and send this user could give a comma in here okay so yes we need to Define it in here
(3:39:51) let's do one thing so response basically it will import from typescript sorry from Express here that's it so save it right now so now what we will do simply come here make a word export and get users info okay then catch async errors asynchronous function request response and next function and then in here you don't try catch what you always do then this will be the catch now constant user ID equal to request Dot user dot underscore ID yeah then simply call our
(3:40:58) gate user by ID and send this is already and also send a response like this cool then what will happen this will automatically work okay we not need to do like we're not adding multiple thing in here okay so now come here and copy this and add here slash me obviously this need to be is authenticated then our get user info like this save it so let's try this root Karma Postman and obviously save this route to refresh token like this now in here let's create another one okay and write our this one slash me so now hit send
(3:41:54) and this is giving out data okay roll everything so like this perfect so this is also working so simply save it and write here name to like load user yeah done so uh our this uh this work is also done so right now we need to also do an important thing and that is social out okay we will Implement these features from our front end the like we will take the everything from front end but in backing we will simply add a few things okay I am showing you so simply create a so guys basically we will implement this feature from a front-end from our front
(3:42:39) end implementing meanings we will send email name Avatar from our front end how first we'll verify it with our next auth okay then when next what will give us response like email name operator then we will simply hit this route okay then this route will be simply create our users okay so exports export constant social author asynchronous function request response sorry race bonds and next function like this yeah on try catch and catch will be this one in this try simply we are getting some data from our front end like email
(3:43:42) name and avatar from a requested body so if this is this email is have in our database if user exist or if you just have then simply if needs a not have sorry if neither if these are not have then user model that create send this view data and send token like this yeah otherwise otherwise simply send the same token with our user and this yeah cool so it means if log if user have authenticated then not need to do anything if these are not authenticated then create things are simply okay because we are validating
(3:44:32) everything from front end that's why yeah so one thing is important in here guys and that is we forgot to write the interface okay so just write it like I social auth body like this and we have like this three Fields name image and Avatar which type is string and in here request.
(3:44:59) body as our I social body like this cool save it and add this social auth you know this root user router dot post slash social auth is authentic no not nothing is authenticated obviously not then social auth colleague done cool so now let's try it so suppose come here click this post request then social auth or basically we can add it like this social auth or yeah now slash AP slash video slash this social auth now come here and first try something click Send social lot not found uh how okay sorry I forgot to save it now now again hit
(3:46:02) user validation failed yep obviously we need to enter the information for creating yeah so uh enter the information like we have name email name and advertisement okay so name is like uh test okay because you are testing it right now email is also like paste at the date gmail.com password is one two three four five six seven eight okay we're simply testing it after testing will delete this user don't worry sweeter valuations phase please enter your password password okay so let me check guys okay I forgot to write the password so
(3:46:57) oh sorry because we are not entering password okay so yeah one important thing yeah very important thing so when we are registering account with social media then obviously you're not entering password right so obviously just come back to our user model and check this password type is sorry password required is true obviously not this required to just remove this then minimum length we can keep it okay because right now this is not required true so password is not required through we make sure that you remove this one
(3:47:34) okay because social otherwise social what will doesn't work okay so now hit sync it's created perfectly so if you come back our database then if we give a Reload then yeah here's the data cool and the Avatar what we need to say but I didn't set it like this avatars name image and Avatar so we can write the Avatar also okay like anything https dot slash slash test.
(3:48:15) com like this now hit send so yeah this is basically sending us a response but one important thing is no this is not creating a new user this is not creating a new user okay so our social auth is also working I cannot show you it like more uh convenience way because this social work is not possible with backing we need to implement the authentication system in front end then I will show you the like more advanced okay we'll validate everything don't worry don't think that it's not secure obviously it's highly secured okay from
(3:48:45) Front End will validate everything so simply save it right now so social authors this were simply getting this few value and we are creating on users okay so our social auth is also done so uh this was the video I'm not making this video to more big okay and the next one is let me see the schedule in here the next one is we need to make this one update user info password and Avatar so at the next video we will update our user information real application passport and Avatar so see you on the next video so let's give a new comment update
(3:49:22) user info then after it we need to create our interface I update user info like this we have our name email and for now we have our only name and email okay then export constant update research info catches in casual asynchronous function rigorous response and next function then like this and in here simply first we need our email and name so first name and secondly email so then this will become from a requested body as our I object user info yep now what we need to do we need our user
(3:50:27) ID what is basically having this user request.q7. underscore ID okay then we need to search this user like this not find by user and object like this just wait user model Dot find by ID and in here we need to send this user ID like this so now we have to write one logic in here so like if we have email and user then only write this each email exist so uh suppose you are not update the email okay and user is writing on email which is already exist in your database obviously you cannot add that so that's why we need to search it okay the email
(3:51:18) is exists in our database or not so if email exists then we need to return an error like email already exists otherwise otherwise we can simply set our user dot email to email like this now for name so suppose this is engineering only name not entering email then only this will call okay and if entered the name then this will be also called so user dot name equal to name because name can be anything okay duplicate name can in our website like there are a lot of people who will who have like similar name okay so no problem we can add like
(3:51:55) same name but email is obviously need to be unique so now average is a DOT safe like this now obviously an important thing we need to do and that is we need to update our cache or reduce database okay because user is updated and we are taking data from our we are taking data from this basic activities okay so that's all you need to update this with this user ID and Json stringify this user perfect now at last we will send our response then dot Json success true and this user yep like this done so we can give a format
(3:52:46) and that's it there you go so uh few things guys I want to show you right now basically I did a mistake in this service I'm showing you okay which is a mistake not basically a mistake you can say this is or this will also work like how we are getting user by ID this is this will also work but as we are using radius so why we're finding it from our mongodb database okay we can simply get this data from our radius so use your average radius dot get and this ID so obviously right now this user is like
(3:53:21) not this user is passed in Json so we need to Simply change it to Json dot Parts this is a Json like this okay you can write a logic in here like if app user Json and then on the input is quote and Ben also only changes response like this okay so simply right now give a format cool so right now also everything will perfectly work and uh one small things also guys I noticed okay uh again on simple simple problem okay in our this jwt.
(3:54:08) ts so I am explaining this to you this access token expire okay this refresh token expire is perfect okay so let me break down this code again for you this access token expired meanings three okay so 3 into 68 meaning 60 second so we are simply making three seconds 60 seconds 1000 milliseconds obviously not meet this okay we need minute basically okay so what we need to do we need five minutes not need five second so for that's why we need to add here another 60 like this then what it will do it will add five minutes not five second yeah like this so this is simply adding
(3:54:54) 60 so this access token experiment is 3 so 3 minute second and a millisecond 1000 milliseconds 60 seconds 60 Minutes in here this is uh sorry sorry guys this is not three this is five okay and this refresh token expired is three so three into twenty four it means uh on days so 24 into three it means three day then we're uh changing that to 60 minutes 10 60 second and one thousand millisecond okay so just add this 60 in here in this line number 26 and at this line number 27 that's it then everything is okay so uh right now
(3:55:31) come our uh right now come on roots and let's make another one so copy it and paste it in here and this will be put request and update user info like this obviously is authenticated on the protected or on the login user can update information and then we need our update user info function like this so save it and let's try this so yeah and uh yeah one thing I do know I did a lot so let me let me check it again guys yeah in here in this update access token function okay what we're doing here we are simply
(3:56:23) doing everything right we're adding the response when adding it new but uh when we are adding new token we are not setting that in our request dot user so request.user we also need to set our users request.user will be our user like this one okay so simply add this single line in here 20 to 228 in this update access token okay it's important now we can save and we can test Our Roots so come back Google Chrome come back this Postman in here create a new root so now simply click this port and we need to call this
(3:57:03) one update user info now come here and this is empty so simply right now hit send please login to access this resources meaning it means our basically access token expired that's why so what we need to do we need to Simply refresh our tokens right so let us click this refresh token then this will again refresh the token so now again click the note it's showing our data okay so update user info obviously in here if not happy user and email and okay so it's everything is similar okay so this is our data this is our data so
(3:57:39) suppose right now we on a change our name username so suppose I am adding here like shahadir so uh this is database okay if you check from database also like this is the Sharia this this one we are changing okay wait let me let me show you one thing this one okay and this is the mail and if we come back here in this apps cache note this is also sorry when this is the image okay so now let's try it by writing shaharia and click sync not it's changed to shaharial come to our up stash click here and note it's changed
(3:58:19) also come to our database and click here then it's also changed perfectly so suppose right now I wanna add another email okay like email and update our email so uh suppose I am writing the same email again okay same email meaning suppose this one okay supporter edit because another mail which is already exist so then name will be like okay then click Send not email already exists so we cannot write the same email obviously it doesn't work but if we add it like any another mail like me.com but it's
(3:59:00) updating perfectly updating from everywhere from here from our database also like this so our update user information perfectly working so I am changing it to the previous mail okay which was the perfect mail okay like support not support it was sponsorship yep like this now synced so yeah updating again so we can save this and we can give this name to update user info now hit save cool now come back our vs code and let's make the next function which is basically for update our update user password okay in here first we need to create an
(3:59:48) interface which will be I update password okay and inside here we have two thing old password new password okay now create our functions export constant update password get a sync erode asynchronous function request response and next obviously Define type yep and catches this one so first we need to search our user or in order to search because you already have data in here so we are getting our old password from here okay we are getting two things old password and new password
(4:00:52) so we are getting it from request dot body as our I update password then simply create on variable like user which will be our request Dot user like this then after years we can create another variable like each passport match so we are comparing we are calling this user and we are writing this compare method so Elevate user compare method with this old password okay so compare password is basically taking our information from here and checking it with the highest password okay so if the old password if our is
(4:01:37) password matched not if not match it meanings the password is wrong so inverted password okay invalid old password not password yep then if the password is valid then what we need to do we need to Simply update our password so either dot password will be our new password and basically guys this is request.
(4:02:09) izzer but uh one thing I need mistake in here just right here elevate user model dot find by ID this one so basically guys our typescript is showing us on warning which is really very uh good suggestion for us and that is they are saying basically your typescript saying yes in our uh when user is basically creating account with social authentication then there is not have any password so obviously they will not able to update password because they did not have any password so then what we can do in here we can validate our code in here that
(4:02:47) first line okay in here like if our user dot password is undefined then write a message like invalid user okay then after it we can do the changes right now just remove this question mark then everything will fix yeah now edit user dot save like this cool now simply send on response 201 dot Json success2 and this user yup so yeah our update password field uh features is also done so simply copy this function name come back this here and write here like copy this paste it in here sorry then in here paste it update
(4:03:44) password okay then update users password obviously it's authenticated and yeah perfect now let's try this so come here click here then update user password now hit send sorry this is put request not get request support request and hit send token is expired yeah so we need to refresh our token actually after five minutes it's it's expiring that's why now hit send invalid users okay so invalid user meanings basically we're not engaging that's why okay we are not entering this information so
(4:04:38) let's write another logic in here like if not have old password or new password then please interval the new password like this now let's check this will show error please enjoy all the new passwords like this cool now we need to we need to enter our old password which type is Json yeah old password old password which is basically one two three four five six seven eight right or how do you create it yeah eight so new password right now we need to enter on new password so new password suppose we are writing
(4:05:22) here like uh eight zero like this okay so uh just give your wrong password first now hit send and try it invalid users okay so guys I found the issue in our code why actually uh password is not coming okay the error is basically the line number 333 in here we are adding select false in our user models right in our user model we are adding this like past parties select false so from here obviously we need to write this select and this password otherwise password will not uh password will not come in this user variable so just add this dot
(4:06:05) select password okay and obviously one important thing very important thing I forgot and that is we also need to update our radius client okay radius database so radius dot set the new updated user like this because the password is updated right so this will be equals.id and json.stringify the user perfect so now come here and hit send then note in Reddit old password so simply right now enter the correct password like this it's it's giving us our password so now if I hit send again in the record password so our password updating is
(4:06:44) right now working but right now if you right now again add like zero zero zero and this one to like one two three four five six seven eight then hit send notice this is updating our password so our updating password feature is also working so make it update password and Save cool now at last we need just a single function then this uh like our update user or authentication all tasks will be done that is basically our update profile picture or Avatar we can say picture so create our export constant update profile picture cases
(4:07:28) encode async request response and our next function like this on try catch catch is this one in try first we need to do one thing basically in here in here create an interface name will be I update profile picture like this and we have our avatars in here which is basically not string which is basically on object where we have our public ID which is string and our URL which is string like this so simply we will take our
(4:08:32) one thing guys don't add this public ID because uh from Front End will not receive like this type of things we'll make it from back end so simply keep it a string now avatars we'll get it from UK start body so sometime if not have our way quick first search our users so user equal to basically our request Dot user we can say yeah now if our user dot Avatar dot public ID app it means these are already updated profile picture then we need to delete from it cloudinary okay so Cloud energy import cloudinary
(4:09:22) or I forgot to connect Cloud energy also so let's install this dependency name is cloud energy okay so cloud in a free npm iCloud like this so now import Cloud energy at the top import Cloud energy from cloudinary like this if we have public ID meanings if this is already able profile picture uploaded in Cloud9 so we need to simply delete that so I like Cloud generated upload.
(4:10:07) destry user effector and public ID okay if not a public ID it means these are not happening like any profile pictures yet so what we did what you need to do then we need to Simply awake cloud energy.v2 uploader and then dot upload we need to upload this Avatar okay what is coming from our front end basically then after uploading it so basically guys let's do one thing in here simply create a variable like my cloud we can say My Cloud then we can call this and in here when you are sending this Avatar okay we can also specify the folder which name is
(4:10:50) avatars okay like this yep cool and with any skill is like not need right now or we can add width okay like with this 150 okay profile picture that's why yeah and uh now we can say user dot Avatar will be our on object okay so uh let's do one thing make these two user ID this will be request dot user dot underscore ID and in here we need to search it so constant user await request dot usermodel dot find by ID and this is showing earning yeah done let's just add optional change user model dot find by ID and we're just
(4:11:44) searching it then we can update our user and Avatar right now simply write here our public ID which will be my cloud or public ID and we have our URL which is my cloud.seq version like this cool so we are simply uploading it okay and when we are destroying it we can simply change this public edit and this will work and obviously at the first at the top we need to write on logic in here like just cut the code and write here the logic if not have Avatar or if have adverted then only run this okay so user dot Avatar and remove it
(4:12:23) either is possible in all okay so user is in here uh if Avatar and user have then do this code we can close our terminal so if a veteran user have then first we are deleting our user profile picture okay like if the Avatar have already have one profile picture then otherwise we are simply um sorry guys I have a mistaken here so this logic will be if Avatar and user have okay so uh if user.ever.
(4:13:03) publicidhab then first uh delete the previous one okay destroy the previous one then again upload it like this I'll explain it again with you okay don't worry first let me finish it my cloud and just upload it like this uploaded or upload Avatar and first first delete the old image okay then this is basically if we have on Avatar user have on Avatar then call this if okay so if user have on Avatar upload it okay not for like Google authentication obviously when we will do Google authentication we don't have public ID because we're not
(4:13:59) uploading that image in our Cloud energy we are simply getting image URL from Google or GitHub then we're adding that in our URL okay Avatar URL so that's not need to delete the image okay then that will come in this else block okay that will simply upload a new image and return these few things okay that's it now at last we can say awake user dot safe like this and call it also a rate reduce dot set our new user ID and this new user okay now simply say non-response 200 Json success is true and Ours users yep cool so then our user
(4:14:58) profile picture update is also done so now what will happen if you right now simply come here and suppose uh wait wait first at this root copy this come back towards roots in here first copy this paste it in here cut it paste here and update user adverters obviously it's authenticated cool so our controller is done now come back to our Postman this will support request request then update user Avatar so update user Avatar like this come here body inside here simply add our have attached so in this Avatar basically we need to
(4:15:57) add something okay like https dot slash slash obviously guys this will Cloud energy wheel doesn't work in here okay because we are uploading image in here like in cloud and one thing one important thing we imported cloud in it perfectly okay good but we also need to set this Cloud energy in this server.
(4:16:18) ts okay how let me I'm showing you like Cloud energy config okay import cloudinary at the top Cloud energy from cloudinary now cloudinary dot config in this cloud9.com is like showing some problems so just do one thing card discluding array right here Cloud energy then as V2 sorry sorry V2 as cloudy not V2 yep like this now config is working so then simply in here right now we need to write our Cloud name which is basically our just complex.
(4:17:18) nv this Cloud name okay then we have our API key which is basically our Cloud API key like this and we have our secret key which is our Cloud secret key just copy this yeah and update it obviously it's same okay so our cloud is already configuration is also done cool now close these two Files come back here and from here in here everything is perfect guys so let's try this route right now okay come back here update our Avatar so in in this Avatar we need to send our image averter value okay so obviously this need to be our
(4:18:18) base 64 image okay otherwise it will doesn't work so base 64 image so I just copied on image from internet guys this is on base64 image okay like this so right now if we come here and if we enter this okay this is also looking very big but obviously Cloud unit is support on the base64 value so now hit send Json web token is expired okay yeah obviously expired because it's more than five minutes that's why now it again sent this is giving internal server error and I found the issue why this is giving internal server error
(4:18:51) because we did a mistake in our Cloud inner collection uh connection just come this server.ts and in here not secret key this will be API secret okay API key and API secured like this now if we come here and if we hit this like saying then registered you it's taking time cool this is our Avatar and this is the link of our image so if you right now copy this image link or if you press like Ctrl and uh command and left side of your mouse then note this is opening in the new tab so our update Avatar is also
(4:19:25) working perfectly right now okay so update user adverter like this save it cool so that's it guys so what this features is also done okay so right now we will simply our user authentication work is almost done because yeah user authentication work is done so at the next video from the next video we'll start a new section we'll start our course model design then create course upload course etc etc okay so that's it see you in the next video so guys now we need to start our course model design so let's come here let's
(4:20:03) come our models folder and create our course dot model dot TS like this now in here first we need to import our Mongols then our document then our model and our schema like this from our mongos cool now we need to basically create an interface so we not need to create on the single interface in here basically we have multiple interface okay so first let me create one for review ID view which will extend on document where we have user which type is object not string okay or uh review which giving the review so we need that user okay object we can say
(4:21:09) product is basically not need guys because this is core selling platform so raking and comment here this is important cool then now basically in here we need more few things so let's do one thing and the top create another interface like I comment c will be Capital because it's a best practice then exchange our document and in here basically user object then our comment is string and rating is number sorry guys we not need rating okay we just need our user type is object comment which type is string okay like
(4:21:56) this so now in here we need our comment replaced and we will simply call our eye comment and we will say mgl cool now we need another interface so basically guys you might thinking why I am creating multiple multiple interface okay so basically I'm creating this structure okay after creating the full structure you will be able to understand what is this our course model structure or course model dataways structure okay so first let me finish this then after I review we have I link so again it will be Capital it's a best
(4:22:39) practice and it's again exchanging document so document then we have our title which is string and we have our Ur level so this URL meaning basically guys our uh link URL I'll explain it again later okay so first let me finish it so interface now we need our I course data which is exchanging our documents and in here we have a lot of things like title okay which type is string description string video section uh sorry guys in here not need these few things let me let me remove it first need Title secondly descriptions okay
(4:23:28) then uh we have our video URL okay our course that I have video URL we have our video thumbnail which type is also uh basically which is not string because um yeah video thumbnail will be not string because we are using cloudinary so this is an object we can say object like this then our video thumbnail after it we have our title oh sorry I updated title now we have our video section which type is string okay then we have our video length or video duration but we can say video length which type is obviously on number
(4:24:31) then we have our video player which is string like this now we have our links which is I link copy this and put this game here like this then in here we need on sization okay which is basically string and we have our comments which is I comment like this then we have questions uh okay so basically this is codes data that's why in here not have that okay cool yep sorry sorry guys and one thing in here I did a mistake this is not comments okay in course this will be questions not comments okay but structure will be like similar in course
(4:25:26) we can create questions right because I can ask question to any course like how big audio me website is also working okay then after each let me see something guys this is I comment okay which we have user and on comment yep and then this is ID view where basically we have our our user object rating number comment string and comment replies here obviously when you will give review then I can reply that as if you only admin can reply this okay so obviously we'll validate it from Front and don't worry now interface
(4:26:04) our i-core switch exchange document now this is our main code status so we have our course name okay which is string we have our course description which is also string we have our course price which is number we have our course estimated price what is this this is basically suppose uh 100 of course you are giving with 30 dollars okay so 70 percent discounts you're giving so this is these estimated prices basically the 100 okay you can see which was the original price but you are giving this with this price okay so I'll
(4:26:50) explain it again okay when I will start to Walton so after this we have few things like we have thumbnail which is an object yeah then we have our texts our course tags which is string okay guys this is not need to put anything like this so text and description is also not in its optional chain because it's required to root tags also required true okay otherwise like we cannot suggest our user like okay so tax is also true obviously you need to enter some text from admin dashboard then level course level which is a string like
(4:27:31) intermediate beginner or this type of thing then we have our demo video URL which is also in string then we have our benefits which is string then sorry guys benefits is not string this is an area Okay so first write this title then make it a string and this is basically an array like this now we have our prerequisites okay for this course prerequisites like this cool we have reviews right now which is basically our eye review and like this cool now we have our course data which is icore stata so we are right now
(4:28:27) using our all uh interface from the top okay notice this is basically the main interface now we have our ratings which is number so obviously uh we will not send this ratings like when we'll create it obviously that's not having its rating so then add your optional chain okay then we need our purchase okay how many purchased how many users already purchased this okay purchased this is also not available at the first time so user number now finish it yeah now our all interface creating is done so right now we can simply start our
(4:29:08) model creation so constant review uh schema okay so first create a review schema so new schema ID View like this and we have our user what is basically an object and we have our rating which is type number and default is uh obviously not have any Course Review then default will be zero okay like this it means not have any review okay then comment which will be also string cool then after it we need a link schema so create our link schema then in here we need our title course title which type is string s will be capital
(4:30:05) then we have our URL which type is also string and sorry here is the comma done now we need our common schema okay so comment is schema and our new schema I comment and inside this we need our user which is object we have our comment which is string we have our comment replies which is our common schema okay so not common schema sorry guys this is an object okay like this so comment replies okay o will be capital and this is saying argument comment
(4:31:09) replies oh okay so in here we don't edit comment reply so let's add our comment replies yep like this and you can add optional chain in here okay yeah cool so after it we can right now create our final and last schema which is our sorry not final schema this is like after it we will create our final last schema this is our codes data schema okay so we have basically our video URL which is string we have our video thumbnail which is object we have our course title Sorry video title which is string we have a description video description and
(4:31:56) video section a video section is also important which is string then we have our description which is string then we have our video length which is number we have our video player which is a string we have our links which is link schema and Association string comments or comment schema like this okay not comments basically questions okay so this is our course data schema we are breaking our code in multiple multiple okay not by our code we are breaking our main model schema in multiple parts then it will be easy to
(4:32:41) maintains and it will be easy to like control everything okay like validating the data data and that's why we are like dividing it multiple multiple parts because if you think about a course selling platform the data structure is like very big the course data a lot of thing having a course right so that's why we need to like break down it multiple multiple then you will be also using the understanding okay this is like more readable code right now so course schema which is a last schema Now new schema and like this
(4:33:15) and name which type is string then we have required true and course name is not nicknamic crew obviously then we have our descriptions which is string a one thing guys this is obviously is required to do a description so type string and required rule then in here and one thing you can also add here message okay I'm not reading it but you can add it like this because I am not adding it because we will obviously validate it from our fronting because we are going to be using uh formic and yup you know for for our form
(4:34:03) validation so obviously this will be like highly secure from our front end also okay but as here required to group then also it's secret from backend as well don't worry so price which is number and required true then our estimate price which is basically not required okay so record false is basically not need we can remove it then in years we have our thumbnail which is must be required so which is okay so thumbnail is basically an object so we have our public ID which is string and we have our URL which is also string like this
(4:34:59) and one thing we can do one thing guys we can cut it and we can say sorry paste and cut this string in here first add required to rule and this type is train cool now URL which type is also which is required true and type is also string cool and uh yeah just give a simple format then after Aid after thumbnail we have our texts which is also required true okay so type string and that was required to then we have our course level
(4:36:10) which is also type string and our uh record true okay now we can copy these two things like next one is our demo URL simply paste it now again next one is our benefits now this is obviously on array so title which is string okay but obviously editing an object it's a system yeah is will be capital then we have prerequisites which is also similar now we have our reviews which is our reviews schema we have our course data which is our Core State schema notice how shorted your code
(4:37:14) right we're simply calling that otherwise this model is very big seriously this model is very big so we divided it multiple multiple parts and ratings which type is number and default is zero cool and purchased which is also number and uh value sorry default will be zero like this so that's it guys our model design is yeah our model design is so now we can simply call our course model like this then we can export our default course model cool so that's it guys done this video work is done so from the next video we'll
(4:38:17) start our controller okay we'll start to create course with this data so see you on the next video so let's close this files and come back this controller folder create a new file name will be our course Dot controller dot TS like this and at the first we need to import our next function then our request and our response like this then we need to import our catch async errors then we also need our error Handler yup uh then we also need our Cloud energy so import
(4:39:21) cloudinery from cloudinary now simply give a comment like upload course now create on function export constant upload course like this and on try catch yep error type will be any and in years return next newer error.master than 500 like this now at the first we are receiving data from our body so constant data equal to request dot producing this data variable we have our all data what we are receiving from our client side or from our uh from our Postman okay so now what we need we need to we need our thumbnail from this data so
(4:40:23) that's why we're writing this so thumbnail equal to data dot thumbnail this is our course thumbnail because we need to upload our course thumbnail at the first time so if thumbnail have only thin constant my cloud equal to average cloudinary V2 uploader dot upload like this and in here we need to see our folders and not need any uh not yet guys any size right now okay so we can say folder courses yeah code says you can say then after it we can add our data dot thumbnail we can change our data okay we can add here our
(4:41:05) public ID which will be our my cloud Dot public ID and we need basically our URLs which is the mycloud.sql URL like this now we can do one thing we can come back to this Services folder we can create another file name will be course dot service dot TS like this in here we also need our response like this then we need our course model like this now we need to create our course so create course so export constant create course catch a sync errors
(4:42:10) asynchronous function then we have our data which type is any and we have our response which type is response like this now in here we can do simply one thing in that case we can create a variable like this and we will take this data from we'll send this data from our course controller and then it's our course model will simply create our course like this and we'll send this response now come here and call our create course service and send all this data that's it and also need to send out response and argument for next does not
(4:42:52) provided okay so same down next also yeah like this done so create course our create course is done we're sending our this data and we're receiving it from here cool so now we need to test this API so first come back this roots and create a new routes name will be course Dot root dot TS and we can copy few things from our users Roots like this one and then this one we can say this to course router now course router Dot post and Slash create course and in here we can upload our we can call our upload
(4:43:56) course function okay upload course like this and obviously call here each authenticated like this also authorize rules so obviously on the admin can create a course right like this so simply give a format and now export default course router cool so you can also close these files now come back on app.
(4:44:41) ts and the top import our codes router course router which is course dotted out like this now in years we can paste it and we can copy this one and this one like this course router yeah done so we can give a format here also cool so now we can cast out this Roots so come back to our Postman and create a new request and basically in here in this body we need to enter our information this will be Json data so uh basically guys this is a lot of long data so that's why I'm copying this data okay so how can you get this lot of things okay
(4:45:39) I'm showing you first this is the data okay so let me maximize this here so anyways this should maximize okay so this is name our course name this is our course description codes price course estimated price 10 codes tax level demo URL okay this is basically as you're using uh video saver okay videos report so that's why uh we will use it like embedded code okay embedded video player in our website so that's why we need to add this URL I'll show you like how how can you get this even don't party so then
(4:46:18) this is benefits where I'm adding like titles this is pretty quizzes this is the course data okay I'm only like only on for on the testing purpose okay so this is the all data uh what basically we need we need for Creator codes okay and few things we need to change from our model so just come to our course model again and this thumbnail required is not true okay because right now we cannot change our this thumbnail because we need to change on the we need to send on base64 weather okay so which is like very big so uh
(4:46:57) obviously we're not send right now thumbnail when we Implement in front end then we'll see in the thumbnail image okay so that's why you remove this required tour otherwise this will no problem when you try to call create course and also in this course data schema guys we don't flip this video thumbnail so why we not need this because this video URL already have one video thumbnail okay so if you want to change our course data thumbnail we can go to our video swiper admin dashboard and we can change
(4:47:28) the video data okay I mean video thumbnail okay I'll show the everything don't worry so right now just remove this one and this one now we can come back here and guys this feels uh this is like a very simple thing okay I'm showing you how I created it so just come here just come this is our model course model and just watch this all Fields okay name required because obviously we need to add it so you can add anything in here okay I just copied it from my on course and I just added it as well like it's
(4:48:01) looking original okay but you can add anything uh whatever you actually want okay no problem so that's it now now in here come here and our course root is create codes so copy this now come here and edit create course and this is the post request so now hit send and again maximize this one and I hit send Json web token is expired okay so yep uh we need to refresh our token and don't worry obviously we will refresh it automatically when we will give a Reload in our front end okay so you don't need to do it manually this will
(4:48:48) automatically happen our within our backend okay so don't worry for this like on when you use this website and you need to like multiple time refresh token no obviously this will refresh token Auto mechanism from our website at the from our front now it's sync okay notice role user is not allow it to access this scissors very good so what you need to do we need to come back to our database and which account basically was logged in right now and you check that so gate is an info yeah load users here said hit send so we are logging right
(4:49:26) now this account so make this egg and make this uh users roll to admin okay this one is sponsorship one so obviously make it to admin otherwise it doesn't work so yep like this now come here and uh hit this sent again it's showing role user is not allowed okay yeah because in our app stash we also need to update it okay so in here this is showing through this user and we're getting data from our upstash okay no problem uh we can do one thing let's do one thing guys simply log out okay just log out
(4:50:12) and again login hit sync and now check or up stash it's also updated to admin yup now try to create post sorry quotes not post then it should work so course religion fail game or URL path is required so notice demo URL which you will be capital okay now it's sent now yep our course creation is done now come back here and give a simple reload from here courses here and this is the date so name description price estimated price tax level course 10 demo URL this is benefits array prerequisites array and course data array like this
(4:50:58) so yep everything is here we successfully created our course so uh now we need to make another features which is basically edit course okay so export constant edit course and in here make here catch so simple setup what we are always doing okay like that and in here we also need to finish it yeah cool now we can copy this line yeah now after this basically so we are again getting our data from our front end okay like this then we are also getting our thumbnail now we also need to say like if you have thumbnail okay because
(4:51:57) uh suppose you don't wanna edit the thumbnail but if you wanna edit another Fields okay then this will doesn't work so that's one let me just write this logic if have thumbnail then first not first do this first you need to delete our previous one okay so avoid Cloud energy video dot uploader.
(4:52:20) com destroy and thumbnail.public ID okay now we need our our updated thumbnail again okay so let's upload it then in here let's add the folder which name is courses now data Dot thumbnail which we have our public ID which is this one and URL is this one like this cool so now basically what we need for update our course we need our course ID right so how can we get our course ID so we can make a variable in here or in here also okay if you want like constant our course and our ID so our course ID which is the request.parents dot IDK will
(4:53:16) receive it from our params now we need to create on variable like constant course then edit course model dot find by idn update we need to set this course ID now we need to use our set okay mongodb reset this is called set operation now we need to send our data new data okay updated form now we need to use our mu which will be true like this and in here simply finish it cool now we can send our response race dot status 201 dot Json and our success is true and our course like this called
(4:54:23) yeah done so let's test this route right now so come back this course route copy this the first one the top one paste it in here add here put this will be edit course and edit course and edit course slash our ID like this now let's try this come to our Postman and first save this one to create codes in the new folder folder name will be course and save it in here like this sorry this course will be in this e-learning not in this out folder yep so uh after it let's try our edit one so edit course uh I already tried it as
(4:55:21) so just copy this course ID okay by going to a database then after edit slash codes then paste it like this this is the port request now we need to enter here our updated data okay so updated data meanings first come here this month first copy our full body data like this then in here simply paste it like this and basically suppose when I only update our course name on The Mind stack okay for testing now we simply hit this send and let's check token is expired simply refresh our token now hit send yup notice it's showing
(4:56:12) mind stack and if you check our database then it's mind stack okay it's showing mindset but right now change it to the previous one again okay this one and hit send now come out database and give reload mindstack LMS Landing management system with Nick starting okay so yeah our edit course is also perfectly working if we have any thumbnail look if you're not edit the thumbnail then this will delete the previous one and this will add a new one okay so that's it guys our create course and edit course is done so at the next uh
(4:56:47) the next video we will at the next video I will show you like how can we get single course and all courses without purchasing without purchasing these we'll validate our user login user is this user already purchased this course or not if not purchased before then we'll don't send this content okay without content we'll send everything okay so uh see you on the next video so now let's give a comment like get single course and we can write this is like for without purchasing okay without purchasing meanings everyone
(4:57:30) will able to access this okay this route so export constant get single course our catch as in girls already here asynchronous function then our request response and next on try catch catch will be in this one and try this one great so now basically first we need to search our course by simply doing a wait course model dot find ID so we are getting our codes right very easily but we cannot send this full course content we cannot change this full data of our database Okay so what we are getting right now we are getting this full data
(4:58:22) so this is available on the network cap right if I show you some example of just come B code yummy I'm showing you one beautiful example so just calm this one okay and do an inspect and check this network so let me give another reload again and let me go to this page again this is a bug I just noticed it so I'll fix it no problem so uh note in here this is our data fetching okay not this one this one probably yeah so what is this is giving us not it this is changing the benefits data the codes data okay obviously it's changing
(4:59:09) courses that just watch how magically or how creatively you are working here it's sending codes data very good still I am not going to the course page but it's sending codes data but inside this code set a note the video URL then the video comments video questions video links everything is missing we just have title description and video length and video section so we are not adding it in here why because like if anyone come here in our website if anyone click this network and if you open this preview then that
(4:59:45) person will be able to see the codes video link so that they then then he can like play the video and he can watch it okay so that's why we are not sending it obviously you need to purchase this course and you need to go to this page for getting access of the course content so this is you can say very secure thing okay what we are doing right now so in here now we will use on select operator of mongodb okay we will not send few data in here like our course data dot video URL we will ignore this okay video
(5:00:22) URL then again our course data Dot suggestion then again our course data got questions okay like this so let me check out database course data video URL this one then this links and our questions okay and also course data dot links okay so video URL suggestion questions and links we we will not send this few data okay because this is like very private data now race dot status 200 dot Json and success to do and this course cool
(5:01:27) so now we can simply give a format like this now we can save it and we can test it so come to our course root copy this one and paste it in here so this is get request and this is get codes and ID not need guys is authenticated okay because everyone can access it okay I'll also add this features in Big Audio me also like everyone can come this page okay this course Details page okay but when someone will click this purchase course then obviously need to be authenticated so we will edit no problem so in here
(5:02:11) right now simply add our get single course cool save it now come here and come to our Postman but save this one the previous one this is our edit course save it and hit here and first guys just remove these few things okay I mean close it remove meanings yeah now in here slash get course and this one okay perfect now hit send notice it's changing as the data it's it's giving us data codes data ID name description this is the benefits okay prerequisites now note the codes data not have our video URL and not have the
(5:03:07) links not have the questions this is still private okay so our this function work is perfectly done what as we expect so in here we will simply add here like get single quotes and without purchase without purchase without purchasing okay anything so now we need our get all courses without purchasing now export get all courses and sync cache synchronous and async request response and next function now on try catch yep
(5:04:13) in here simply use here our courses and courses model dot find and select in here you also need to do the same thing so select and we will not send this few Fields okay for all courses yep now we can simply send a response race dot status 200.json our success is true and our courses cool save it right now simply give a format come this course model not course model course root copy the first one paste it in here so course router code.
(5:05:12) gate this will be gate courses cool done now come here in our and obviously change this one to get all courses now come to postman hit here is ttps slash API slash Beyond slash get courses now hit send and it's returning us that all data okay like courses array inside this courses array we have our codes data which is benefits and everything here and check our course content not have the video URL then links and the questions okay which is privates perfectly so yeah our this work is also done so right now guys I'll explain with you
(5:06:11) on very important thing very much important again okay so suppose I'm coming here in this B coding website so let's understand this again suppose this page okay uh all time suppose in on our at least one thousand to two thousand people visiting this website okay like in every on our they're visiting this home page and also they are visiting this course detail page but highest 100 or 200 people purchasing course okay and the 800 people who are not purchasing codes they are just visiting our website so when they are visiting
(5:06:53) our website they are sending on request to our server like hey give me this all course data hey give me these codes details data right when they're visiting our website they are sending requests so suppose at the same time one thousand people sending requests to our server hey give this course so our server will getting down slow because in a single time it's taking its uh it's getting a lot of pressure right so what we can do for this only for fixing this issue we are using radius right we are using radius only for fixing this type
(5:07:29) of issue and we cannot add everything to radius also okay we cannot add the like everything it's obviously not a good practice also so what we can do in here we can simply add few things in here in our radius okay what is basically need to fetch fast okay so as these get single quotes without purchasing and without this all courses without purchasing is like requesting multiple multiple time more than this one if you come if you think about this course Details page so not course Details page codes access space this is not have like
(5:08:06) a very um extra extra request right suppose 100 people giving request highest rate or 500 people but if you think about this home page in a single time lot of people giving request in a single time lot of people coming this website okay so that's why for here in here in this page easier or cache data this codes data okay this will become from our cache or from our Regis database and this codes detail space data will also come from a radius database so just add some few condition in here first in here when we are receiving our data like this
(5:08:51) one constant our course ID which is basically our requested params.id now let me search it in our radius okay is cash exist like this then edit radius dot get our course ID okay is if is exist if is Cash is not exist sorry if cash exists then we don't need to do this hard work then simply raise dot status or not raise dot status simply create our course variable here and just Parts it and also when you are sending the response right now simply
(5:09:58) raise dot status 200 dot Json success true and our course okay you might thinking in this course not have the course content no we are not adding codes content okay so if cache exists then do this otherwise if not exist then this will come here simply okay so obviously the first time we don't have our cash exist so then this will come here so when this will come here mongodb will basically search it okay mongodb will basically search it from here we can do one thing guys we can add else logic here after is if okay else run
(5:10:46) this then in here after searching the data when you are getting the data we need to avoid radius.set and this course okay we are adding it to our radius cache so right now what will happen when I will again hit this get single quotes this will face from our mongodb database okay note but it's adding here okay it's adding the data in here but it's not adding the video content like lot of things okay it's adding which is important now if we come here if we again hit send this is not hicking this so if I show
(5:11:26) you example right now simply console log and write like uh Heating mongodb okay and copy this and add it in here also like hitting radius now open here come here again hit send not hitting radius it's not coming in this layles block because these data already have in our cache so suppose right now 10 000 people coming okay suppose for example 10 000 people coming this URL and hitting this okay and giving requests so obviously cash is very fast right then it will don't impact in our server okay so that's why we are using Radix
(5:12:11) yeah so this is perfect working okay cool so uh what's further than this course is what we can do for this so my suggestion is basically guys courses is a very big getter right we have like a lot of things in this courses so we can do one thing in here first search it like each cash exists so all courses okay not exist if cash exists then simply do this okay otherwise else do this one and in here we can add our data to this radius okay to all the cache cool now save it come back to Here and Now read this and again check just one
(5:13:13) console log for testing okay like in here write it heating radius okay then in here write it Heating mongodb now open it come here and click this sent note it's hitting our mongodb okay but if you right now go to our radius dashboard this is adding the all courses in here okay so suppose right now I am again hitting our this root hit send now note it's not hitting mongodb it's hitting radius so now we are getting data from our radius database so this is basically how cache maintainings work okay so right
(5:14:11) now suppose if like a lot of people doing requests then there's not have any problem because radius is serverless okay so this will send very fast response this will don't slow down our own server or back-end server so that's it guys this was this video okay and at the next video I will show you how can we get the get the course content and like and then get user accessible all courses okay right now we're not validating it but at the next video we will validate the user okay like is this user eligible for access this course or
(5:14:46) not also will validate it at the next video so see you in the next video so please give a comment get course content and this is only for our valid user only four valid users now we need to make on function so export constant get course by user and in here we need to create and catch a single inside here we need our asynchronous function request which type is request response which type is response next which type is next function cool on try catch catches this one
(5:15:55) and in try first we need our user course list how can I get this so basically we have our request dot user dot courses well we have our all courses data okay and inside this we have our course ID not inside here where obviously syncing on quotes like get course content so if we if I show you right now before me websites suppose I am going to this this course okay this one and hit enter goes so this is the course ID so I am simply hitting this route okay and changing the course ID with request Dot params.
(5:16:49) id now we need to check it how we need to check one thing so first let's make a variable constant course exist this is meanings this course exist in the user list or not so either course list dot find and this is the course dot underscore ID okay which is object ID so we need to make that to string okay and course ID bicycle is equal dot params.
(5:17:24) id which is not object ID which is string so that's so we can keep like this okay now simply if we not have our course if course is not exist then simply on error like codes not found not codes not found we need to show one another message like you are not eligible for to access this course okay like this if the user is not purchase this code yet then we will show this now if everything is okay then we will send our codes model dot find by ID this will be our course ID and then basically we need our course content okay so let's make another
(5:18:21) variable which is codes dot codes data okay now we need to change this response this content so success true and our content so that's it so simply give a format and save it come back to our roots quotes Roots copy the top one paste it in here this will be get single or wait get course content like this and underscore ID not not undescribed this is called uh like column ID okay now gate course by user cool now we can simply save it so this is guys only need in here okay this here
(5:19:25) this is like protected one so let's try this now come back to our website here and this one is our single quotes here so save it get all courses previous one okay get all courses without purchase now Untitled in in here simply try another one so get course then content and this is our course ID so if you right now come here just copy this from our database the course ID okay like this now hit send so you are not eligible to access this course notice how great it's working so why it's showing because if you right now notice our
(5:20:22) users data in this users in this user course says not have the codes so that's why it's showing you're not eligible for Access discourse okay you're not eligible to access this course so uh what we need to do in this courses array we need to add our code so how can we do this obviously we need to order on course then right so as we are still not making our uh order order routes Okay order model and Order controller so that's why we cannot do it like with our code so we need to do it manually just come here
(5:20:57) just click this pencil icon in this code says click this plus icon click here add item to courses and this will be simply our let me check one thing let me check the bigger image database so I cannot show you because immediatabase let me just check it like how in how this is decoding database so okay so we have on underscore ID in here and this type is not string okay this type will be on ID okay or let's do one thing guys in here simply add underscore ID and this is not string this will be an object cool now in here add underscore ID
(5:22:02) and this will be our course ID okay so course ID meanings this one we need to add this course otherwise this will doesn't work now paste it and hit this update so we added our course in this in this users okay so right now if we hit here now not still it's showing uh okay because we need to log in and log out okay because our radius cache is not updated that's why so simply log out from here again login yeah cool now not in the courses it's still showing okay so let me log out again guys log out it
(5:22:45) didn't work now again uh login okay so login like this which one I did okay guys so I mistakenly added it in this support.bikode.com okay so simply login in this account so this will be supporting me.com login this account hit sync now not in this courses we have our ID yep now if we try to access our course then it should work so now simply hit sync and still it's showing this uh wait so guys our code still not working so why not working I found the issue the issue is in here obviously we need to edit each authenticated otherwise it
(5:23:35) will doesn't work okay so obviously user need to be authenticated okay for uh for access this page then this request dot wizard will work so now if we come here and if you hit sync not it's giving us our data okay and also in here in this course ID obviously add dot to string okay and let me check one thing again so course ID and hit here sink so this is coming here so probably not need to add this two string method okay because this is already string yeah so we can remove it also now now just test yeah working so we can remove this
(5:24:19) twisting also okay because it's already string so our code is perfectly working right now B make sure that you edit this one is authenticated then everything will start to work okay and also in your database obviously check the user uh the logged in user have the courses in this area or not okay if not up then it doesn't work okay because our all logic is like that if have user discourse if I have this user in this in users cost list then this will otherwise it will doesn't work so that's it guys this was the video
(5:24:51) okay the next video I will show you how can we add comments now yeah how can we add comments not comments basically questions okay how can we add questions you know this course okay in this in this area and how can we adjust reviews in our course content okay so not course content because we we will Edge review in our course okay like in this edit and just run these courses this review set okay so the next part I will show you this so let's see you in the next video so let's give a comments like add question in
(5:25:32) course like this simply create on interface name will be I add question data which we have our question which type is string we have our course ID which type is also string we have our Content ID so this three things we need to send from our front end okay string yeah so export now Creator function export constant add question errors asynchronous function request oh response and next function yep
(5:26:37) on try catch and error type is any yeah done now at the first we will receive this question codes ID and our Content ID so basically this is our I at question data and request dot body like this then simply write a logic like if Mongols import Mongoose from Mongoose Dot types Dot object ID dot is valid then our Content ID like this then simply in here return on next so what is this let me explain it first so we are simply checking our content Edge is its value content ID if not then
(5:27:41) obviously inside the content ID okay is this object ID is valid or not okay like professional checking suppose uh anyone like singing some wrong idea okay so obviously that's not valid so invalid content added in okay then if valid then now we need to search our course content so course content uh sorry quotes then quotes data dot find and then our item which type is any then second bracket item Dot undiscore ID and here I am using another another good thing okay so let me explain it so suppose if I right now do this like
(5:28:37) Content ID what would you always right we are always doing these type of things for like uh finding on data right if I do not undescribe this similarly Content ID then this course content will come right but we can use another method today okay like I came dot underscore ID Dot equals this Content ID okay this is meaning also same but we are like writing short like in short code okay and this is like a new method probably if you know then obviously good and if you do know then this is new for you okay you can use it
(5:29:15) from now also Okay so uh infinity content ideas not found course content in now simply we need to create a new question object called like constant new question and in here we have our user which is basically request dot user we have our question then we have our questions replies which is MTN basically okay so what is this we are simply creating an object okay for adding it to our for add this question two hours course content okay like this then simply uh course
(5:30:21) content.coastjains.push this new question okay so uh this is right now doing problem okay in here this type will be any okay then it don't really problem yep so obviously we need to change something from our course model okay we did some like you know type mistake okay so if you just come to our course model this is comment okay so first come this uh bottom okay here course detail course data schema questions comments schema so you're calling this comment schema so we uh in question we don't have comment we have
(5:30:56) question right so change it these questions comment to question okay and not comment replies this will be question replies question replies okay now come back this I comment interface because we need to change it to question and question replies like if not save and come here no error so then in here simply we need to save the updated course so average course and save like this now simply race dot status 200.
(5:31:40) json success will be true and send our course that's it so yeah our add question function work is done so we can simply test it right now come to our codes root.ts and in here basically copy the first one paste it in here make it put request then add question and not need any this type of thing okay not any problems then in here simply call out at question function like this so simply come to postman right now and uh paste it so this will be put request and in here in this body in this Row in Json not row raw Json data and in here
(5:32:40) we need to send this three data so question is suppose it's a testing question okay like this then in here this is our course ID so course ID which will be basically our course ID so this is our course ID and we have our Content ID which is basically our content uh these are Content ID meanings which content which video we want to add this question so just click here in this course change I already added one question okay guys like this was the previous one the previous like case talk I already did it like in offline okay so we need simple
(5:33:42) this ID okay this is our content ID so paste it yeah now this is a new question name is it's a testing question okay so right now add question like this now hit send okay Json Replicon expired so refresh it now I'm done so if you right now come here the note we had only one question here right previous question one so now if I give a Reload we have two questions okay perfectly and this is the question it's a testing question this is the question replies okay it's empty and this is a user object okay the
(5:34:23) all data of user here yep so now basically what we need to do we need to create another function so we are creating question okay perfect but now we need to add answering questions right so add answer in course question so let's do one thing first come here and save this okay so save it to like add question in course content now hit save and done now again come here and first create an interface name will be I add answer data so in here when we will give answer we have got answers right instead of comment our question we have answers then we have
(5:35:22) our course ID we have our content ID we need this few things okay and the extra things that is our question ID we need okay for find out the exact question because question is basically on array sorry object an inside question we have our replies question replies so inside that question replies array we need to and add the sensor okay so that's why we need our question ID obviously for searching or for finding out the exact question then export constant add answered like this and in here this is sketches in errors
(5:36:04) call our accessing errors asynchronous function and our next yep on try catch error type will be any and hurricane this yeah similar code okay so in here simply get this data from basically answer our course ID Content ID question ID from our this is our we are defining our interface like for typing for these types okay then you are getting this data from our request.
(5:37:01) body now what we need to do we need to do the same thing what we did like for in the previous function when you search our course at the first okay like this one then also we need to do the same logic so we can do one thing guys we can copy our Logics like this one okay invalid content ID and then this one also we need we can copy these few lines okay from top and paste it in here like this then basically now we need to search our questions on extracting so question which is basically course content dot course change dot find I can type is any
(5:37:42) icam dot underscore ID equals to this question ID so we are sending our questions ID this course contains that questions is an array so that's why we are searching from here we're using find methods so find method with basically returned as an object right return as an object so in in this in that object basically we are searching it from our array like the exact question okay so then after finding out the question if not have questions obviously it means uh it means question not from look you can say this
(5:38:17) message okay like indirect question ID also because the ID is invalid that's the question not found so now we need to create a new answer object right new object like uh constant in user sorry not new users new answer which type is any and our user will be request.user and our answer what is basically we are receiving from front end now in here we need to add this answer to our course content Okay so question DOT questions replies dot push like this so this is question this is our object in this object we have questions replies array
(5:38:59) we are pushing this new answer into that array it Minister adding a new object in our arrays okay then we need to save simply our course right we need to we need to save our mongodb collections like codes dot zip like this okay now one important things in here so just think about it suppose you are asking a question okay in our service thinking about like big audio me so you are asking a question in Big Audio so obviously I am admin I need to know that like there are 25 or 30 videos so you are asking questions supposing 15 number
(5:39:35) video okay so obviously I need a notification from my admin dashboard like one user ask a question in this video so then so then I can simply go to that video and I can reply that so obviously we need to create a notification but if you are replying to Mike answer okay suppose I am adding an answer to your question you are again replying to that question okay then obviously and one thing guys okay so I am I am receiving notification when you are like uh sending when you are asking on question I am getting a notification from my admin dashboard
(5:40:11) okay admin is getting notification from admin dashboard but when admin will reply this question how user will know this obviously we need to send one email to user like hey uh on new answer added to your question please login to our website and check your check the video okay obviously we'll include the video name also okay so we need to check actually who is the questions Creator and who is logged in if this user is same the question Creator it means who created the question and who is logged in it meanings it's not any answer it's reply
(5:40:52) right because if I am asking question then obviously I will not reply that right I am asking questions because I don't know that answer so admin will reply to that or other user will reply that so that's why when I will reply to my questions then I don't need to send again email like I I knew answer added to your question because this is not answer so that's why we need to do some validation in here okay we need to do some logical thing like if u z dot underscore ID and our questions Dot user dot underscore IG
(5:41:37) if it's matching so basically guys either dot undescribed is not exist request dot user dot underscore ID okay yep like this dudes and this is showing error because uh I found one simple issue so just come back this course module notice we are saying user type is object okay but in our object which field help we are not adding it in this course model okay so that's why this error is giving typescape like property ID does not exist on type object this type object does not exist property underscore ID so
(5:42:27) we can do one thing we can call our I user interface what I created in our user model okay so this is meanings the all data like name then our so simply instead of object change it to I user in this course module then now if request.easar Dot undisced credit means logged in user and question user dot underscore ID is matching it meanings it meanings this is on a reply so when it's reply then we need to Simply send a notification to our admin dashboard like new question added in this course or in this sorry in this
(5:43:11) content okay in this video so then you need to Simply create a notification in here okay but as we didn't uh created a notification model so that's why I'm right now simply writing here comment uh when I will at the next section when I will create notification model then I will add the notification okay right now simply a comment we'll change it later otherwise we need to send one email okay so this is meanings we are admin or other people are answering when then you need to send an email to the user like
(5:43:44) new answer added to your question okay so we need to add this one name will be question dot user dot name okay then title will be basically our course content dot title okay which video basically this is then we need our HTML like how we send email so paste gml average EGS import EGS obviously from EGS then render file then path dot join import path from path okay it's a built-in module so you don't need to install it then d i r name now we need to see our path okay which path we have our mail so I already added
(5:44:36) on mail I'm showing you right now don't worry so the path is question reply dot EGS like this okay then after it in here we need to send our data cool that's it now simply uh this mails question reply.egs so let me come here this is a very basic uh you can say very basic HTML okay I didn't edit like styling in here so because this is like your task okay you need to add your style you can design mail as you want okay obviously don't copy full copy my code just add something like with yourself
(5:45:15) like this is app stylings so you can simply add your styling also this is a very simple Main but I style it as your wish like how it will look good okay you know this better than me like how it will look good because uh you are doing your project okay so just add it as a specification like change color or change anything like probably no HTML so you can customize it as you wish so then after it and uh you can also uh in here basically we have on Dynamic field okay this name and this title otherwise everything is static so this
(5:45:50) name is meanings our username and this title is the video title okay like which video uh which video answer edit okay that video name so then in here we need to call our try catch again because right now we will send one email okay so await import send email or send mail function then email will be our question dot user Dot email like this subject will be question reply and template will be our question reply.
(5:46:42) egs like this and we need to send our data cool so in this sketch now we need to return our next error network if I have any error then show us what's the error okay the error message and after it we can simply send on response 200 Json and success Rule and course like this now we can format our code yep so that's it in here we are sending this question reply this is the subject okay this is the template name this is the template path so add this route right now add it at this function in our root right now first copy this this is also put request so add answer
(5:47:30) and add answers like this save it come to obviously answer yeah now come to our Postman create a new request put then add answer in this body we need few data so first let me copy this body first okay so yeah we have our question basically we right now we not need question okay we need right now no sorry we need right now our uh answer okay so answer will be suppose testing answer like this course ID will be our course ID which is perfect content ID is also same but we need our question ID question ID
(5:48:37) so question ID how can we find out it so simply come here or database then course data this is our uh object this is the questions array inside this question suppose we're gonna add reply to this question okay so this is the ID question ID copy this test paste it and simply hit sync Json token expired Okay so now it's sent notice it's added a reply perfectly so if right now come here then give a Reload then not in here we have our question replies like testing answer but it's not sending any email right if
(5:49:23) I show you right now this email okay which email basically this user is logged in we are logged in right now in let me see which account so we are logged in right now this email okay so we not receive any mail because the login user and adding answer usually similar so obviously we don't need to add any emails right we don't need to send an email we need to add a notification okay so right now obviously we not have notification that's so you are not sending it but right now we will simply log out and log into another
(5:49:57) account so log out first and log into suppose support okay come here and add a new answer like testing answered email okay now hit send notice it's taking time it's meaning it's sending email and done so right now if I show you my email okay first check it from database so check its edit uh on answers okay this is the answer basically testing answer email so check out emails right now so this is the email guys hello a reply has been added to your question in the video project folder structure setup please log into our website to view the
(5:50:48) reply and continue the discussion thank you for being a part of our community so how incredibly it's working right so our this feature making is also done so this was the video guys from the next video okay I'll show you like how can we add review in course okay in our course how can we HS review so that's it guys see you in the next video so let's give a comment like delete uh sorry not delete add review in course like this now basically we need to create on a simple interface which will be your I review ad review
(5:51:32) data for adding review we need our review which is string we need course ID which is basically our screen okay which will be also then we need our comment sorry sorry comment already top because review is comment okay and rating which is number cool and also user ID which is string code now create our ad review function so constant Edge review request response next on simple try catch your type will be any then return next new irregular like this now at the first
(5:52:36) we need to Simply find out our user course list how simply do request dot user dot courses right a logged in user courses list like this then we need to find out our course ID so course ID which is basically request.params.id and code study guys did not need here okay so because we are receiving it from params then we need to check it okay we need to validate it perfectly like if the course ID exist in user course list best on basically underscore ID okay we are validating basically our user and after here simply
(5:53:34) we need to create on variable like constant course exist equal to user course list dot sum method use here codes parameter which type will be any then course dot underscore ID dot to string this is object ID so make it string and match it with our course ID dot to string like this cool then simply in here write a logic like if not have codes exist then return on error like you are not eligible to access this course okay it means the user is like not eligible for this course okay yeah then constant review rating equal
(5:54:39) to user ID we are taking this data okay sorry sorry not need this one simply make on variable like codes then wait course module that find by ID which will be our course ID now we need to create on object for our review so basically we have our user which will be request dot user we have our comment which is request dot body Dot uh we can do one thing guys in here we can receive our review now rating then yeah these two things and user ID basically is already not need from request dot body as a review data I received it okay in
(5:55:40) here this variable you can give this name to review data now comment will be review and rating will be basically breaking okay so we can give it like single game because same value so rating is number comment is like which comment uh user is giving and this is tracking and this is the user information cool so now we need to add these reviews in our review data so so sorry we need to add these reviews in here so review data is okay I user so I found the issue no problem so codes reviews dot push so we are adding this
(5:56:24) review data in our course reviews array okay we are simply pushing this so this is simply giving on error this is giving on basic error and the error reason is just come back to our course module notice this is object but we need to make it I user like this then this will not give any error okay now note error is still giving error okay okay guys simply add here type any then this will not give any error like this okay and in a course module obviously we make sure that in here basically this is I user not object
(5:56:58) and in here add a question mark okay like this now Simply Save It and after pushing our codes now we need to make one thing again okay for our so for our rating okay so simply in here basically make one variable like like average which will be zero now we need to find out our reviews okay how many reviews have then for each we need to do a loop Revenue sorry view meanings review single review which type is any now we need to plus it with our review rating okay so let me explain this math to you right now okay guys like how it's working so
(5:57:42) first let me finish this so codes dot ratings uh equal to average divided by code start reviews dot length Okay this is basically how it works so ratings what is saying course dot ratings and Okay so if we have course then do this yeah so basically this is cold start ratings is average and divided by code start reviews dot line so let me explain this math right now so how we are getting this average so basically average initial value is zero okay so this is meaning zero and review dot rating okay so we are simply getting
(5:58:35) the all ratings so suppose for example uh we have two reviews okay one is five another is four so 5 plus 0 means five five plus four meanings four so five plus four how is this nine right nine so nine then divided by this course the review start lens we have two reviews so this is suppose we have two reviews here right we have two reviews one is five star another one is four star so five plus four is nine and two reviews that's why nine divided by two it means four point five so this is our ratings okay so this is an example so let me
(5:59:12) write here on example we have two gpus on is five another on is four so math working like this okay this is for you guys okay obviously if you are making a professional project then don't write these types of weird comment okay I am writing it like when you will uh watch it after uh when you lost this code then you'll understand it like how this is working okay so only for like helping you nothing else so this is basically the logic working now we need to save our course so I wait our course dot save method
(6:00:03) like this yeah cool so now what we need to do okay we are adding a review but we need this notification okay so uh we can make on valuable right now simple notification an object where we have our title it's like new review received like this give a comma and here we have a message so request.
(6:00:49) name okay has given on has given a review on your course okay not basically like this we can add a course name also because this user has given a review in over codes Dot title or quotes dot name I'm not sure probably not title this this will be name yeah name so then in here we need to create a notification as we right now not have our notification so we cannot create it so after creating a notification model we will create notification like this cool now simply we can send our response so this result status 200 then success success uh
(6:01:43) true and however we can send our updated course like this cool so now let's try this root okay so add this in Our Roots folder our course root dot TS copy the previous one this is code shorter.potrequest at review is authenticated and ads review like this but we need to send on Powerhouse in here okay so Edge review slash then I okay you need to send your course ID so let's test this route right now simply come back to more Postman okay create on put request and this will be simply [Music] add review and our course ID so we need the
(6:02:38) course ID basically the course ID is first come this e-learning first let me log in and done here you go so login done now we need basically our all courses so this is our course ID now come to our ad review and paste the course ID now come this body draw Json data and we need to send few data in here like we need to send hours review and Order rating so review is like it's cool and rating is 5 now hit send and notice this is responding and in here in this rating it's showing 5 and in here this is showing the users this
(6:03:34) is showing the reviews this is the user this is the created updated at this is our comment it's cool this is rating and this is the underscore ID okay cool its meanings it perfectly working so we can save it add review come to our e-learning and course and hit save button done so our Edge review feature is also done okay guys now basically we need to make another interesting function which is very important right now okay that is uh we need to make on function what we can add a replies in reviews okay we can add
(6:04:11) replies in our reviews array for example on user giving on a review okay suppose one user giving on review and only admin can reply to that review okay admin can obviously reply that review so let's add a comment here add reply in review like this now export constant add reply to review and catch a sync error asynchronous function request response and next function cool and also we need to create our interface or forgot it so which how many data we need here so interface I add review foreign yeah then we need basically our
(6:05:15) comment which will be on string we need our course ID and review ID these three things only we need okay and in here we will use on try catch catch type any and yep what you always do now simply we need to receive this common code search review ID okay from our body as our idv data okay then we need to search our course first so if not have course then quotes not found then right now we need to found our we need to search our review so review will be basically codes dot reviews dot find review dot iig undescribed it.2 stream okay this RGB
(6:06:17) meanings review single review parameter okay so reviews and array we're searching it we're finding it then if not have review it meanings review not found so now we have review okay then what we need to do we need to make on another object we'll be reply data which type will be any well we need our user which is request.
(6:06:54) user we need our comment what basically we are receiving then that's it now we need to push it in our course Dot reviews Dot push this reply data like this so course this reviews and Dot push now average course dot save like this now send on response status status code is 200 dot Json success true and a course cool now simply give a format so uh basically right now
(6:07:58) let's check this route so come back to our Google Chrome create a new root this will be also put okay and sorry I forget to add this in our root come back this course root Pastiche here now copy the previous one this will be at reply okay I'll reply okay perfect not need any underscore ID and obviously need to be is authenticated and not only is authenticated we need to check out authorized role which need to be must admin okay otherwise only user cannot give reply to reviews only admin can give reply yep so
(6:08:51) now uh this will be our ad review cool come here uh first guys refresh our token okay so refresh token oh sorry Server Connection issue let me connect my server now hit send so yeah now come here and hit send oh sorry add review not found so what is this then add reply sorry not to review now in here we need to provide some data like we need to provide our comment like thank you for your review and we need to also provide our course ID
(6:09:56) like no this is a course I did not any cakes so course ID will be our course this one so add it and at last we need our review ID like this is the review what's the review oops it's empty review okay let's create on the review then again so add review yup so this is the reviews in here we have this one courses this one reviews ID where where reviews ID yeah here's it so copy this review ID
(6:11:02) now come back here paste it now hit send so either is not allow it means we need to log into our admin account so we're right now logged in here logged into our admin account yeah admin now it should work so hit send yep cool so check comment thank you for your review okay let's check out database here we go so LMS here courses here so this is the reviews array so unfortunately this is adding okay sorry we did some wrong in here guys this is adding inner reviews but we not need to add it in reviews we need to add
(6:11:51) it in our reviews then we need to add it in this wait wait let me come here review schema we have user rating comment okay so uh comeback is course model and in here add another one comment replies okay must edit and this will be simply object so copy this comment replies add it here Dot push okay like this so guys this will be not like this okay code story is not like this this will be simply review okay or single review because we need to add this in singles review then review dot comment replies Dot push hours
(6:12:43) reply data cool so that's it now if we save it right now and a one logic we need to write in here okay guys because sometimes comment replies is empty so we can write if not review dot comment replies then automatically generate one comment replies mkla okay then we can put it we can push it not put okay that's it done so uh right now if we save it then this type of no error will happen okay oh I mistakenly opened Android Studio let me close this so here's our database not in here previously it's added a new uh review
(6:13:31) but obviously it's not a review it's a reply so just delete this the last one and click update cool now come here come to our Postman and now simply hit send is expired so refresh it and now hit send note it's worked so now let me check if it's perfectly adding comment replies or not so this is the reviews so this is our reviews it's cool but we added reply in this one notice comment replies array where we have an object which is we we includes on user okay which is basically admin then comment
(6:14:10) thank you for your review so it's perfectly working we can save this route right now name will be add reply in review only for admin like this now hit save cool so that's it guys this was uh for this video okay from the next video we'll start to design our course model sorry not course module we'll start to design our order model and our notification module then we'll start to work for that features okay so that's it see you in the next video so let's create a new model in this model folder name will be our order
(6:14:59) model dot yes cool now uh we need to import our mongoose document model keema from mongos yep now we need to create an interface and obviously export it because we need this interface in our controller also so export interface I order which is exchange document and we have course ID which type is string we have user ID which type is string we don't have any products similar for total price and updated created it just remove this we have course ID user ID payment
(6:16:03) info which type will be object then we have a yeah that's it we don't need any status or anything like that because this is not e-commerce so that's why you not need these fields okay so course ID user ID and parent info Yep this these three things is enough now create our order schema okay so orders schema then this will be our caller I order the new schema like this so first we need our course ID
(6:17:07) and guys this iot will be not here I did a mistake this need to be here okay I need to Define that type like this we're calling on interface yep so course ID which type is you know this type will be string because we will send it as a string from Front End okay then uh obviously this is required true okay then in here we have our user ID which will be also string so type string and our required will be true yep and we have our payment info which type is object which is also required robot for right now we cannot make it regulator okay
(6:18:02) because we don't have our payment information because we're not implementing payment Gateway right now that's why okay when we will do the front end then we will do this when then we will again comment out this okay and in here we need to add another thing like time stamps true so now we need to Simply create our order model variable and like this model and color I order interface in the mongols.
(6:18:40) model order in order schema now we can export our default order model cool so our order model create is creating done now let's create another model which is very important that is on notification model.ts like this same thing import Mongoose document and model schema from mongos then export entire face I notification documents we have our user ID okay first remove these two things guys okay not need these two things first just add title which type will be string we have message which type is string we have status which type is string and
(6:19:44) that's it we have user which type is also string not basically user this is called user ID okay like who is creating this notification okay that's user ID now constant notification schema and our title which is string record is true called and then we have our message which is also same Hank require this true then top we have status okay status which uh type
(6:20:49) string required true and default status is answered okay this is status it means this modification is not read already then not get created because we can add here simply timestamps then it will automatically oh time stems true cool that's it now simply make our model notification model like this and export default modification model cool done so our two model creation done this is our order model very small and simple and our notification model is also like similar okay so our model creation done so from the next video we'll start to create our
(6:21:49) controllers and we will also Implement like the modifications in this Fields okay like in here uh we need notifications okay so we'll we'll edit in the next video and also probably here you need a notification yeah two places yep okay that's it so see you in the next video guys so simply let's create a file in our controllers folder name will be order dot controller controller Dot TS like this and also in our services let's create another Services order dot service Dot PS cool so in here first we need to
(6:22:39) import our next function then our request and our response cool then we need to import our catch async errors then we need to import our error Handler then we need our order model and our I order this is called I order interface okay what basically create it in our model okay what you're exporting because we don't want to create like again interface okay that's why we are exporting it and we are using it from our controller also then we have our user model we have our
(6:23:43) course model now simply we need like more things like path from path EGS from EGS then our send mail function also need and our notification model also need yep cool done so now simply create our order export constant create order yup and this error type will be any return our next a new error Handler
(6:24:47) yep so first what we need first we will receive course ID and payment info from our request dot body as our I order interface okay the type will be so equal to and in here now we need to find our user first okay so eight user model dot find by ID and request dot user dot undescribe the add here on question mark here yep then we need to search it what you need to search you need to search it that is this user the logged in user already purchased this course before or not if already purchased before then the order the user cannot uh give order to the
(6:25:48) same course again right so that's why we will check it so course exist in users so I wait not guys I have it sorry user dot courses we have in courses array inside of just array we need to do sum method use then here is in simple course parameter which type is any now codes dot underscore ID dot two string and equal to our course ID cool so now if hap course ID codes existing user it meanings user already purchased this course you have already purchased this course okay on error show an error simple if not have then good now we need
(6:26:44) to search our course so search our course by using our course ID what we're receiving from front end then if not have the course then obviously course not found like this now simply create on variable which type is any now user course ID which will be basically course dot underscore ID and we need our user ID which will be also user dot underscore ID like this so yep now basically guys we need to create our services so come here import Mongo's document models schema okay so no not need this import next function
(6:27:51) yep it's enough right now so simply create New Order so export constant New Order service or we can write new order only New Order catch async error passing cross function type is any and next is next function now make this cool so simply right now we need to create our order Okay so create order will be ordered order model dot create and call next and send this order okay so first if we write now after getting the data if you write now create our orders simply call our new order then send our data and send our next
(6:29:00) sorry not next send or response how many type it's in it okay it's also one next so send our next go now simply we have our we need to send on mail okay so on mail links after creating order when successfully order creation will be done then we need to send on mail to the user right confirmation mail like your order is successful you you order these icons okay so basically we need some data for our email template like we need our undiscore ID so which will be our course dot underscore ID okay and then we can use here on uh
(6:29:56) on slice method okay like in 0 to 6. yeah so this will show only zero to six item then we need our name so which will be our course dot name we need our price which will be basically let me check one thing guys just come here our courses surprise is this one so course dot price cool and we need to send our date okay so this date means like our uh order creation date okay so in here new DOT new date and call it then make it to local date stream okay and then we want our en and us this is meaning it's a type of like update okay
(6:30:58) then inside here make year which will be numeric month will be long and day will be also numeric like this so what will happen this this will return a date like 29 July so by this basically today's 6th August so this will show 6 August 2023 okay this date yep done now we need our HTML Now call our avoid egs.
(6:31:33) render file join gir name and not views this will be our mails mails and our order confirmation.egs again guys this email I already designed it okay this is a very very simple email design okay not that much good looking but just customize this email design as your wish okay because obviously your brand so you need to design like your UI Okay so just customize the design Azure wish okay this is dynamic email so I'm showing you then how it's looking actually and uh you can come here you can easily watch it again okay this is
(6:32:13) the order confirmation dot EGS this is the email so I'm not showing this style I'm just showing you the code just watch it this is order ID order date order name order price subtotal total and that's it okay so then simply send our mail data but obviously this need to be in order okay so we need to send the order basically but we need to send this mail data in this order name okay so that's why when you can you can notice you know here we are targeting order dot price okay so then after each we need to use and try catch
(6:33:03) yep so try catch and this will be our if have user then I wait send mail and email will be user dot email okay logged in user dot email subject will be order confirmation okay message not need we need template so template will be our order confirmation dot EGS cool and at last we need to send data which is basically our mail data done so that's it now if you catch any error and then simply like return or error handlers next new error Handler neurotype message
(6:34:08) like this cool then after it guys after sending the mail we need to also do some few things like we need to update our user courses we need to add the new course what we are doing we are simply adding here our new codes to the user okay what actually is you're purchasing right now okay if not have any course like this course yet then after purchasing you are adding it into user courses array okay then call our user dot save method like this now this is for user okay these few things obviously we also need to send a
(6:34:56) notification for our admin so admin will get it from admin dashboard like hey New Order created okay so notification model dot create user will be our user dot underscore ID title will be our new order and message will be like this you have a new order and this is the course name okay yep cool and on curly brackets yep that's it so then we need to send on response okay so race dot status and you guys will not indicating the
(6:35:59) value for any any variable okay because we don't need any variable in here now rails.status 201 dot Json success true course sorry order which will be this course yeah updated one now come here in our sorry first we need to connect this route so come back this roads create a new file name will be our order order dot root dot TS like this import Express from Express then import our import Express from Express okay that's
(6:37:06) it it's enough right now then simply constant our order router Express dot router then order router Dot post then slash create order Now call each authenticated obviously you don't need to be authenticated for create order then call our create order function cool at last export our default other routers done now come to our app.
(6:37:51) ts and connect this route because this is a new one so import our order router or router from order dot route okay done and we can do a short thing guys as we are using the same thing so we can cut this the previous one we can comment we can give a comma we can add our order router and our course router also okay similar things we are just shorting the code that's it then just come our Postman then in here add our URL like create order this needs to be post request then body raw data and Json data so what we need to send we need to send our
(6:38:38) course ID and one thing guys in here send the payment info okay if have payment info then send it okay so go save it so uh in here course ID so we need our course ID so let's check this course ID then we need our okay so on the course ideas right now enough okay so yep simply create order right now hit send so first given refresh to our token now hit send code start on discarded slice is not a function okay so something is wrong so this is not slice this is probably split or okay so guys I got the issue no it's not
(6:39:40) slice it's not working because it's object ID so make it two string gain dot slice now I believe it should work so now hit send next is not a function so what's next okay so in here we are using next so just uh remove this one okay and we can do one thing guys we can save it and uh let's do one thing come back to our order controller okay and just copy the last one this one cut this one not need copy just cut it come to our order service and paste it in here okay so race this is coming from here
(6:40:21) race which type will be response okay so this is order and response import it from Express and from here now when we will send this request to New Order like this change it at the last okay after creating order so after creating notification so New Order data response and next is basically not need oh sorry next is also neat so simply save it now come here and then hit send you have already purchased this course so it means user already have this course so let me check come here this is the sponsorships one yeah and so
(6:41:07) previously it's created the uh order okay so let me delete it let's just show it some error no problem just come here and delete our courses from here like this and hit update cool now simply come here and hit again send so quotes not found I mistakenly deleted the course guys I'm really sorry for this so let's do one thing create course which is easy simply create course done so hit send and it's taking time it means it's working perfectly rails.
(6:42:04) status is not a function but check guys our order confirmation mail is coming perfectly notice your e-learning order is confirmed and we are just as excited you are then here is what you ordered this is our item name this is the price which is totally Dynamic price this is order date today's date and everything is like dynamically working okay so please customize the UI as your wish okay as your favorite like what you want to do then yep just change it as you wish okay but our this function is working but just giving raised status is not a function
(6:42:39) it means something is like uh typing issue let me check this and guys also note notifications is also creating perfectly okay notifications creating even in courses not uh the salt okay one thing one important things I just remembered right now notice the purchased is still zero but obviously we need to change our purchase number what we need to do after creating a notification we also need to change our course dot purchased plus one okay so plus one meanings it will always plus one we can say if our course is have then only do this
(6:43:28) okay so if code start purchased have then code start purchased then plus one okay like this so what is this is doing this is simply changing our course also so Eric course Dot safe and do this cool now New Order we're changing our data response and next cool and that's it come here and hit send again not Json tune is expect so refresh our token now hit send you have already purchased this course this is giving an error because user already purchased it okay so we already already purchased is that so this is
(6:44:14) happening so simply come here in this courses HR courses simulated like this now in this notification so you can delete this notification also this course is not need to delete orders just do that orders yeah and Coach says now he sent Ready Steady and not it's not giving an error right now it's showing our order codes are the user ID and everything okay if you write your account or mail then note we have received a new mail okay so new mail is this one your e-learning order is confirmed and well it's just as excited
(6:44:54) as you are here this is what you ordered this is our item name this is the quantity key this is the cost and everything is like dynamically working so yeah our create order with notification and with email everything is perfectly working and right now if we right now come to database note purchased still not changing okay I'll check it why not changing but notifications creating orders creating users if it if you just come here in users note courses in here perfectly and our only one thing is not working
(6:45:32) and that is this purchased okay so purchased why not working let me check the spelling this is purchased foreign purchased simply guys change this logic okay this is like something is wrong in this logic simply write this logic if codes dot purchased have then code start purchased plus one otherwise code start purchased okay so just add this logic and save right now so now if we test our root then everything will work I'm just showing you so I'm coming here and before creating before hitting the same button I am showing you this is our
(6:46:19) August we have on orders on notification and in this courses purchase this one okay because I checked it before that's why now if I hit send it's taking time and it's creating one and now note this is a new mail okay zero minutes ago and this is the mail your e-learning order is confirmed and we are just excited as you are and this is the like our icam okay so if you like to come to our mongodb database if you right now give a Reload not purchase is two so it's perfectly working notification to
(6:46:58) and our orders is also 2. so it's also very perfectly working okay as you expect so our uh order creation then with order creation basically we are sending email okay you know notification curation is also done so uh from the next video I'll show you how can we get all notifications and uh how can we update our notification status okay then uh we will also Implement like we will also Implement these features okay because this video is right now very big so very long so I'm not implementing like these
(6:47:34) notifications in here okay we'll do it at the next video so that's it guys see you in the next video so let's create a new file in this controllers folder file name will be notification dot TS sorry notification dot controller then dot TS cool in here we can import our notification model notification model like this then we can also import this few things catch sinkers not need other model uh we need our error handlers yeah it's enough right now simply create a function export constant get notification
(6:48:33) and like this then on try catch type is error as a type is an error type now return what we're always doing okay this is basically uh one thing let me explain it right now guys I know you have this some people have skilled this question why I'm always using try cash and why I'm always as well as writing this line okay so try catch meaning suppose something wrong in this dry code okay we are writing notification model dot find okay okay we are writing this so obviously this will work but we forgot to import
(6:49:07) our notification model okay so then this try catch will become here okay that that error will be come to the sketch block and this error Handler will kill us the error right notification module undefined okay so that's why if you have anything wrong in our code that will be totally come to the sketch block and catch will send us the your message okay catch will send us the error message that's it so that's why we're always using a tricas this is kind of e-fills you can think okay it's like
(6:49:44) it's kind of that condition so now in here first we need our notifications which is very easy get all notifications so notifications model dot find okay we need all notification not need user so like this and in here notifications model DOT fine very good now we need to sort it created at -1 like this so then what it will do it will send our data reverse reversely meaning suppose let me let me finish it first then I'm explaining it so success true and or notifications cool we can create services for this also account services
(6:50:36) but I'm not doing it because notification like we have this functioning leggings simply here okay that's why and at the top we can also even comment like get all notifications okay and obviously this is only for admin okay these features so let me explain right now what is the sort and created at -1 meaning so suppose in this notifications you have two notifications so when will face this this is the new one this is the old one okay so old one will become top this one will come to totally top and this new one will go to bottom but we
(6:51:17) need this new one to top right new notification obviously needs to top so that's where we are sorting it and you are reversing it okay we are using created at minus one it means this will come this one will come to First and this will come to second okay it will perfectly work actually what we exactly need so our all notification features is a function making done so you can right now edit in a root so let's take a route for our notifications also notification the DOT root dot KS import Express from Express
(6:52:04) and constant notification root equal to color Express dot router that's it Now notifications root dot gate request and then we can say get all notifications okay this is our route's name notifications then import our authorize rules and send our admin also send each authenticated basically we need to send ease authenticated to the first okay because authorized rotary doesn't work with without is authenticated so either authenticated then authorize rules then get all
(6:53:16) notifications so it's what's wrong in here okay get notifications this function name yep now export our default notification route cool so that's it done come to our app.ts copy the previous one and add here notification router like this then Roots slash this one okay and notifications router just copy it and give a comma and paste it in here done then in here simply come this root give a format copy this routel come to postman and just chase this API
(6:54:23) so uh I forgot to probably save the previous one okay this is create order so make save our previous one create order so new folder we can create on come this e-learning and create a new folder name will be uh orders okay and inside this order folder we can save this create order now uh click this plus icon this is gate request then eBay slash Beyond slash get all notifications first obviously refresh our token because it's expired so refresh token now hit send and yeah there you go it's a notifications okay
(6:55:06) so notifications is also perfectly coming so we can hit this save icon then create another folder name will be notifications create it and in here save it get all notifications admin okay so this means something for admin and one thing I noticed this create order will be in this order folder why this is yes so order order for starter oops of course security or other folder this is code says notifications art where's the order folder okay let's create order folder in here okay I did mistake so and they can click add folder name will
(6:56:06) be ordered cool and add this created or in this order folders yep done so that's it our geta notifications feature is done now we need to come back to our controller again and we need to make our update notification status okay you like this now export our update notifications then on try catch catch error type is any and every time this yep so first for update on notifications we will receive the notifications uh ID okay so constant notification equal to average notification model notification model
(6:57:13) dot find by ID ID then we will change our notification dot status equal to request not need request body because obviously we have only two status so if admin is clicking in obviously this video is read okay so notification status it's giving error we can say one thing if notification status have then notification dot status otherwise we can count this order controller and copy this one okay this logical values of enough similar like notification dot status have notification status otherwise sorry notification dot status equal to
(6:58:07) read okay otherwise in here this will be notification Dot status cool so this is giving error okay guys so you can say one thing if notifications have okay not have then this error otherwise this yeah cool notice now no error so it means notification that is set as if have then change it to read okay so now we can simply uh save or update on notifications so edit notification dot safe cool now we can simply send our notifications so constant notifications
(6:59:15) and send a result status so one thing I know you only have questions right now I'm first let me finish this success is to rule and these notifications of a cool gun so function is done and it's showing here because I need a second bracket yeah curly brackets so uh the problem is in here I mean the question is in here why after saving notification I'm not sending a single notification why I'm again searching the updated notification the reason is this notification basically guys when we are updating it we need to change we
(6:59:51) need to State update our front-end State also so that's why we are simply uh sending the all updated notifications from here then from our front end we can update our state easily that's why okay this is the reason so simply save it now copy this update notification come towards root and notifications root dot both update notification and like this update notifications slash underscore ID is authenticated obviously authorizer admin and function name with the outlet notification done now let's scale this route
(7:00:38) so come here now click port then not get all notifications this will be our update notifications slash our ID okay so notification and in here we need to send a notification ID so first come these notifications note and read unread to statuses okay so copy this the first one and update it now hit send oh okay next word so hit send now and boom status read so it's perfectly updating what is it means it's working so now we can save this route also update notification
(7:01:42) status admin done so update this notification and get the notifications is done so after it uh the next video we will need another one other features okay we'll Implement that is delete notification okay but until that notification will be auto mechanic for example after 30 days suppose we have 500 notifications from the last 30 days okay then the next month again 500 will come okay so obviously we not need the like previous like one months before notification they don't need this when it highs clear like
(7:02:20) the last one week notifications for some reason okay like for inquiry data for this type of things right but we don't need any notification two months ago or three months ago so we will simply run a chrome job in our backend server it will automatically delete only the read notifications of the previous one month after one month not tomorrow or like after tomorrow this will delete after one month one month every one month this will clear the read notifications okay this will delete it so then again new notification will come then after one
(7:02:55) month again it will delete okay so this is called Chrome job automatically scheduled we are scheduling something then it will automatically work okay we don't need to call this route or we don't need to call our API okay we'll do that at the next video so uh we we didn't Implement some notifications in our user controller so right now I'm implementing it is very easy okay I forgot not forgot because that time uh notification was not there okay so that's why I implemented it but right
(7:03:24) now I'm implementing it so just come back is course control and not user controller in years when we are adding on question then we need to send a what is this add questioning course hmm okay so when basically question will be creating you need to send a notification to our admin dashboard okay so like new question asked by on user okay so let's do one thing not user controller open our order controller because we need this few data okay done so come here right now so uh when we are pushing our new question
(7:04:15) after that we are saving the course in here right edit notification model dot create this will be request dot wizard dot underscore ID title will be new question message will be your new question from okay new question you have a new question in quotes name okay so admin will understand yeah uh on user ask a question in this course okay like this so you have a new question in this course some notification model dot create okay so let me check something guys this is ADD question so only is a residing question okay and
(7:05:08) when you are replying then we're coming this one add answering course question yep okay cool then it's perfect so notification create when we are user is asking questions you're creating a notification okay like new question received okay like this you have a new question in this course okay so then uh not guys course because courses like we have 200 so sorry we have like 50 videos in a course so obviously it's not possible to find out like which video so we need to sync which video this is okay we need to send
(7:05:46) our codes content Dot title okay course content title it means which video okay which video this question basically asked by the user then in here add answer in course question okay then we are okay in here you need to create a notification so simply come here and await notification model dot create then we need to send our user ID right no we need to send users which is request dot user dot underscore ID and with yeah so request.user.
(7:06:43) id title will be new question reply received okay you have a new question reply in this course that's it so when a user will reply to our question okay sorry suppose user is asking one question we are replying that again user is replying to that question so then we need another notifications to our admin dashboard like new questions reply receive okay so these are already replied it so if I'm like anything to we need to reply then we'll reply that so that's it notifications in here done now uh when user is purchasing course this is
(7:07:19) adding done then user controller okay guys this is done okay so if you need anything then anything else then we'll add it later okay because it's a very simple thing so that's it guys see you in the next video and in the next video we will Implement delete notifications with chrome job okay so that's it bye okay so for a work with chrome first we need to install on dependency so the dependency name is our note Chrome so right now if we come back to our Google Chrome suppose I'm opening a new window and I'm
(7:07:58) searching node Chrome this one okay and this is the website so just go to this website and just copy this comment now paste it here and install this node Crown okay we also need to install our types version so at the date types slash not Quran like this okay so our both work is done yep now simply import our Chrome at the top okay like this now simply come here bottom and just test our Chrome okay is it working perfectly or not or right now let me explain you like how actually couldn't work okay so first simply in here I'm
(7:08:51) giving a comment like delete notification on the admin okay and I'm I'm scheduling on Chrome so Chrome dot schedule and I will run this after 5 Second okay after five seconds I will run it only for testing this is and in here this is function okay and in here suppose I am giving on Console log with like this and next one is like running Chrome okay simple for testing so just open our terminal so uh five is invalid expiration for okay sorry in here we need to give a slash now save now check running Chrome again just wait for five
(7:09:46) seconds and check this will again call running Chrome eight minutes after five second after five seconds without hitting our API or Chrome is calling so I'll write your question what is this how I'm understanding it like this is five seconds so let me explain it by going to Chrome website sorry chrome package okay this is it node.
(7:10:08) js package so just understand it this star meanings day of week this is meanings month this is meanings day of month hour minute and this is second the last one is okay so just understand it okay you can simply come this website and you can check you can read more about Chrome from here okay like this is running every minute this is running every minute one from five so you can easily check it from the Chrome uh from here from this website okay now simply close our terminal and let's also stop this because right now
(7:10:40) we need to do our main work right we need to delete our notifications with the power of Chrono because it's automatically calling so Chrome dot schedule and we will call it every midnight okay every day at midnight zero zero zero time it means like probably 12 0 okay so async and how we are calling it okay so in here simply first we need our 30 days ago date okay why need first let me write it then I'm explaining it why we need our 30 days ago so new date and our date dot now like this then minus 30 into 24 into 60 into 60 and into 1000
(7:11:37) this is also kind of similar things okay this is 30 minutes J this is 24 hours 60 Minutes 60 seconds 1000 milliseconds okay like this then uh in here guys we need to run a call back okay so that's why it's like giving error yeah so then in here now we need to delete our notification so await notification model dot delete many now we need to check few things we we cannot delete the everything we obviously need to check it if the status is read then on the July cheat obviously not delete any Android notification and
(7:12:19) which is right now this is the most important logic if it's created more than if it's created at more then okay we are using here LG or less then this is meanings 30 days ago so this is meanings only delete those notifications which is created more than 30 days ago don't delete any notifications which is created yesterday or like one week or 10 days or 20 years ago don't delete it obviously delete if more than 30 days ago then and the status is read thin okay so this is meanings after one month not one month
(7:12:53) so suppose today okay today is 6th August so next like August September okay 6 September or 7th September so at 7 September it will delete the last like 30 days notifications okay it's calling every day it's calling every day night 12 12 am and it's just recording a checking okay like today is there have any notifications what we need to delete if this logic is matching deleting the notifications okay like status if this status is read and if the created ad is more than 30 days ago that notifications those notifications
(7:13:32) created at if more than 30 days ago then only deleting it okay so this is the logic how we are working for our notifications okay then in here after deleting we can simply give like a console log okay it's optional but we can write it like delete read notifications okay that's it done so this is how our Chrome job work okay it's it's looking very simple and it's really simple but some people like think it's very hard okay it's not like that it's very simple so this we scheduled on Chrome software uh 30 days
(7:14:09) okay we have data then this will automatically delete okay that's it so this was the video guys from the next video we will start our admin dashboard and analytics part okay like get all users courses orders and etc etc this kind of things okay so that's it see you in the next video right so uh just Kamco or Services folder right now okay then come to our user Services okay in here make on function like get all users okay we can make an export constant get all users asynchronous function then not reduce okay because right now
(7:14:59) we need to use our so constant users equal to average user model dot find obviously uh sort it okay what we are doing okay because then this will come like always so create it at -1 this will reverse the array okay now again JS dot status 201 Dot Json success true and our users done now format our code copy this come to our controllers folder usercontroller.
(7:15:56) ts in here make a new function name will be gate all users on the first admin export constant get all users then don't need these few things okay guys because right now we will use our service uh let's do one thing change our service name okay so get all users service then come here and simply import it like this done don't need anything else so this is okay send your response yep now hit format copy this same thing come back to our uh courses controller paste it at the last
(7:17:05) get all courses okay this is also for admin so uh this need to be similar thing just copy over these services come back to our order service code Services paste it in here get all courses yeah so get all courses services and here course model dot find done and this will be courses done now copy this one and change it to this done so get all courses and get all users done now only need get all orders come here first go to our services again because we need the similar things
(7:18:10) [Music] so in here we need to copy the previous one paste it in here get all orders other model dot find and this will be orders and orders and here will be also order services done Comfort order controller get all orders only for admin so simply update it like this and call it and send a response done and in here finish so that's it or get all orders done our get all uh get all orders done get all users and get out courses everything is
(7:19:17) done so simply you need to check it right now so simply first uh close all the files now come back this course root copy the previous one paste it in here get all or get courses okay it's authenticated obviously authorized role admin then get all courses yep now hit save same for our notification root not notification order root copy this gate orders is authenticated authorized roles will be admin and our get all orders done so hit format then one more things that is get all users so copy the
(7:20:22) previous one now add here get request change this route to get users is authenticated authorized roles use here admin and get all users done now simply we can test out these three Roots okay come to our Postman now hit this plus icon now get request so first uh we need to guys refresh our token yep now in here get courses okay hit send this is all courses so save this route in our course so first go to this e-learning and this courses and this
(7:21:27) will be all courses and this is only for admin okay so you can write a message like only for admin now hit save now test another one like all users sorry gate users not all users get users that's it save this one also so this one will be in our folder okay we can create another folder also if you want users okay but I'm not doing it so get all users only for admin now it's safe done now last one what is our orders one so engage orders hit send
(7:22:34) all other circuit orders what was that let me check as the orders one so get orders here sorry this is gate request not post request now again hit send and yeah this is our data so come to our orders folder and get all orders only for admin done safe so that's it guys our these three features making done okay these three features since we need in our admin dashboard okay so that's why we shortly completed it now at the next video I will show you how can we how can we change users role okay with uh from admin dashboard how can we change user
(7:23:32) role to or like how can we add on user to moderator in our application okay so that's it see you in the next video all right so just come to our Azure controller.ts and let's give a new comment name comment will be update user Rule and this is only for admin okay on the admin can update user's role then update user role equal to catch a sync error asynchronous function request response and next that's it on try catch error type will be any and return next new renderers like this so in this try we are receiving two things
(7:24:32) IG and roll from our request.body then we need to call our update user rules service okay so we will call it right now and first send a response then I did enroll okay so come to our service right now is a service then in here update user role so export constant update user role Services asynchronous function this will take 3D data okay response then our ID which is string and our next one is Rule which is also string cool sorry second bracket yeah now inside here first not first we need to do this okay constant user equal to average usermodel
(7:25:36) dot find by again update we need to find the user by this using this ID what we are receiving here then the role okay this is the updated new rule so this will simply update the user okay that's it so either giving error in here because race ID and Rule okay sorry we need to import it that's why giving a wrong error now importing done so now notice no error here so we can test Our Roots so come back to our roots and users root.
(7:26:13) ts just copy this paste it in here users router Dot put then update and users root okay or you can say update users okay update user visits exist admin and update user role yep done save it copy this URL come back to our Postman give a put request and change this URL without URL come this body and row Json in here we need to sync our ID which is user ID okay which user
(7:27:18) we're gonna change the rule then we need to send our role which role we want to make okay so for example let's go to our dashboard that means sorry a database then in this users this is our role is user okay this support.b.co.me.com so suppose come here uh we need ID not need email so this is the ID okay copy the ID paste it in here and role will be suppose admin okay now hit send of Json application expired and refresh token hour now hit send and note this is showing row this admin right now come here you know database and give a Reload
(7:28:03) and boom admin so we can easily update our rules to anything not only admin if we can right now we can add it like more director okay if you want motor rate or spinning stick moderators right send cool just watch it moderated okay so I am making it admin again or I'm making it user okay default one so user and hit send down so our update user role features is also working okay so from the uh next video I'll show you how can we delete course and how can you delete user okay so that's it see you in the next video
(7:28:48) okay so first make on function for our delayed user okay so delete user and only admin can delete user so export constant delete user like this gadgets and color asynchronous function request response and next function then on try to catch error type is any and return on error Handler if you have any anything wrong then now in here we will receive our ID from our problems okay then we will just check it first okay
(7:29:53) like first we'll find out it okay if the user is not exist it means user ID is wrong okay so then return these are not found okay otherwise we need to again simply we need to call our weight then our user then dot basically delete one then you need to send our this ID okay just send like this code also we need to delete it from our radius okay so I wait register delete and delete the ID from our radius so race dot status 200 dot Json then success
(7:30:58) through and user deleted successfully like this now simply format our code come to our roots copy this one paste it then this will be delete request delete user then ID is integrated obviously authorized role admin then delete users so let's check this okay first save this one to update users so e-learning and this auth leads to one thing guys okay let's do one thing in this e-learning create a new folder name will be user okay because it's obviously not auth or so user and create and in this user this is edit
(7:31:53) roll probably right so then in here create a new one and this will be delete request so simply instead of update delete user and we need to send our user ID which user we want to delete so suppose we are now delete this last one okay so copy this user ID and hit right now send so Json web token expired now which sent is a deleted successfully first come our apps Dash we have one two three four data give a Reload one two three four okay but obviously updated it okay so now come here and check out admin dashboard so your
(7:32:48) database yeah these are gone even yep user is perfectly done yeah and in here not have that user check guys not have the uh that user okay what would you like it that's not existing here yep cool so delete user features is working right now if I change again then these are not found yep now come here and after it we need to make another functions which is for our delete course so first save this one and this is killate user obviously this is only for admin and this one also similarly only for admin but let me let me change this name
(7:33:51) only for admin okay like this and we can do one thing right now and that is from our auth which is not related with authentication like this one then this one this one this one you can wrap drag it and put it in our user folder okay like this done so note this is right now in our user folder yep which is perfect and this resistor activate login logout refresh this is connected with auth so that's why I put it in like in auth folder and this is user that's why edit so all delete user update user information and
(7:34:34) like this okay cool so let's make another one for our course right now this will be delete course Okay so simply hit this plus icon again delete request come to our uh course controller at the bottom paste or a delete user okay then change it to delete course only for admin delete course model dot find by ID we can give this name to codes if not have codes then codes not found in await code delete one and deciding yep and we don't need to delete any okay we need to delete something that is
(7:35:38) one okay course details let me check Regis yeah this one okay so now come here and these are deleted successfully sorry not user deleted this will be course related successfully done now we can copy this root name okay and we can come to our course router so here see course root first copy the previous one paste it in here add guest Elite course import it and in here delete course and ID like this now come here then delete course so first before deleting let's create on codes okay because we only have on code so if we delete it then
(7:36:40) there will be not any other course so yeah new codes create a ton now come back is course to code so I'm gonna delete this last one okay A2 IG now come and add it in here now hit send so API delete course okay guys this will be delete request not put request sorry now hit send so codes divided successfully come to our database and check giveaway reload and one yeah so code's delete feature is also working so give this name to delete code so cannot force delete and delete course only for admin like this yep now simply hit save icon cool
(7:37:38) done so right now our edit course then sorry delete codes and delete user features is also done so right now guys our admin dashboard almost everything is done so we can do another features which is very important right now that is the analytics part so from the next video I will implement we will Implement analytics okay like how many sales we got from the last 28 case then how many sales we got from the last on year okay we will get the all single month data so obviously I'll explain it like more deeply in the next video okay
(7:38:15) so that's it see you in the next video all right where it is tracking on very interesting features and that is uh where right now will make on file for Generate all last 12 months data okay I'll explain you in the code part okay how basically it's working so let's create a new file in this you kills folders okay this is called on util's text way in here we need to create a file and name will be n a latex so Analytics generator analytics dot generator dot TS okay like this so this will simply generate our analytics okay
(7:39:02) so now in here first we need to import our document and our model now we need a simple interface which is month data where we have our month which is string and we have our count which will be number yep then we can create our functions export this is an asynchronous function asynchronous function generate last 12 months data okay then key now we are exchanging it to document then in here we need to set our model okay so here
(7:40:08) I'm using the mongodb model and sending the key parameter okay like this type is still not parameter and then promise P will be Capital yeah promise lust 12 months which is basically our month data which type is array okay then finish it and start our function cool now we have our last 12 months which is month data then here we need our current date so constant current date will be new date okay now we need to make on another date so current date dot set date current date dot get Plus one like this so this is meanings guys add one digital
(7:41:09) current date why I am doing this I'll explain which is later okay now let's create an forward look so for Loop or create it like manually let I equal to 11 because we need our one year data okay so I equal to 11 then in here run it if I is not zero oh sorry obviously in here Adam clone yeah then in here constant ended equal to new date now our current date dot get full yes then current it Dot get full sorry get months get month and then current it
(7:42:15) obviously call it like this here then current it dot our get date minus I into 28 okay because we need 28 case data okay that's so I'll explain it again later don't worry first let me finish these all lines then in here we need to start date okay where we'll start to clicking the data from which state so new date indeed dot get fully again like this okay similar and that dot get full year and that dot get month and then here minus 28 okay done now we need to make our month yes okay so dot two local strain
(7:43:11) and default okay will be numeric and month will be short okay so this will show us a short form of month name ER will be also numeric yeah then in here we need to create our account okay so I wait now model so count documents and create it ads so right now the main logic is in here we need to write greater then start date and less than ended like this oops sorry yeah like this so created greater than start date and less than ended then give us that data okay so count documents then in here
(7:44:18) let me finish it like this and just write return or last 12th month yep and finish it sorry guys this return will be here okay Tia and in here we need to say last 12 month dot push hour month which is month years and force our count also done so right now this code is done this function is done so I'm just doing it uh format okay now I am explaining it to you like wow how we are working in here okay how this code is working and what is this code actually because this code is like right now looking very weird
(7:45:09) right so I'm explaining it don't worry okay well so first guys this function basically will generate our last 12 months analytics okay last 12 month analytics meaning suppose we are sending our user model in here okay we are sending our user model in here so then this will simply doing envelope in here so first we are getting our first last 12 months okay so right now it's August so this will minus the last 12 months it means it will go to the previous previous year August okay so our analytics will start from
(7:45:44) previous years August month because right now it's August months it will minus 12th month then this current date meaning specifically today's date okay new date it's a date then in here we are just setting it like plus one it means two more we are setting this current date value okay and in here we're running a loop why this I value is 11 because we need 12 months Theta that's why okay so as we are calling uh count programming from zero that's why 11 means 12 as our real count right because we we are
(7:46:14) starting to count from zero in programming then in here this is ended okay so this is index meaning uh this is today's date okay so get full yard get full month get eight minus this I okay I meanings are parameter uh our this is called Index right in a loop then we're multiplying it with 28 so what's the what is this 28 meanings why we are multiplying or why we're minus in 28 weight so 28 meanings today is 7 August I am right now doing a minus from this 7 August okay so because in a year in the 12 months the uh all months is
(7:46:54) not 30 days right some months is 30 days some months is 31 days so that's why we are just doing we are counting our ER as 28 days in a month okay we are counting like this so This 28 meanings this will go back to 28 days previous month okay so this month meanings this will give us the last 28 days data okay like today 7 August so tomorrow it will come 8 August 7 8 August will come then this will again also update it because it will again go to minus 28 days ago so it's every day it's updating like how YouTube
(7:47:29) uh dashboard okay Channel or anything like every day it's updating updating okay from the last 20 ages so this is you can say Advanced analytics features okay we are implementing here then as and in here simply where we want our day as a numeric value that's what there will be numeric okay a month sharp name okay like J and J in January then Feb favorite okay like that then here this is numeric also and then we are simply uh creating a variable named count then where's count documents it's a uh when I'm hovering it notice
(7:48:05) our code editor already suggesting what is this okay so count documents is basically for filter query so create account documents means query count the number of documents that matched with this filter okay so this is basically searching okay like find so in here we are searching uh the data okay which is created this greater than this state and less than is T State so that's why this last 12 months and then we are pushing our data in this in this array okay in this last 12 months earlier project created the first time empty as a we're
(7:48:37) pushing this data okay then we are returning this last 12 months so right now let's use this in our own controller so let's make on controller for this controller name will be nla kicks analytics Dot controller dot TS okay so first in here import our request response and our next function but not guys from North Face this will be your Express yep done and we also need like other few things error Handler then we need our uh gacha sync errors so catch as in color then we can start it so first we need our user data analytics how many user
(7:49:41) created from the last 28 days and how many users created the all every month from the last one years okay so we need that analytics data so here we can create function this function name will be user git user Analytics users Analytics oh sorry Analytics yeah and this is obviously only for admin okay only admin can understand uh on the admin can see this analytics okay on the for admin yep now create our function constant get user Analytics then it's a very simple functions in here right use on try catch error type is any then return our
(7:50:43) next yep and just cut it response not need in here now simply guys we need to create a variable like constant users equal to average call our generate last 12 months data function okay then send our users model because we need our user model to generate as 12 as much data then we can write or raise dot status 200 and we can send these users so this will simply give our perfect analytics data so I am right now showing user suppose I am coming in here in this Roots folder creating a new roots like Analytics Dot root dot TS like this
(7:51:44) in here first import our Express from Express then import not import make our analytics router so Express router and analytics router dot gate request okay this will be get users and Analytics yep is authenticated then authorized roles is only admin can access it and get users analytics Dot now export this default analytics router cool come here
(7:52:49) at the top make it Analytics routers and this will be our analytics routers done copy this and add it in here cool now come back to our Postman and paste this so for this refresh our token now in here what is the true religator users right or not get all users get users analytics like this now paste it and hit sync and note how we are getting our data up first let me show you the result so we are getting our data users right then we are getting our last 12 months so this is the month so we are getting noticed the day today is 7 August but
(7:53:53) it's going to 8 August okay because sometimes I notice like today's date uh if it's like more than 12 p.m okay as our programming counting like 24s okay so that's why it's doing sometimes a two problems that's why I'm always like plus one with it okay like eight August so at the last few days we created three accounts that's why it's showing three if I just come to my admin dashboard is not the three account okay at the previous month obviously we didn't create any account okay so this is
(7:54:23) meaning this will show you the uh perfect data in here okay like previous months how many people created account then we can compare it in our admin dashboard like uh is it's increasing our uh or user creating is increasing or not okay not for only user will add the same feature for our every things like for courses then for our orders okay we'll add this features for everything as you wanna add this feature for everything that's why we uh we created this analytics generator okay because we can simply call this function and we can
(7:54:56) send the model this will automatically generate us the data okay so yep now we can save this so this will be in hours user folder name will be users Analytics only for admin code now let's do the same things for our courses and order as well very simple paste it in here get courses analytics this will be get courses Analytics so courses and in here send our course model like this then let's do same things for our order also
(7:56:00) so get Auto analytics and if you want anything more analytics then you can also add it in here okay everything will be same just change them just send the model okay our generate last 12 1 data generator will automatically generate the analytics for us okay so get order Analytics in here this will be also orders this will be orders and this will be our order model done so we can right now use these three roots in here copy the previous one this will be order s analytics so get orders Analytics then last one will be our
(7:56:51) courses Analytics so get not get countries get courses analytics here like this so now let's come to our here copy this one create a new one get courses analytics we are getting our courses data in here okay but today's 8th August okay something is obviously wrong why it's showing zero account because in our courses hmm I noticed something mistake in our courses notice guys in our courses we don't have any created it okay so let's come to our course model let's check probably we forgot to add the uh
(7:57:42) time stamps ok so in here come to our codes module.ts in here obviously add timestamps true okay like this now what will happen if you right now create a new course okay suppose for example I'm coming here and I'm hitting this create course done now if I hit this end again the note this is showing one so it's perfectly working so this is our course analytics so come here go to course code says Analytics only for admin done and our last one okay which is important that is our order analytics order Analytics
(7:58:40) sorry orders not orders okay Json lip token expired a fresh out token now hit sync and key up we have two counts okay so from the last few months not not few months from the last 28 days we uh what are two okay yeah this is our two order in here so obviously this will work because uh the same things I'm also using in bikodyme and which is perfectly working okay which is like comparing also perfectly so yeah so we can also save it name will be orders Analytics only for admin this will be in order yep see done
(7:59:29) so admin dashboard analytics features is also done which is which was very important now we can guys start a new features okay new sections and these sections is pretty pretty interesting that's because in this in the next section we're going to start our like you know navigation menu in our website we are using navigation menu in our website uh we are using like banners break uh website in the home page you are using Banner then this type of everything like FAQ navigation footer hero everything we can
(8:00:04) update it from our website from our admin dashboard okay admin can update anything without changing code okay so we will Implement these features from the next video so that's it see you in the next video all right so let's create a new file in this models folder name will be our layout dot model dot TS now first import our schema then import our model and import our document like this from our mongos cool now create an interface name will be if AQ item which extends document and we have question in here which type
(8:01:03) will be string then answers right in FAQ we have these two things question and answer which type is also string then we need to create another interface which will be for our category okay this category means our course category what admin can create basically so Exchange document in here we'll write a title okay because category just need on title yep string that's it it's enough then after the interface category now we need to create another interface this will be for our Banner image okay which is exchange
(8:01:56) document and title will be oh sorry sorry not not title public ID string and URL will be our string okay like this then now we need to create another interface which is for our layout which is the main exterior Main interface okay which exchange our document so type so for all our interface sorry for all collections in this layout model okay with your type like this is FAQ or categories or like our Banner image okay we will Define the type okay we'll uh when we will create it then you will see the type it's imported for finding out
(8:02:51) the exact for finding out the exact data okay then FAQ which will be our FAQ item and it's an array so write like this categories which is our categories area and banner image which is Banner image okay but it's wrong because Banner image is an object so we need to send our image which with your banner image we have our title which is string we have our subtitle in our Banner so string like this then now we can create our schema so FAQ schema new schema FAQ item like this and in here first
(8:03:57) we need to write our question which type is string and that's it required not true because uh all time we don't we'll create on the question okay so then answer which type is string okay yep then in here category schema which is our category schema like this then in here we can add our title which type will be string that's it then after it we can create our Banner image schema like this and this will
(8:05:00) give us our public ID which type is string and URL which type is also string like this now we need to create our last schema which is our layout schema so new schema and call our layout like this then simply so this layout means guys our interface layout okay now in here we need to write or type okay because for create on layout we need type so type string type type string okay we have FAQ and for this you already created our FAQ schema so we don't need to do it again and in here this will be comma yeah after read we have categories
(8:05:58) which is also category schema then in here we need our Banner which is we need our image which will be our Banner image schema and title which type is string and our subtitle which type is also string okay here give a comma like this then finish it in turn then after it after it everything is done guys now simply create our model so layout module equal to model layout and layout schema now export our default layout model done so that's it so this is our layout model schema okay
(8:07:02) how basically this is looking so we have our FAQ item category Banner image layout or if you want to add like any extra things then you can also edit then you can also update that from our admin dashboard okay so that's it guys this is our model design okay so from the next video we'll start to create it okay so that's it see you in the next video over it let's go to our controllers folder and let's create a new file name will be our layout Dot controller dot TS like this now import few things what we always do
(8:07:53) like request response and next function like this now import our ear Handler and import catch a sync error okay now create layout so export create layout okay we can give this name function try catch and error type any yup so first what we'll do in here so suppose first when I create our FAQ item okay so from our API first we will receive our type okay so this type means if type is equal to
(8:08:57) if type equal to Banner it means we need to create our Banner okay so then what we will do obviously then we also receiving some other fields like Banner from our request.body right not possible to take Banner because we need few things for Banner okay like we need our Banner image so Banner is an object in this object we have image we have title we have our subtitle okay yeah then simply we need to uh call edit then our layout model dot create simply send this title and subtitle okay obviously we need to do in here okay in here guys
(8:10:00) add our catch as in colors then asynchronous function and in here also I'd like this yep so now we can upload our Banner so image uh something is wrong guys so let's do one thing and here's something wrong because we need to upload the image obviously so in here first constant my cloud so Eric claudinary dot vq.upload.
(8:10:38) upload in the w dot image we need to specify the folder name which is basically layout then in here like this so import or cloudinary cloudinary from cloudinery yep okay so now uh when we are uploading it it means we have right now our Banner data okay so constant Banner equal to we have our uh image okay so which is an object where we have public ID which will be my cloud.
(8:11:26) public ID and URL will be my cloud dot secure URL then secondly we have our title which is basically title is title okay and we have our subtitle because we don't need to upload anything for these few things then we can send this Banner yeah and in here if type is FAQ then we will receive few things from our data right like we will receive our questions and answer okay but this will be obviously an array so let's check one thing so FAQ items this is question and answer we have okay good but this will be on array so we can say one thing and
(8:12:16) that is FAQ data we will receive it from our backend okay from our API so request.body which is basically one array okay as like however FAQ array in here so yeah this is FAQ schema where we have question and answer okay so FAQ we can say this to FAQ also because we can like add here then array then in here we can create our FAQ like this then next logic if its categories then what we need to do we will also receive categories array okay then we'll create it like this and then the last we will send on response
(8:13:01) 200 dot Json success row and layout created successfully like this so now let's try this root copy this create layout come to our roots create a new root layout Dot root dot yes so import Express from Express then constant layout router equal to Express dot router now layout router Dot post create layout okay create layout is basically not in your admin dashboard because we will simply update it okay so then
(8:14:05) obviously each authenticated then authorized rules which will be admin then our create layout yeah now export our default layout router done now instead of analytics router make it layout routers and in here layout router so just come here and paste it cool so you have done now we can test our root so copy this come here create a new root this will be post request
(8:15:11) and like this and or create layout so first obviously we need to Define on type in here okay so suppose first we're going to create on FAQ so let me check the spelling obviously need to be correct spelling okay yeah so this need to be all these caps okay Capital so type is FAQ now we need to send our FAQ which will be on array so FAQ and in here we have question so then we have an answer right in of every object we have question and answer yeah so question basically guys I am copying it from picodemi okay suppose and like copy
(8:16:04) this for testing you can also update it as your wish so question is this one oh sorry yeah like this then answer will be copy answer so what we did in here let me show you again this is the type FAQ and FAQ is an array and in this area we have this data now in simply first refresh our token okay otherwise it doesn't work obviously refresh token now hit send so layout created successfully right now come to our database just give a Reload
(8:17:07) this is our layouts so it's creating guys four times which is totally wrong okay the reason is we are doing something wrong in this code okay in this in this FAQ so first let me explain what we did wrong so this FX is obviously array so you cannot totally uh add area like this in our mongodb okay we need to First add it we need to break it to object so make fake FAQ items okay not fake items FAQ items then await promise dot all now we need to map our FAQ okay so FAQ dot map on asynchronous function we can receive a parameter like icam we
(8:17:51) can give type to any then in here we need to return our question which is our item Dot question yup and last we have our answer which is item dot answer like this we cannot use like Fast bracket in here okay we need to use the second bracket like this yep so done and in here guys after it simply average layout model dot create in here we need to add another field so this is very important that is type we need to say this type is FAQ okay and we need to add our FAQ as our FAQ items sorry FAQ items done so right now if we save our code if we
(8:18:47) come to uh first delete these four things from our database then delete and delete now come to our Postman again just give a refresh to a token now hit send layout created now come here give a Reload notice four data in here perfectly and type everything is perfect what we actually expect and now obviously first we will check it okay from our from our database okay so we can do one thing at the type sorry at the top first we will check so each type exists edit layout dot find one with this type okay if is type exist then
(8:19:49) we need to return on error okay because obviously admin cannot create like FAQ for two times okay obviously admin cannot create admin can edit it but cannot create it again so return next new error Handler like in this or we can say one thing we can use our back Edge we can say type already exist okay like this yep so then this will give error so right now if we try to create again FAQ then this will give error let me show you just hit send FAQ already exists perfect I'm not creating it done so now we need to create our next one which is
(8:20:43) categories and which is also guys kind of same thing so we need to Simply copy this one after category spaced it this will be categories items okay and this will be our categories dot map then in categories we have our title only so change it to simple title item Dot title like this so yep now categories item not categories item first copy this one sorry and update it then here will be categories and categories will be our this categories item like this now hit format document
(8:21:48) now this is category so now let's create our categories okay so for categories this is our course categories okay so I am just creating like some default course categories so suppose oops let's go to postman and in here after type FAQ create another one categories and in categories we have title which is on array but object in here also okay like title but categories this will be categories okay now title suppose we have uh how which types of categories we have like programming then our we can say digital marketing
(8:22:52) then we can say new one like design Graphics design okay this is Graphics design course then we can also give like other types machine learning okay so if we can write give this type of type so now let's try it layout created successfully come to database give reload yup categories this is the data oops only going the object ID oh sorry this will be title not title okay typing mistake now obviously delete it otherwise you cannot get like same type of data again okay so now hit send now come to database give reload yup
(8:23:46) categories here and yeah title programming title digital marketing yeah so this is also done now next one is our sorry first one which is right now only missing that is our balance okay and guys for testing the banner basically okay as we are right now not have like our image okay because image obviously must need on base64 value so it will uh obviously right now we cannot like add this okay obviously we'll test it when we'll do our front-end part okay we'll test it don't worry so uh right now this is this
(8:24:22) feature is working okay we can up we can upload banners then FAQ and categories okay from the next video okay from the next video I'll show you how can we edit this okay because admin will obviously edit it means we don't like create new one okay admin cannot create new FAQ new categories obviously the admin can create but that will be in same same model okay I mean in same data like in in this FAQ okay admin will add like new new object or admin will like edit this one okay admin can do this but admin cannot create any
(8:24:56) another FAQ okay so edit feature is very important right now so that's it see you on the next video all right guys so editing layout widgets is very very easy okay you can think it's kind of similar okay so edit layout so export and constant edit layout catch a sync error asynchronous function request response and next function like this on try catch error type will be any and in here we need to return our newer handlers cool so at the first we can totally copy this okay or create layout totally copy the drive tripod then paste
(8:25:47) it in here like this now first we will receive our requested body okay obviously we will receive it then we don't need to like check it because obviously it will not create any new one from here so then we will check this if the type is Banner then obviously we are getting this image title and subtitles right from our request.
(8:26:13) body so then in here first we need to delete our avoid ordinary dot V2 dot uploader dot destroy and uks.body.publicio can not request.body DOT public ID basically uh first list one thing guys in here okay when we are okay so we need our Banner data obviously okay if the type is Banner then constant Banner data which will be layout model dot find one and BNR data so then Banner data and in here add Cloud energy video dot upload.
(8:27:07) destroy this will be Banner data dot image dot public ID like this so guys notice system is giving error property image does not exist on document like this so in here in the spanner data right is type is any okay then this error will done now upload our new image okay to our layout folder cool then we have like our my cloud dot public ID my cloud.
(8:27:43) secure URL this is a new Banner now add layout model Dot find by ID and update okay ID will be basically our Banner data dot ID like this then updated data will be our this Banner okay yep obviously give here and comma done so Banner updating features done now for the FAQ we are getting data perfectly then again layout model data Dot find by ID and update okay type will be this FAQ videos obviously you need to find by ID so we need to define the ID okay for editing so how can we find out the ID in here when we're receiving our FAQ
(8:28:36) from body we need to search it okay FAQ item will be our average layout model dot find one like this one okay and not need these guys yep so edit layout model dot find one type FAQ then in here this will be FAQ dot underscore ID yep so same things you also need for our categories so come here and paste it in here like categories categories data we can see and this type will be like these categories then in here not create it simply find by ID
(8:29:44) and update and this will be categories data for underscore ID like this and type will be these categories sent or new categories I came cool so then they out updated successfully now come here copy your first one paste it again and edit layout edit layout like this now come to our Postman first save this one okay save it as like create layout we can create a new folder for this also okay new folder name will be layout in this folder we can save it uh sorry save it in our layout folder first the folder oops let's create it
(8:30:42) again okay so add folder layout and hit it I move it in this layout yep now try it again guys simply edit layout come to here raw data Json and copy some data from here because we need the same data so suppose in here right now we are now getting it on categories okay we're gonna update our categories so suppose programming digital marketing graphic design so I am just remove this machine learning okay for now first refresh our token and obviously put request now hit send so unexpected validation okay oh yeah we cannot send like this now we
(8:31:44) send edit layout not found oh sorry this is the put request guys now hit send so layout updated successfully come to here in our categories we have three object right so let's check it right now we still have machine learning okay so something is wrong in here let me check this will be undescribed you guys oh sorry not here and here is also underscore ID and FAQ is like that same category stator is also same so let's do one thing let's console log this categories data now hit send if type is categories
(8:32:47) Okay C will be Capital I'm sorry now hit send yep now again give a Reload and boom there you go it's perfectly working as we expect okay so obviously we make sure that you are writing the same category name okay in here obviously same name other so it doesn't work same type so category is updating so now check out FAQ uh just add the previous one again okay the machine learning one which is important yeah this one and category C will be Capital obviously now hit send now come out database uh one two now if give
(8:33:29) reload yeah three perfect so now change our FAQ so type will be FAQ same things I am right now creating for four times like only for testing okay like this this and this now hit send so they would update it successfully come here give reload and FAQ all the same what is so it's also perfectly updating so you can save it easily and we can give this name to our edit layout and this is also only for admin obviously this create layout is also for only for admin so you can rename it and only for admin done
(8:34:33) so edit layout features is working which is very very easy right because we're doing kind of similar things and this one will check it when we will implement the front-end feature upload images okay Banner one now let's make on very simple function which is very important get layout by type okay it's very important for fetching data so now export constant gate layout by type request response next we have a try catch yeah done and in here constant layout equal to Avid layout model that find by ID so requested params.type not like that
(8:35:38) we can say request dot body Dot type like this then we can send our response so race dot status 201 dot Json success true and a word layout done so it's very very simple now copy this gate layout by type come here first copy the previous one this will be obviously gate request and get layout we can say gate layout okay then in here get layout by type but this is not only for admin this is for everyone okay because layout need in like home page also okay so obviously this is for everyone even not for is authenticated
(8:36:39) okay get layout by type now come here our website sorry our Postman create a new request get layout in here we need to say our type which type of layout data we need so type suppose FAQ now hit send find on must what got type string okay so let me check something in here let's do one thing guys constant type okay equal to request dot body like this and in here type so I simply added another second bracket in here like this okay then it will start to work now hit come here and send Yep this is all FAQ data now suppose we
(8:37:37) want our categories heat scent yeah here's our categories so this is also working so simply give this name to get layout and save it done so we uh we are almost at the end of our backend part of this tutorial okay because we already finished a lot of apis right one two three let's count it one two three four five six seven so we already completed 34 apis which is a very large number of apis and we need to implement this all apis in our front end so probably right now you're getting how much Peak this application going to
(8:38:23) be okay so this is almost at the end of our backend part okay on one on more video already also help okay and which is in the next video the next video I will explain you the advanced caching features okay already implemented radius okay but we need to change something okay we need to modify our radius for something okay because uh we cannot use like radius for everything okay we cannot use radius for every file so I'll explain it in the next video okay this and that will be the last video in this back end part okay then
(8:38:58) we'll jump to our front-end part we'll start the front end with next Chase then we'll Implement like some everything's okay first we will implement the header okay then authentication system then we start our admin dashboard then we'll do everything like slowly slowly okay so that's it guys see you in the next video then okay guys so this is the last video in this back end backing part of this LMS series okay and I can say this is the most important video in this series for cash maintenance okay so please don't skip
(8:39:38) any single second please don't skip any single second because this video is the is it's very informative okay so okay let's start it so guys we are using radius for maintainings or cash right we are using radius for maintainings or cash so first we need to understand the cache maintainings with more complex ways so why we are using radius and why we need cache maintains like why it's important so suppose let me go to a website okay suppose uh I am right now going to Netflix okay Netflix very popular
(8:40:16) website so this is my Netflix video okay so you can go to anywhere just go to Netflix so it's not showing me movies okay because I need to log in so basically when we log into Netflix what we see there are a lot of movies right and when you click it it's uh giving us that movie so not only you and me there are they are having like a lot of people lot like 10 000 unlike millions of people can give request in a single movie right so when a server will get like single type same type of data with like uh suppose same same type of 10 000 request
(8:40:58) in a single second then servers will obviously getting down slow when solver will getting down slow then you will see loading loading loading loading in your front end part right because we use loading for like showing to uh that our server is right now going giving response to us right for fixing this problem developers use cash maintains okay developer cached some data so which type of data developer test basically so suppose for a good example I am coming to our website so uh suppose in our bicodini website we have 15 000 users okay 15 000
(8:41:38) registered user but in this 15 000 registers user only 1000 are like 2000 people using your website every day and the other 49 000 or 48 000 people not using our website like every day they are reading like uh one day in a month or they're not using it totally like this okay they just created the account but they are not using right now so in our radius database what we are doing we are simply adding the r data right our users all data like this one this one then this one so obviously when this will get like 15
(8:42:16) 000 user the cash size will be very big then it will take a lot of time to responses it means it is also getting down slow right it's it's very common it will also getting down slow because the cash size will be very big so what then we can do we can do a very smart thing for maintaining this cache maintainings is really like you need to think about your business first okay totally you need to understand your business then you need to implement this cache cache features okay then you need to Cache that data
(8:42:51) those status if I right now come to my website because me then in this because you mean the home pages is like people visiting more okay how I'm understanding it I implemented here like Google analytics so that's why I can see like which page is visited more by user so in here we have this Dynamic data on okay so I can easily cache it in our release I can easily cast this in our release and I can easily change it then if 10 000 people coming in here in a single second no problem our radius can easily
(8:43:23) responses but if we have 15 cores then you cannot add that 50 cores in our radius database obviously not we need to add the most or view archival course in our radius database and the other things that will be expired after a certain time so in here we don't add the 15 000 users obviously when user will log in we will add that in our radius cache okay resist reduce cash for session that user okay but if the user is not coming in our website for the seven days then we'll expire that from our latest database
(8:44:04) that will be delete automatically from a radius database so what will happen then which people is coming our website and using our website that people account will be cached in here on the then then they will like get fast data right and I know right now we have one question then which people is not logged in in our website and what what happened like after uh one month they are coming our website then what will happen when they will come on website we will show them on message like please log in again because your session is expired
(8:44:38) obviously when a user is not coming in on website for 30 days the reason again login to our website okay then when they will log in we will again set on session in here but that will be also eligible for the next seven days and the most magical things in here that is if the user using this website every day then the session expired will be also update every day okay because for every reload we are updating our session expired so when is there a not using our website it means they are not giving reload so it's where then the expiry is
(8:45:17) also not updating so after 7 Day automatically it will expired okay so I didn't implemented this any features you know right now the website okay so because only for explaining it to you then you will understand it more better okay that's why so right now I am ex and just implementing some very very like small small features I'm explaining it obviously again to you with code also so suppose what we are doing first go to our utils and in here sorry not utilize middleware first go to on middleware and this
(8:45:51) auth.ts when user just login we are first checking our token right then we are checking this taxes token then after decoding we are getting data from our radius if not have data is ready not found okay or we can say Oneness is also you can update it please login to access this resource like this okay we can update it like this then we are setting this request.
(8:46:23) user to this user okay now let's come to our user controller and this refresh token okay just come this update access token this one okay so when user is giving reload in here we need to add a single line we are updating our cookies very good but we also need to update our radius so avoid radius dot set user dot underscore ID and json.
(8:46:54) stringify this user but right now we will set an expireity in here and the expiry will be 7K Okay so in radius basically we cannot use like 7 Day okay we need to use second type so this is meaning 7 J so I'm writing right now giving here an comment for like explaining it to you so this meaning is saving let me cut it and add it in here like this okay this this meaning seven days you can update it as your wish this is a second format of this seven days okay so then what will happen let me show you right now after by giving a simple uh
(8:47:37) by giving a simple example okay so I am setting this expired to 10 10 second okay so after 10 seconds this will automatically expire five second and in here one thing it's important if not have the session then not send like could not refresh token send this one please login for access this resources like this okay now come to our website so your Postman first check okay we are right now logged in in which which account first check this one so come to our uh wait guys I am login right now in this one okay this uh
(8:48:26) support sorry not support this is sponsorship one okay this one which is admin so in here I will not have any expirability okay now come here and refresh our token it's refreshed very good but give a Reload the note this is our sponsorship one okay but it's have right now expiry key okay so I am right right now just wait for five seconds one two three 4 and 5 and give reload note that's gone that's user is gone so right now if you try to refresh our token again please login for access this resource
(8:49:05) it meanings we are logged out automatically so this is right now 10 second as just added this 5 Second only for explaining it okay obviously this will be not five second this will be 7 Days okay oops this will be 7 in case and the second format second format is this one yeah so now this is X this will expire after seven days so if we are refreshing it all time it's updating okay so obviously the first doesn't work right now because we need to log in again if you right now login then we can refresh our token easily yeah like this
(8:49:49) note that it is in here cool so we are every time updating our expiry key okay when we are giving this reload then this is notice this is the TTL okay it's the expiry key second so when we are giving reload again first guys note this one this is six key okay 64 7 and this one let me copy this now give a Reload now check it's not similar what is it's not similar 64 and 66 right now okay so let's do one thing come here and again refresh our token then note this will again go to 7K this is the power okay what we are using
(8:50:45) so if user is login in your website if user is using your website then we don't expire it okay either don't need to like again login for our regular user so yeah done this feature is this feature is important so it's implementing done so only for this obviously not we also have our course details so this is also like another important page while user is coming like a very multiple time right so 10 000 people can come this course Details page because we will add this course Details page you know like for marketing or website right
(8:51:23) so then obviously suppose you have 50 cores obviously 50 course is not like popular high school 5 or 10 course is popular we will add that 5 or 10 cores in our radius cash and when some course people will not see that much then we'll expire that easily okay for example come here in our course controller when we are giving request to this get course okay get single course without purchasing yeah this is important so without purchasing and in here we are setting the data in our radius right so just update it set on EX
(8:52:11) and our seven days uh wait guys let me see the exact value okay I forgot it so this is the exact one this meaning seven day this expire okay so if course is not visiting that much then this will automatically expire Okay then if that course is like people coming every day every day then obviously that is not expired okay that will automatically update the expression so that's it guys so these two things I thought like very important okay so if anything you want to add in your Regis cache in a Regis cache then you can add it but mask you
(8:52:54) need to think about it if the radius cache size is going to beak then it's obviously not good for our website okay so right now it's your task while you wanna add reduce and from your next project from your next future project obviously you will add Radix in your project okay for maintains cash so I hope guys you learned new things from this tutorial about maintaining sketch if you learn something from this tutorial and if you can implement it if you can apply these things in your next future project that's that will really
(8:53:27) appreciate me okay that will appreciate me for make more content and please don't get scared when you're watching new styles of coding okay like some people or some beginner programmer when they're watching this code they're thinking oh no if I change any single line then this will doesn't work no please if you think this is hard then this is hard you need to play with programming okay I used online in my YouTube channel that is programming is a game just play it with your brain it's really like that
(8:53:57) okay you just need to play it with your brain please don't think it's very hard or like when you are suffering on back no no I cannot do programming please not like that please don't do this you have no idea of how much problems or how much bugs we we export our intermediate programmers fix every day you have no idea we can fix because we know debugging so you also need to do that you need to give out your problem why bug happening why it's happening you need to find out it please don't get
(8:54:29) scared after watching like hard code or like anything like this when you if you're watching a new code thing and another suggestion is learn to debug in learn to play with code then it will be a good program around future so that's it guys so from the next video we'll start to totally our front end part will jump to our front input and we'll start to make the design and we'll Implement our authentication part of the first time okay so that's it see you in the next video
